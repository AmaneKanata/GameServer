// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_002_FPS.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_5f002_5fFPS_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_5f002_5fFPS_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Packet_001_GameObject.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_5f002_5fFPS_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_5f002_5fFPS_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_5f002_5fFPS_2eproto;
namespace Protocol {
class C_INSTANTIATE_FPS_PLAYER;
struct C_INSTANTIATE_FPS_PLAYERDefaultTypeInternal;
extern C_INSTANTIATE_FPS_PLAYERDefaultTypeInternal _C_INSTANTIATE_FPS_PLAYER_default_instance_;
class C_SET_FPS_POSITION;
struct C_SET_FPS_POSITIONDefaultTypeInternal;
extern C_SET_FPS_POSITIONDefaultTypeInternal _C_SET_FPS_POSITION_default_instance_;
class C_SET_FPS_ROTATION;
struct C_SET_FPS_ROTATIONDefaultTypeInternal;
extern C_SET_FPS_ROTATIONDefaultTypeInternal _C_SET_FPS_ROTATION_default_instance_;
class C_SHOT;
struct C_SHOTDefaultTypeInternal;
extern C_SHOTDefaultTypeInternal _C_SHOT_default_instance_;
class S_ADD_FPS_PLAYER;
struct S_ADD_FPS_PLAYERDefaultTypeInternal;
extern S_ADD_FPS_PLAYERDefaultTypeInternal _S_ADD_FPS_PLAYER_default_instance_;
class S_ADD_FPS_PLAYER_GameObjectInfo;
struct S_ADD_FPS_PLAYER_GameObjectInfoDefaultTypeInternal;
extern S_ADD_FPS_PLAYER_GameObjectInfoDefaultTypeInternal _S_ADD_FPS_PLAYER_GameObjectInfo_default_instance_;
class S_ATTACKED;
struct S_ATTACKEDDefaultTypeInternal;
extern S_ATTACKEDDefaultTypeInternal _S_ATTACKED_default_instance_;
class S_SET_FPS_POSITION;
struct S_SET_FPS_POSITIONDefaultTypeInternal;
extern S_SET_FPS_POSITIONDefaultTypeInternal _S_SET_FPS_POSITION_default_instance_;
class S_SET_FPS_ROTATION;
struct S_SET_FPS_ROTATIONDefaultTypeInternal;
extern S_SET_FPS_ROTATIONDefaultTypeInternal _S_SET_FPS_ROTATION_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_INSTANTIATE_FPS_PLAYER* Arena::CreateMaybeMessage<::Protocol::C_INSTANTIATE_FPS_PLAYER>(Arena*);
template<> ::Protocol::C_SET_FPS_POSITION* Arena::CreateMaybeMessage<::Protocol::C_SET_FPS_POSITION>(Arena*);
template<> ::Protocol::C_SET_FPS_ROTATION* Arena::CreateMaybeMessage<::Protocol::C_SET_FPS_ROTATION>(Arena*);
template<> ::Protocol::C_SHOT* Arena::CreateMaybeMessage<::Protocol::C_SHOT>(Arena*);
template<> ::Protocol::S_ADD_FPS_PLAYER* Arena::CreateMaybeMessage<::Protocol::S_ADD_FPS_PLAYER>(Arena*);
template<> ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo* Arena::CreateMaybeMessage<::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo>(Arena*);
template<> ::Protocol::S_ATTACKED* Arena::CreateMaybeMessage<::Protocol::S_ATTACKED>(Arena*);
template<> ::Protocol::S_SET_FPS_POSITION* Arena::CreateMaybeMessage<::Protocol::S_SET_FPS_POSITION>(Arena*);
template<> ::Protocol::S_SET_FPS_ROTATION* Arena::CreateMaybeMessage<::Protocol::S_SET_FPS_ROTATION>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_INSTANTIATE_FPS_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_INSTANTIATE_FPS_PLAYER) */ {
 public:
  inline C_INSTANTIATE_FPS_PLAYER() : C_INSTANTIATE_FPS_PLAYER(nullptr) {}
  ~C_INSTANTIATE_FPS_PLAYER() override;
  explicit PROTOBUF_CONSTEXPR C_INSTANTIATE_FPS_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_INSTANTIATE_FPS_PLAYER(const C_INSTANTIATE_FPS_PLAYER& from);
  C_INSTANTIATE_FPS_PLAYER(C_INSTANTIATE_FPS_PLAYER&& from) noexcept
    : C_INSTANTIATE_FPS_PLAYER() {
    *this = ::std::move(from);
  }

  inline C_INSTANTIATE_FPS_PLAYER& operator=(const C_INSTANTIATE_FPS_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_INSTANTIATE_FPS_PLAYER& operator=(C_INSTANTIATE_FPS_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_INSTANTIATE_FPS_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_INSTANTIATE_FPS_PLAYER* internal_default_instance() {
    return reinterpret_cast<const C_INSTANTIATE_FPS_PLAYER*>(
               &_C_INSTANTIATE_FPS_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_INSTANTIATE_FPS_PLAYER& a, C_INSTANTIATE_FPS_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(C_INSTANTIATE_FPS_PLAYER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_INSTANTIATE_FPS_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_INSTANTIATE_FPS_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_INSTANTIATE_FPS_PLAYER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_INSTANTIATE_FPS_PLAYER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_INSTANTIATE_FPS_PLAYER& from) {
    C_INSTANTIATE_FPS_PLAYER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_INSTANTIATE_FPS_PLAYER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_INSTANTIATE_FPS_PLAYER";
  }
  protected:
  explicit C_INSTANTIATE_FPS_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .Protocol.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:Protocol.C_INSTANTIATE_FPS_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_ADD_FPS_PLAYER_GameObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo) */ {
 public:
  inline S_ADD_FPS_PLAYER_GameObjectInfo() : S_ADD_FPS_PLAYER_GameObjectInfo(nullptr) {}
  ~S_ADD_FPS_PLAYER_GameObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR S_ADD_FPS_PLAYER_GameObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ADD_FPS_PLAYER_GameObjectInfo(const S_ADD_FPS_PLAYER_GameObjectInfo& from);
  S_ADD_FPS_PLAYER_GameObjectInfo(S_ADD_FPS_PLAYER_GameObjectInfo&& from) noexcept
    : S_ADD_FPS_PLAYER_GameObjectInfo() {
    *this = ::std::move(from);
  }

  inline S_ADD_FPS_PLAYER_GameObjectInfo& operator=(const S_ADD_FPS_PLAYER_GameObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ADD_FPS_PLAYER_GameObjectInfo& operator=(S_ADD_FPS_PLAYER_GameObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ADD_FPS_PLAYER_GameObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ADD_FPS_PLAYER_GameObjectInfo* internal_default_instance() {
    return reinterpret_cast<const S_ADD_FPS_PLAYER_GameObjectInfo*>(
               &_S_ADD_FPS_PLAYER_GameObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_ADD_FPS_PLAYER_GameObjectInfo& a, S_ADD_FPS_PLAYER_GameObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ADD_FPS_PLAYER_GameObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ADD_FPS_PLAYER_GameObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ADD_FPS_PLAYER_GameObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ADD_FPS_PLAYER_GameObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ADD_FPS_PLAYER_GameObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ADD_FPS_PLAYER_GameObjectInfo& from) {
    S_ADD_FPS_PLAYER_GameObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ADD_FPS_PLAYER_GameObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ADD_FPS_PLAYER.GameObjectInfo";
  }
  protected:
  explicit S_ADD_FPS_PLAYER_GameObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 2,
    kPositionFieldNumber = 4,
    kVelocityFieldNumber = 5,
    kRotationFieldNumber = 6,
    kPlayerIdFieldNumber = 1,
    kHpFieldNumber = 3,
  };
  // string ownerId = 2;
  void clear_ownerid();
  const std::string& ownerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ownerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ownerid();
  PROTOBUF_NODISCARD std::string* release_ownerid();
  void set_allocated_ownerid(std::string* ownerid);
  private:
  const std::string& _internal_ownerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ownerid(const std::string& value);
  std::string* _internal_mutable_ownerid();
  public:

  // .Protocol.Vector3 position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 velocity = 5;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::Protocol::Vector3& velocity() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_velocity();
  ::Protocol::Vector3* mutable_velocity();
  void set_allocated_velocity(::Protocol::Vector3* velocity);
  private:
  const ::Protocol::Vector3& _internal_velocity() const;
  ::Protocol::Vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::Protocol::Vector3* velocity);
  ::Protocol::Vector3* unsafe_arena_release_velocity();

  // .Protocol.Vector3 rotation = 6;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // int32 playerId = 1;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // int32 hp = 3;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ownerid_;
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* velocity_;
    ::Protocol::Vector3* rotation_;
    int32_t playerid_;
    int32_t hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_ADD_FPS_PLAYER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ADD_FPS_PLAYER) */ {
 public:
  inline S_ADD_FPS_PLAYER() : S_ADD_FPS_PLAYER(nullptr) {}
  ~S_ADD_FPS_PLAYER() override;
  explicit PROTOBUF_CONSTEXPR S_ADD_FPS_PLAYER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ADD_FPS_PLAYER(const S_ADD_FPS_PLAYER& from);
  S_ADD_FPS_PLAYER(S_ADD_FPS_PLAYER&& from) noexcept
    : S_ADD_FPS_PLAYER() {
    *this = ::std::move(from);
  }

  inline S_ADD_FPS_PLAYER& operator=(const S_ADD_FPS_PLAYER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ADD_FPS_PLAYER& operator=(S_ADD_FPS_PLAYER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ADD_FPS_PLAYER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ADD_FPS_PLAYER* internal_default_instance() {
    return reinterpret_cast<const S_ADD_FPS_PLAYER*>(
               &_S_ADD_FPS_PLAYER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_ADD_FPS_PLAYER& a, S_ADD_FPS_PLAYER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ADD_FPS_PLAYER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ADD_FPS_PLAYER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ADD_FPS_PLAYER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ADD_FPS_PLAYER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ADD_FPS_PLAYER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ADD_FPS_PLAYER& from) {
    S_ADD_FPS_PLAYER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ADD_FPS_PLAYER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ADD_FPS_PLAYER";
  }
  protected:
  explicit S_ADD_FPS_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef S_ADD_FPS_PLAYER_GameObjectInfo GameObjectInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kGameObjectsFieldNumber = 1,
  };
  // repeated .Protocol.S_ADD_FPS_PLAYER.GameObjectInfo gameObjects = 1;
  int gameobjects_size() const;
  private:
  int _internal_gameobjects_size() const;
  public:
  void clear_gameobjects();
  ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo* mutable_gameobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo >*
      mutable_gameobjects();
  private:
  const ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo& _internal_gameobjects(int index) const;
  ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo* _internal_add_gameobjects();
  public:
  const ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo& gameobjects(int index) const;
  ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo* add_gameobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo >&
      gameobjects() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_ADD_FPS_PLAYER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo > gameobjects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class C_SET_FPS_POSITION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SET_FPS_POSITION) */ {
 public:
  inline C_SET_FPS_POSITION() : C_SET_FPS_POSITION(nullptr) {}
  ~C_SET_FPS_POSITION() override;
  explicit PROTOBUF_CONSTEXPR C_SET_FPS_POSITION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SET_FPS_POSITION(const C_SET_FPS_POSITION& from);
  C_SET_FPS_POSITION(C_SET_FPS_POSITION&& from) noexcept
    : C_SET_FPS_POSITION() {
    *this = ::std::move(from);
  }

  inline C_SET_FPS_POSITION& operator=(const C_SET_FPS_POSITION& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SET_FPS_POSITION& operator=(C_SET_FPS_POSITION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SET_FPS_POSITION& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SET_FPS_POSITION* internal_default_instance() {
    return reinterpret_cast<const C_SET_FPS_POSITION*>(
               &_C_SET_FPS_POSITION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_SET_FPS_POSITION& a, C_SET_FPS_POSITION& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SET_FPS_POSITION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SET_FPS_POSITION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SET_FPS_POSITION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SET_FPS_POSITION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SET_FPS_POSITION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SET_FPS_POSITION& from) {
    C_SET_FPS_POSITION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SET_FPS_POSITION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SET_FPS_POSITION";
  }
  protected:
  explicit C_SET_FPS_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kTimestampFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // .Protocol.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::Protocol::Vector3& velocity() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_velocity();
  ::Protocol::Vector3* mutable_velocity();
  void set_allocated_velocity(::Protocol::Vector3* velocity);
  private:
  const ::Protocol::Vector3& _internal_velocity() const;
  ::Protocol::Vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::Protocol::Vector3* velocity);
  ::Protocol::Vector3* unsafe_arena_release_velocity();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 playerId = 2;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SET_FPS_POSITION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* velocity_;
    int64_t timestamp_;
    int32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_SET_FPS_POSITION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SET_FPS_POSITION) */ {
 public:
  inline S_SET_FPS_POSITION() : S_SET_FPS_POSITION(nullptr) {}
  ~S_SET_FPS_POSITION() override;
  explicit PROTOBUF_CONSTEXPR S_SET_FPS_POSITION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SET_FPS_POSITION(const S_SET_FPS_POSITION& from);
  S_SET_FPS_POSITION(S_SET_FPS_POSITION&& from) noexcept
    : S_SET_FPS_POSITION() {
    *this = ::std::move(from);
  }

  inline S_SET_FPS_POSITION& operator=(const S_SET_FPS_POSITION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SET_FPS_POSITION& operator=(S_SET_FPS_POSITION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SET_FPS_POSITION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SET_FPS_POSITION* internal_default_instance() {
    return reinterpret_cast<const S_SET_FPS_POSITION*>(
               &_S_SET_FPS_POSITION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_SET_FPS_POSITION& a, S_SET_FPS_POSITION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SET_FPS_POSITION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SET_FPS_POSITION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SET_FPS_POSITION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SET_FPS_POSITION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SET_FPS_POSITION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SET_FPS_POSITION& from) {
    S_SET_FPS_POSITION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SET_FPS_POSITION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SET_FPS_POSITION";
  }
  protected:
  explicit S_SET_FPS_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kTimestampFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // .Protocol.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::Protocol::Vector3& velocity() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_velocity();
  ::Protocol::Vector3* mutable_velocity();
  void set_allocated_velocity(::Protocol::Vector3* velocity);
  private:
  const ::Protocol::Vector3& _internal_velocity() const;
  ::Protocol::Vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::Protocol::Vector3* velocity);
  ::Protocol::Vector3* unsafe_arena_release_velocity();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 playerId = 2;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SET_FPS_POSITION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* velocity_;
    int64_t timestamp_;
    int32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class C_SET_FPS_ROTATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SET_FPS_ROTATION) */ {
 public:
  inline C_SET_FPS_ROTATION() : C_SET_FPS_ROTATION(nullptr) {}
  ~C_SET_FPS_ROTATION() override;
  explicit PROTOBUF_CONSTEXPR C_SET_FPS_ROTATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SET_FPS_ROTATION(const C_SET_FPS_ROTATION& from);
  C_SET_FPS_ROTATION(C_SET_FPS_ROTATION&& from) noexcept
    : C_SET_FPS_ROTATION() {
    *this = ::std::move(from);
  }

  inline C_SET_FPS_ROTATION& operator=(const C_SET_FPS_ROTATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SET_FPS_ROTATION& operator=(C_SET_FPS_ROTATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SET_FPS_ROTATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SET_FPS_ROTATION* internal_default_instance() {
    return reinterpret_cast<const C_SET_FPS_ROTATION*>(
               &_C_SET_FPS_ROTATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_SET_FPS_ROTATION& a, C_SET_FPS_ROTATION& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SET_FPS_ROTATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SET_FPS_ROTATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SET_FPS_ROTATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SET_FPS_ROTATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SET_FPS_ROTATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SET_FPS_ROTATION& from) {
    C_SET_FPS_ROTATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SET_FPS_ROTATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SET_FPS_ROTATION";
  }
  protected:
  explicit C_SET_FPS_ROTATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .Protocol.Vector3 rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // int32 playerId = 1;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SET_FPS_ROTATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* rotation_;
    int32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_SET_FPS_ROTATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SET_FPS_ROTATION) */ {
 public:
  inline S_SET_FPS_ROTATION() : S_SET_FPS_ROTATION(nullptr) {}
  ~S_SET_FPS_ROTATION() override;
  explicit PROTOBUF_CONSTEXPR S_SET_FPS_ROTATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SET_FPS_ROTATION(const S_SET_FPS_ROTATION& from);
  S_SET_FPS_ROTATION(S_SET_FPS_ROTATION&& from) noexcept
    : S_SET_FPS_ROTATION() {
    *this = ::std::move(from);
  }

  inline S_SET_FPS_ROTATION& operator=(const S_SET_FPS_ROTATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SET_FPS_ROTATION& operator=(S_SET_FPS_ROTATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SET_FPS_ROTATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SET_FPS_ROTATION* internal_default_instance() {
    return reinterpret_cast<const S_SET_FPS_ROTATION*>(
               &_S_SET_FPS_ROTATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_SET_FPS_ROTATION& a, S_SET_FPS_ROTATION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SET_FPS_ROTATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SET_FPS_ROTATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SET_FPS_ROTATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SET_FPS_ROTATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SET_FPS_ROTATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SET_FPS_ROTATION& from) {
    S_SET_FPS_ROTATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SET_FPS_ROTATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SET_FPS_ROTATION";
  }
  protected:
  explicit S_SET_FPS_ROTATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .Protocol.Vector3 rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // int32 playerId = 1;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SET_FPS_ROTATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* rotation_;
    int32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class C_SHOT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SHOT) */ {
 public:
  inline C_SHOT() : C_SHOT(nullptr) {}
  ~C_SHOT() override;
  explicit PROTOBUF_CONSTEXPR C_SHOT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SHOT(const C_SHOT& from);
  C_SHOT(C_SHOT&& from) noexcept
    : C_SHOT() {
    *this = ::std::move(from);
  }

  inline C_SHOT& operator=(const C_SHOT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SHOT& operator=(C_SHOT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SHOT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SHOT* internal_default_instance() {
    return reinterpret_cast<const C_SHOT*>(
               &_C_SHOT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_SHOT& a, C_SHOT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SHOT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SHOT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SHOT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SHOT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SHOT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SHOT& from) {
    C_SHOT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SHOT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SHOT";
  }
  protected:
  explicit C_SHOT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // .Protocol.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::Protocol::Vector3& direction() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_direction();
  ::Protocol::Vector3* mutable_direction();
  void set_allocated_direction(::Protocol::Vector3* direction);
  private:
  const ::Protocol::Vector3& _internal_direction() const;
  ::Protocol::Vector3* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::Protocol::Vector3* direction);
  ::Protocol::Vector3* unsafe_arena_release_direction();

  // @@protoc_insertion_point(class_scope:Protocol.C_SHOT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_ATTACKED final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ATTACKED) */ {
 public:
  inline S_ATTACKED() : S_ATTACKED(nullptr) {}
  ~S_ATTACKED() override;
  explicit PROTOBUF_CONSTEXPR S_ATTACKED(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ATTACKED(const S_ATTACKED& from);
  S_ATTACKED(S_ATTACKED&& from) noexcept
    : S_ATTACKED() {
    *this = ::std::move(from);
  }

  inline S_ATTACKED& operator=(const S_ATTACKED& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ATTACKED& operator=(S_ATTACKED&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ATTACKED& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ATTACKED* internal_default_instance() {
    return reinterpret_cast<const S_ATTACKED*>(
               &_S_ATTACKED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_ATTACKED& a, S_ATTACKED& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ATTACKED* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ATTACKED* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ATTACKED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ATTACKED>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ATTACKED& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ATTACKED& from) {
    S_ATTACKED::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ATTACKED* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ATTACKED";
  }
  protected:
  explicit S_ATTACKED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayeridFieldNumber = 1,
    kDamageFieldNumber = 2,
  };
  // int32 playerid = 1;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // int32 damage = 2;
  void clear_damage();
  int32_t damage() const;
  void set_damage(int32_t value);
  private:
  int32_t _internal_damage() const;
  void _internal_set_damage(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ATTACKED)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playerid_;
    int32_t damage_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_INSTANTIATE_FPS_PLAYER

// .Protocol.Vector3 position = 1;
inline bool C_INSTANTIATE_FPS_PLAYER::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_INSTANTIATE_FPS_PLAYER::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& C_INSTANTIATE_FPS_PLAYER::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_INSTANTIATE_FPS_PLAYER::position() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INSTANTIATE_FPS_PLAYER.position)
  return _internal_position();
}
inline void C_INSTANTIATE_FPS_PLAYER::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_INSTANTIATE_FPS_PLAYER.position)
}
inline ::Protocol::Vector3* C_INSTANTIATE_FPS_PLAYER::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_INSTANTIATE_FPS_PLAYER::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.C_INSTANTIATE_FPS_PLAYER.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_INSTANTIATE_FPS_PLAYER::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* C_INSTANTIATE_FPS_PLAYER::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.C_INSTANTIATE_FPS_PLAYER.position)
  return _msg;
}
inline void C_INSTANTIATE_FPS_PLAYER::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_INSTANTIATE_FPS_PLAYER.position)
}

// .Protocol.Vector3 rotation = 2;
inline bool C_INSTANTIATE_FPS_PLAYER::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool C_INSTANTIATE_FPS_PLAYER::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::Vector3& C_INSTANTIATE_FPS_PLAYER::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_INSTANTIATE_FPS_PLAYER::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INSTANTIATE_FPS_PLAYER.rotation)
  return _internal_rotation();
}
inline void C_INSTANTIATE_FPS_PLAYER::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_INSTANTIATE_FPS_PLAYER.rotation)
}
inline ::Protocol::Vector3* C_INSTANTIATE_FPS_PLAYER::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_INSTANTIATE_FPS_PLAYER::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.C_INSTANTIATE_FPS_PLAYER.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_INSTANTIATE_FPS_PLAYER::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* C_INSTANTIATE_FPS_PLAYER::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.C_INSTANTIATE_FPS_PLAYER.rotation)
  return _msg;
}
inline void C_INSTANTIATE_FPS_PLAYER::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_INSTANTIATE_FPS_PLAYER.rotation)
}

// -------------------------------------------------------------------

// S_ADD_FPS_PLAYER_GameObjectInfo

// int32 playerId = 1;
inline void S_ADD_FPS_PLAYER_GameObjectInfo::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t S_ADD_FPS_PLAYER_GameObjectInfo::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t S_ADD_FPS_PLAYER_GameObjectInfo::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.playerId)
  return _internal_playerid();
}
inline void S_ADD_FPS_PLAYER_GameObjectInfo::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_ADD_FPS_PLAYER_GameObjectInfo::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.playerId)
}

// string ownerId = 2;
inline void S_ADD_FPS_PLAYER_GameObjectInfo::clear_ownerid() {
  _impl_.ownerid_.ClearToEmpty();
}
inline const std::string& S_ADD_FPS_PLAYER_GameObjectInfo::ownerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.ownerId)
  return _internal_ownerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ADD_FPS_PLAYER_GameObjectInfo::set_ownerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ownerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.ownerId)
}
inline std::string* S_ADD_FPS_PLAYER_GameObjectInfo::mutable_ownerid() {
  std::string* _s = _internal_mutable_ownerid();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.ownerId)
  return _s;
}
inline const std::string& S_ADD_FPS_PLAYER_GameObjectInfo::_internal_ownerid() const {
  return _impl_.ownerid_.Get();
}
inline void S_ADD_FPS_PLAYER_GameObjectInfo::_internal_set_ownerid(const std::string& value) {
  
  _impl_.ownerid_.Set(value, GetArenaForAllocation());
}
inline std::string* S_ADD_FPS_PLAYER_GameObjectInfo::_internal_mutable_ownerid() {
  
  return _impl_.ownerid_.Mutable(GetArenaForAllocation());
}
inline std::string* S_ADD_FPS_PLAYER_GameObjectInfo::release_ownerid() {
  // @@protoc_insertion_point(field_release:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.ownerId)
  return _impl_.ownerid_.Release();
}
inline void S_ADD_FPS_PLAYER_GameObjectInfo::set_allocated_ownerid(std::string* ownerid) {
  if (ownerid != nullptr) {
    
  } else {
    
  }
  _impl_.ownerid_.SetAllocated(ownerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ownerid_.IsDefault()) {
    _impl_.ownerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.ownerId)
}

// int32 hp = 3;
inline void S_ADD_FPS_PLAYER_GameObjectInfo::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t S_ADD_FPS_PLAYER_GameObjectInfo::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t S_ADD_FPS_PLAYER_GameObjectInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.hp)
  return _internal_hp();
}
inline void S_ADD_FPS_PLAYER_GameObjectInfo::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void S_ADD_FPS_PLAYER_GameObjectInfo::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.hp)
}

// .Protocol.Vector3 position = 4;
inline bool S_ADD_FPS_PLAYER_GameObjectInfo::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_ADD_FPS_PLAYER_GameObjectInfo::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& S_ADD_FPS_PLAYER_GameObjectInfo::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_ADD_FPS_PLAYER_GameObjectInfo::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.position)
  return _internal_position();
}
inline void S_ADD_FPS_PLAYER_GameObjectInfo::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.position)
}
inline ::Protocol::Vector3* S_ADD_FPS_PLAYER_GameObjectInfo::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_ADD_FPS_PLAYER_GameObjectInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_ADD_FPS_PLAYER_GameObjectInfo::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* S_ADD_FPS_PLAYER_GameObjectInfo::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.position)
  return _msg;
}
inline void S_ADD_FPS_PLAYER_GameObjectInfo::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.position)
}

// .Protocol.Vector3 velocity = 5;
inline bool S_ADD_FPS_PLAYER_GameObjectInfo::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool S_ADD_FPS_PLAYER_GameObjectInfo::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::Protocol::Vector3& S_ADD_FPS_PLAYER_GameObjectInfo::_internal_velocity() const {
  const ::Protocol::Vector3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_ADD_FPS_PLAYER_GameObjectInfo::velocity() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.velocity)
  return _internal_velocity();
}
inline void S_ADD_FPS_PLAYER_GameObjectInfo::unsafe_arena_set_allocated_velocity(
    ::Protocol::Vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.velocity)
}
inline ::Protocol::Vector3* S_ADD_FPS_PLAYER_GameObjectInfo::release_velocity() {
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_ADD_FPS_PLAYER_GameObjectInfo::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.velocity)
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_ADD_FPS_PLAYER_GameObjectInfo::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::Protocol::Vector3* S_ADD_FPS_PLAYER_GameObjectInfo::mutable_velocity() {
  ::Protocol::Vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.velocity)
  return _msg;
}
inline void S_ADD_FPS_PLAYER_GameObjectInfo::set_allocated_velocity(::Protocol::Vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.velocity)
}

// .Protocol.Vector3 rotation = 6;
inline bool S_ADD_FPS_PLAYER_GameObjectInfo::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S_ADD_FPS_PLAYER_GameObjectInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::Vector3& S_ADD_FPS_PLAYER_GameObjectInfo::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_ADD_FPS_PLAYER_GameObjectInfo::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.rotation)
  return _internal_rotation();
}
inline void S_ADD_FPS_PLAYER_GameObjectInfo::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.rotation)
}
inline ::Protocol::Vector3* S_ADD_FPS_PLAYER_GameObjectInfo::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_ADD_FPS_PLAYER_GameObjectInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_ADD_FPS_PLAYER_GameObjectInfo::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* S_ADD_FPS_PLAYER_GameObjectInfo::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.rotation)
  return _msg;
}
inline void S_ADD_FPS_PLAYER_GameObjectInfo::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.rotation)
}

// -------------------------------------------------------------------

// S_ADD_FPS_PLAYER

// repeated .Protocol.S_ADD_FPS_PLAYER.GameObjectInfo gameObjects = 1;
inline int S_ADD_FPS_PLAYER::_internal_gameobjects_size() const {
  return _impl_.gameobjects_.size();
}
inline int S_ADD_FPS_PLAYER::gameobjects_size() const {
  return _internal_gameobjects_size();
}
inline void S_ADD_FPS_PLAYER::clear_gameobjects() {
  _impl_.gameobjects_.Clear();
}
inline ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo* S_ADD_FPS_PLAYER::mutable_gameobjects(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_FPS_PLAYER.gameObjects)
  return _impl_.gameobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo >*
S_ADD_FPS_PLAYER::mutable_gameobjects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ADD_FPS_PLAYER.gameObjects)
  return &_impl_.gameobjects_;
}
inline const ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo& S_ADD_FPS_PLAYER::_internal_gameobjects(int index) const {
  return _impl_.gameobjects_.Get(index);
}
inline const ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo& S_ADD_FPS_PLAYER::gameobjects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_FPS_PLAYER.gameObjects)
  return _internal_gameobjects(index);
}
inline ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo* S_ADD_FPS_PLAYER::_internal_add_gameobjects() {
  return _impl_.gameobjects_.Add();
}
inline ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo* S_ADD_FPS_PLAYER::add_gameobjects() {
  ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo* _add = _internal_add_gameobjects();
  // @@protoc_insertion_point(field_add:Protocol.S_ADD_FPS_PLAYER.gameObjects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo >&
S_ADD_FPS_PLAYER::gameobjects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ADD_FPS_PLAYER.gameObjects)
  return _impl_.gameobjects_;
}

// -------------------------------------------------------------------

// C_SET_FPS_POSITION

// int64 timestamp = 1;
inline void C_SET_FPS_POSITION::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C_SET_FPS_POSITION::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C_SET_FPS_POSITION::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_FPS_POSITION.timestamp)
  return _internal_timestamp();
}
inline void C_SET_FPS_POSITION::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C_SET_FPS_POSITION::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SET_FPS_POSITION.timestamp)
}

// int32 playerId = 2;
inline void C_SET_FPS_POSITION::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t C_SET_FPS_POSITION::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t C_SET_FPS_POSITION::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_FPS_POSITION.playerId)
  return _internal_playerid();
}
inline void C_SET_FPS_POSITION::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_SET_FPS_POSITION::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SET_FPS_POSITION.playerId)
}

// .Protocol.Vector3 position = 3;
inline bool C_SET_FPS_POSITION::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_SET_FPS_POSITION::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& C_SET_FPS_POSITION::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_SET_FPS_POSITION::position() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_FPS_POSITION.position)
  return _internal_position();
}
inline void C_SET_FPS_POSITION::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SET_FPS_POSITION.position)
}
inline ::Protocol::Vector3* C_SET_FPS_POSITION::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_SET_FPS_POSITION::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.C_SET_FPS_POSITION.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_SET_FPS_POSITION::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* C_SET_FPS_POSITION::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SET_FPS_POSITION.position)
  return _msg;
}
inline void C_SET_FPS_POSITION::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SET_FPS_POSITION.position)
}

// .Protocol.Vector3 velocity = 4;
inline bool C_SET_FPS_POSITION::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool C_SET_FPS_POSITION::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::Protocol::Vector3& C_SET_FPS_POSITION::_internal_velocity() const {
  const ::Protocol::Vector3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_SET_FPS_POSITION::velocity() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_FPS_POSITION.velocity)
  return _internal_velocity();
}
inline void C_SET_FPS_POSITION::unsafe_arena_set_allocated_velocity(
    ::Protocol::Vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SET_FPS_POSITION.velocity)
}
inline ::Protocol::Vector3* C_SET_FPS_POSITION::release_velocity() {
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_SET_FPS_POSITION::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:Protocol.C_SET_FPS_POSITION.velocity)
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_SET_FPS_POSITION::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::Protocol::Vector3* C_SET_FPS_POSITION::mutable_velocity() {
  ::Protocol::Vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SET_FPS_POSITION.velocity)
  return _msg;
}
inline void C_SET_FPS_POSITION::set_allocated_velocity(::Protocol::Vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SET_FPS_POSITION.velocity)
}

// -------------------------------------------------------------------

// S_SET_FPS_POSITION

// int64 timestamp = 1;
inline void S_SET_FPS_POSITION::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S_SET_FPS_POSITION::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S_SET_FPS_POSITION::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_FPS_POSITION.timestamp)
  return _internal_timestamp();
}
inline void S_SET_FPS_POSITION::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S_SET_FPS_POSITION::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SET_FPS_POSITION.timestamp)
}

// int32 playerId = 2;
inline void S_SET_FPS_POSITION::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t S_SET_FPS_POSITION::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t S_SET_FPS_POSITION::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_FPS_POSITION.playerId)
  return _internal_playerid();
}
inline void S_SET_FPS_POSITION::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_SET_FPS_POSITION::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SET_FPS_POSITION.playerId)
}

// .Protocol.Vector3 position = 3;
inline bool S_SET_FPS_POSITION::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_SET_FPS_POSITION::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& S_SET_FPS_POSITION::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_SET_FPS_POSITION::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_FPS_POSITION.position)
  return _internal_position();
}
inline void S_SET_FPS_POSITION::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SET_FPS_POSITION.position)
}
inline ::Protocol::Vector3* S_SET_FPS_POSITION::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_SET_FPS_POSITION::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_SET_FPS_POSITION.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_SET_FPS_POSITION::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* S_SET_FPS_POSITION::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SET_FPS_POSITION.position)
  return _msg;
}
inline void S_SET_FPS_POSITION::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SET_FPS_POSITION.position)
}

// .Protocol.Vector3 velocity = 4;
inline bool S_SET_FPS_POSITION::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool S_SET_FPS_POSITION::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::Protocol::Vector3& S_SET_FPS_POSITION::_internal_velocity() const {
  const ::Protocol::Vector3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_SET_FPS_POSITION::velocity() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_FPS_POSITION.velocity)
  return _internal_velocity();
}
inline void S_SET_FPS_POSITION::unsafe_arena_set_allocated_velocity(
    ::Protocol::Vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SET_FPS_POSITION.velocity)
}
inline ::Protocol::Vector3* S_SET_FPS_POSITION::release_velocity() {
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_SET_FPS_POSITION::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:Protocol.S_SET_FPS_POSITION.velocity)
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_SET_FPS_POSITION::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::Protocol::Vector3* S_SET_FPS_POSITION::mutable_velocity() {
  ::Protocol::Vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SET_FPS_POSITION.velocity)
  return _msg;
}
inline void S_SET_FPS_POSITION::set_allocated_velocity(::Protocol::Vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SET_FPS_POSITION.velocity)
}

// -------------------------------------------------------------------

// C_SET_FPS_ROTATION

// int32 playerId = 1;
inline void C_SET_FPS_ROTATION::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t C_SET_FPS_ROTATION::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t C_SET_FPS_ROTATION::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_FPS_ROTATION.playerId)
  return _internal_playerid();
}
inline void C_SET_FPS_ROTATION::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void C_SET_FPS_ROTATION::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SET_FPS_ROTATION.playerId)
}

// .Protocol.Vector3 rotation = 2;
inline bool C_SET_FPS_ROTATION::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool C_SET_FPS_ROTATION::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::Vector3& C_SET_FPS_ROTATION::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_SET_FPS_ROTATION::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_FPS_ROTATION.rotation)
  return _internal_rotation();
}
inline void C_SET_FPS_ROTATION::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SET_FPS_ROTATION.rotation)
}
inline ::Protocol::Vector3* C_SET_FPS_ROTATION::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_SET_FPS_ROTATION::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.C_SET_FPS_ROTATION.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_SET_FPS_ROTATION::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* C_SET_FPS_ROTATION::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SET_FPS_ROTATION.rotation)
  return _msg;
}
inline void C_SET_FPS_ROTATION::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SET_FPS_ROTATION.rotation)
}

// -------------------------------------------------------------------

// S_SET_FPS_ROTATION

// int32 playerId = 1;
inline void S_SET_FPS_ROTATION::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t S_SET_FPS_ROTATION::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t S_SET_FPS_ROTATION::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_FPS_ROTATION.playerId)
  return _internal_playerid();
}
inline void S_SET_FPS_ROTATION::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_SET_FPS_ROTATION::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SET_FPS_ROTATION.playerId)
}

// .Protocol.Vector3 rotation = 2;
inline bool S_SET_FPS_ROTATION::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S_SET_FPS_ROTATION::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Protocol::Vector3& S_SET_FPS_ROTATION::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_SET_FPS_ROTATION::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_FPS_ROTATION.rotation)
  return _internal_rotation();
}
inline void S_SET_FPS_ROTATION::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SET_FPS_ROTATION.rotation)
}
inline ::Protocol::Vector3* S_SET_FPS_ROTATION::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_SET_FPS_ROTATION::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S_SET_FPS_ROTATION.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_SET_FPS_ROTATION::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* S_SET_FPS_ROTATION::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SET_FPS_ROTATION.rotation)
  return _msg;
}
inline void S_SET_FPS_ROTATION::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SET_FPS_ROTATION.rotation)
}

// -------------------------------------------------------------------

// C_SHOT

// .Protocol.Vector3 position = 1;
inline bool C_SHOT::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_SHOT::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& C_SHOT::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_SHOT::position() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SHOT.position)
  return _internal_position();
}
inline void C_SHOT::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SHOT.position)
}
inline ::Protocol::Vector3* C_SHOT::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_SHOT::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.C_SHOT.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_SHOT::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* C_SHOT::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SHOT.position)
  return _msg;
}
inline void C_SHOT::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SHOT.position)
}

// .Protocol.Vector3 direction = 2;
inline bool C_SHOT::_internal_has_direction() const {
  return this != internal_default_instance() && _impl_.direction_ != nullptr;
}
inline bool C_SHOT::has_direction() const {
  return _internal_has_direction();
}
inline const ::Protocol::Vector3& C_SHOT::_internal_direction() const {
  const ::Protocol::Vector3* p = _impl_.direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_SHOT::direction() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SHOT.direction)
  return _internal_direction();
}
inline void C_SHOT::unsafe_arena_set_allocated_direction(
    ::Protocol::Vector3* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.direction_);
  }
  _impl_.direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SHOT.direction)
}
inline ::Protocol::Vector3* C_SHOT::release_direction() {
  
  ::Protocol::Vector3* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_SHOT::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:Protocol.C_SHOT.direction)
  
  ::Protocol::Vector3* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_SHOT::_internal_mutable_direction() {
  
  if (_impl_.direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.direction_ = p;
  }
  return _impl_.direction_;
}
inline ::Protocol::Vector3* C_SHOT::mutable_direction() {
  ::Protocol::Vector3* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SHOT.direction)
  return _msg;
}
inline void C_SHOT::set_allocated_direction(::Protocol::Vector3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.direction_);
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction));
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SHOT.direction)
}

// -------------------------------------------------------------------

// S_ATTACKED

// int32 playerid = 1;
inline void S_ATTACKED::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t S_ATTACKED::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t S_ATTACKED::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACKED.playerid)
  return _internal_playerid();
}
inline void S_ATTACKED::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_ATTACKED::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ATTACKED.playerid)
}

// int32 damage = 2;
inline void S_ATTACKED::clear_damage() {
  _impl_.damage_ = 0;
}
inline int32_t S_ATTACKED::_internal_damage() const {
  return _impl_.damage_;
}
inline int32_t S_ATTACKED::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ATTACKED.damage)
  return _internal_damage();
}
inline void S_ATTACKED::_internal_set_damage(int32_t value) {
  
  _impl_.damage_ = value;
}
inline void S_ATTACKED::set_damage(int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ATTACKED.damage)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_5f002_5fFPS_2eproto
