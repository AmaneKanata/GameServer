// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_001_GameObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_5f001_5fGameObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_5f001_5fGameObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_5f001_5fGameObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_5f001_5fGameObject_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_5f001_5fGameObject_2eproto;
namespace Protocol {
class AnimationParameter;
struct AnimationParameterDefaultTypeInternal;
extern AnimationParameterDefaultTypeInternal _AnimationParameter_default_instance_;
class C_DESTORY_GAME_OBJECT;
struct C_DESTORY_GAME_OBJECTDefaultTypeInternal;
extern C_DESTORY_GAME_OBJECTDefaultTypeInternal _C_DESTORY_GAME_OBJECT_default_instance_;
class C_GET_GAME_OBJECT;
struct C_GET_GAME_OBJECTDefaultTypeInternal;
extern C_GET_GAME_OBJECTDefaultTypeInternal _C_GET_GAME_OBJECT_default_instance_;
class C_INSTANTIATE_GAME_OBJECT;
struct C_INSTANTIATE_GAME_OBJECTDefaultTypeInternal;
extern C_INSTANTIATE_GAME_OBJECTDefaultTypeInternal _C_INSTANTIATE_GAME_OBJECT_default_instance_;
class C_SET_ANIMATION;
struct C_SET_ANIMATIONDefaultTypeInternal;
extern C_SET_ANIMATIONDefaultTypeInternal _C_SET_ANIMATION_default_instance_;
class C_SET_ANIMATION_ParamsEntry_DoNotUse;
struct C_SET_ANIMATION_ParamsEntry_DoNotUseDefaultTypeInternal;
extern C_SET_ANIMATION_ParamsEntry_DoNotUseDefaultTypeInternal _C_SET_ANIMATION_ParamsEntry_DoNotUse_default_instance_;
class C_SET_GAME_OBJECT_OWNER;
struct C_SET_GAME_OBJECT_OWNERDefaultTypeInternal;
extern C_SET_GAME_OBJECT_OWNERDefaultTypeInternal _C_SET_GAME_OBJECT_OWNER_default_instance_;
class C_SET_GAME_OBJECT_PREFAB;
struct C_SET_GAME_OBJECT_PREFABDefaultTypeInternal;
extern C_SET_GAME_OBJECT_PREFABDefaultTypeInternal _C_SET_GAME_OBJECT_PREFAB_default_instance_;
class C_SET_TRANSFORM;
struct C_SET_TRANSFORMDefaultTypeInternal;
extern C_SET_TRANSFORMDefaultTypeInternal _C_SET_TRANSFORM_default_instance_;
class S_ADD_GAME_OBJECT;
struct S_ADD_GAME_OBJECTDefaultTypeInternal;
extern S_ADD_GAME_OBJECTDefaultTypeInternal _S_ADD_GAME_OBJECT_default_instance_;
class S_ADD_GAME_OBJECT_GameObjectInfo;
struct S_ADD_GAME_OBJECT_GameObjectInfoDefaultTypeInternal;
extern S_ADD_GAME_OBJECT_GameObjectInfoDefaultTypeInternal _S_ADD_GAME_OBJECT_GameObjectInfo_default_instance_;
class S_DESTORY_GAME_OBJECT;
struct S_DESTORY_GAME_OBJECTDefaultTypeInternal;
extern S_DESTORY_GAME_OBJECTDefaultTypeInternal _S_DESTORY_GAME_OBJECT_default_instance_;
class S_INSTANTIATE_GAME_OBJECT;
struct S_INSTANTIATE_GAME_OBJECTDefaultTypeInternal;
extern S_INSTANTIATE_GAME_OBJECTDefaultTypeInternal _S_INSTANTIATE_GAME_OBJECT_default_instance_;
class S_REMOVE_GAME_OBJECT;
struct S_REMOVE_GAME_OBJECTDefaultTypeInternal;
extern S_REMOVE_GAME_OBJECTDefaultTypeInternal _S_REMOVE_GAME_OBJECT_default_instance_;
class S_SET_ANIMATION;
struct S_SET_ANIMATIONDefaultTypeInternal;
extern S_SET_ANIMATIONDefaultTypeInternal _S_SET_ANIMATION_default_instance_;
class S_SET_ANIMATION_ParamsEntry_DoNotUse;
struct S_SET_ANIMATION_ParamsEntry_DoNotUseDefaultTypeInternal;
extern S_SET_ANIMATION_ParamsEntry_DoNotUseDefaultTypeInternal _S_SET_ANIMATION_ParamsEntry_DoNotUse_default_instance_;
class S_SET_GAME_OBJECT_OWNER;
struct S_SET_GAME_OBJECT_OWNERDefaultTypeInternal;
extern S_SET_GAME_OBJECT_OWNERDefaultTypeInternal _S_SET_GAME_OBJECT_OWNER_default_instance_;
class S_SET_GAME_OBJECT_PREFAB;
struct S_SET_GAME_OBJECT_PREFABDefaultTypeInternal;
extern S_SET_GAME_OBJECT_PREFABDefaultTypeInternal _S_SET_GAME_OBJECT_PREFAB_default_instance_;
class S_SET_TRANSFORM;
struct S_SET_TRANSFORMDefaultTypeInternal;
extern S_SET_TRANSFORMDefaultTypeInternal _S_SET_TRANSFORM_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::AnimationParameter* Arena::CreateMaybeMessage<::Protocol::AnimationParameter>(Arena*);
template<> ::Protocol::C_DESTORY_GAME_OBJECT* Arena::CreateMaybeMessage<::Protocol::C_DESTORY_GAME_OBJECT>(Arena*);
template<> ::Protocol::C_GET_GAME_OBJECT* Arena::CreateMaybeMessage<::Protocol::C_GET_GAME_OBJECT>(Arena*);
template<> ::Protocol::C_INSTANTIATE_GAME_OBJECT* Arena::CreateMaybeMessage<::Protocol::C_INSTANTIATE_GAME_OBJECT>(Arena*);
template<> ::Protocol::C_SET_ANIMATION* Arena::CreateMaybeMessage<::Protocol::C_SET_ANIMATION>(Arena*);
template<> ::Protocol::C_SET_ANIMATION_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::Protocol::C_SET_ANIMATION_ParamsEntry_DoNotUse>(Arena*);
template<> ::Protocol::C_SET_GAME_OBJECT_OWNER* Arena::CreateMaybeMessage<::Protocol::C_SET_GAME_OBJECT_OWNER>(Arena*);
template<> ::Protocol::C_SET_GAME_OBJECT_PREFAB* Arena::CreateMaybeMessage<::Protocol::C_SET_GAME_OBJECT_PREFAB>(Arena*);
template<> ::Protocol::C_SET_TRANSFORM* Arena::CreateMaybeMessage<::Protocol::C_SET_TRANSFORM>(Arena*);
template<> ::Protocol::S_ADD_GAME_OBJECT* Arena::CreateMaybeMessage<::Protocol::S_ADD_GAME_OBJECT>(Arena*);
template<> ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* Arena::CreateMaybeMessage<::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo>(Arena*);
template<> ::Protocol::S_DESTORY_GAME_OBJECT* Arena::CreateMaybeMessage<::Protocol::S_DESTORY_GAME_OBJECT>(Arena*);
template<> ::Protocol::S_INSTANTIATE_GAME_OBJECT* Arena::CreateMaybeMessage<::Protocol::S_INSTANTIATE_GAME_OBJECT>(Arena*);
template<> ::Protocol::S_REMOVE_GAME_OBJECT* Arena::CreateMaybeMessage<::Protocol::S_REMOVE_GAME_OBJECT>(Arena*);
template<> ::Protocol::S_SET_ANIMATION* Arena::CreateMaybeMessage<::Protocol::S_SET_ANIMATION>(Arena*);
template<> ::Protocol::S_SET_ANIMATION_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::Protocol::S_SET_ANIMATION_ParamsEntry_DoNotUse>(Arena*);
template<> ::Protocol::S_SET_GAME_OBJECT_OWNER* Arena::CreateMaybeMessage<::Protocol::S_SET_GAME_OBJECT_OWNER>(Arena*);
template<> ::Protocol::S_SET_GAME_OBJECT_PREFAB* Arena::CreateMaybeMessage<::Protocol::S_SET_GAME_OBJECT_PREFAB>(Arena*);
template<> ::Protocol::S_SET_TRANSFORM* Arena::CreateMaybeMessage<::Protocol::S_SET_TRANSFORM>(Arena*);
template<> ::Protocol::Vector3* Arena::CreateMaybeMessage<::Protocol::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class AnimationParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.AnimationParameter) */ {
 public:
  inline AnimationParameter() : AnimationParameter(nullptr) {}
  ~AnimationParameter() override;
  explicit PROTOBUF_CONSTEXPR AnimationParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnimationParameter(const AnimationParameter& from);
  AnimationParameter(AnimationParameter&& from) noexcept
    : AnimationParameter() {
    *this = ::std::move(from);
  }

  inline AnimationParameter& operator=(const AnimationParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnimationParameter& operator=(AnimationParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnimationParameter& default_instance() {
    return *internal_default_instance();
  }
  enum ParamCase {
    kBoolParam = 1,
    kIntParam = 2,
    kFloatParam = 3,
    PARAM_NOT_SET = 0,
  };

  static inline const AnimationParameter* internal_default_instance() {
    return reinterpret_cast<const AnimationParameter*>(
               &_AnimationParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AnimationParameter& a, AnimationParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(AnimationParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnimationParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnimationParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnimationParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnimationParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AnimationParameter& from) {
    AnimationParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnimationParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.AnimationParameter";
  }
  protected:
  explicit AnimationParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolParamFieldNumber = 1,
    kIntParamFieldNumber = 2,
    kFloatParamFieldNumber = 3,
  };
  // bool bool_param = 1;
  bool has_bool_param() const;
  private:
  bool _internal_has_bool_param() const;
  public:
  void clear_bool_param();
  bool bool_param() const;
  void set_bool_param(bool value);
  private:
  bool _internal_bool_param() const;
  void _internal_set_bool_param(bool value);
  public:

  // int32 int_param = 2;
  bool has_int_param() const;
  private:
  bool _internal_has_int_param() const;
  public:
  void clear_int_param();
  int32_t int_param() const;
  void set_int_param(int32_t value);
  private:
  int32_t _internal_int_param() const;
  void _internal_set_int_param(int32_t value);
  public:

  // float float_param = 3;
  bool has_float_param() const;
  private:
  bool _internal_has_float_param() const;
  public:
  void clear_float_param();
  float float_param() const;
  void set_float_param(float value);
  private:
  float _internal_float_param() const;
  void _internal_set_float_param(float value);
  public:

  void clear_param();
  ParamCase param_case() const;
  // @@protoc_insertion_point(class_scope:Protocol.AnimationParameter)
 private:
  class _Internal;
  void set_has_bool_param();
  void set_has_int_param();
  void set_has_float_param();

  inline bool has_param() const;
  inline void clear_has_param();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ParamUnion {
      constexpr ParamUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      bool bool_param_;
      int32_t int_param_;
      float float_param_;
    } param_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class C_INSTANTIATE_GAME_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_INSTANTIATE_GAME_OBJECT) */ {
 public:
  inline C_INSTANTIATE_GAME_OBJECT() : C_INSTANTIATE_GAME_OBJECT(nullptr) {}
  ~C_INSTANTIATE_GAME_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR C_INSTANTIATE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_INSTANTIATE_GAME_OBJECT(const C_INSTANTIATE_GAME_OBJECT& from);
  C_INSTANTIATE_GAME_OBJECT(C_INSTANTIATE_GAME_OBJECT&& from) noexcept
    : C_INSTANTIATE_GAME_OBJECT() {
    *this = ::std::move(from);
  }

  inline C_INSTANTIATE_GAME_OBJECT& operator=(const C_INSTANTIATE_GAME_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_INSTANTIATE_GAME_OBJECT& operator=(C_INSTANTIATE_GAME_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_INSTANTIATE_GAME_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_INSTANTIATE_GAME_OBJECT* internal_default_instance() {
    return reinterpret_cast<const C_INSTANTIATE_GAME_OBJECT*>(
               &_C_INSTANTIATE_GAME_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_INSTANTIATE_GAME_OBJECT& a, C_INSTANTIATE_GAME_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_INSTANTIATE_GAME_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_INSTANTIATE_GAME_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_INSTANTIATE_GAME_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_INSTANTIATE_GAME_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_INSTANTIATE_GAME_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_INSTANTIATE_GAME_OBJECT& from) {
    C_INSTANTIATE_GAME_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_INSTANTIATE_GAME_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_INSTANTIATE_GAME_OBJECT";
  }
  protected:
  explicit C_INSTANTIATE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefabNameFieldNumber = 2,
    kPositionFieldNumber = 3,
    kRotationFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // string prefabName = 2;
  void clear_prefabname();
  const std::string& prefabname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefabname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefabname();
  PROTOBUF_NODISCARD std::string* release_prefabname();
  void set_allocated_prefabname(std::string* prefabname);
  private:
  const std::string& _internal_prefabname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefabname(const std::string& value);
  std::string* _internal_mutable_prefabname();
  public:

  // .Protocol.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_INSTANTIATE_GAME_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefabname_;
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* rotation_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_INSTANTIATE_GAME_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_INSTANTIATE_GAME_OBJECT) */ {
 public:
  inline S_INSTANTIATE_GAME_OBJECT() : S_INSTANTIATE_GAME_OBJECT(nullptr) {}
  ~S_INSTANTIATE_GAME_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR S_INSTANTIATE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_INSTANTIATE_GAME_OBJECT(const S_INSTANTIATE_GAME_OBJECT& from);
  S_INSTANTIATE_GAME_OBJECT(S_INSTANTIATE_GAME_OBJECT&& from) noexcept
    : S_INSTANTIATE_GAME_OBJECT() {
    *this = ::std::move(from);
  }

  inline S_INSTANTIATE_GAME_OBJECT& operator=(const S_INSTANTIATE_GAME_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_INSTANTIATE_GAME_OBJECT& operator=(S_INSTANTIATE_GAME_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_INSTANTIATE_GAME_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_INSTANTIATE_GAME_OBJECT* internal_default_instance() {
    return reinterpret_cast<const S_INSTANTIATE_GAME_OBJECT*>(
               &_S_INSTANTIATE_GAME_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_INSTANTIATE_GAME_OBJECT& a, S_INSTANTIATE_GAME_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_INSTANTIATE_GAME_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_INSTANTIATE_GAME_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_INSTANTIATE_GAME_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_INSTANTIATE_GAME_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_INSTANTIATE_GAME_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_INSTANTIATE_GAME_OBJECT& from) {
    S_INSTANTIATE_GAME_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_INSTANTIATE_GAME_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_INSTANTIATE_GAME_OBJECT";
  }
  protected:
  explicit S_INSTANTIATE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kGameObjectIdFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 gameObjectId = 2;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_INSTANTIATE_GAME_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class C_GET_GAME_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_GET_GAME_OBJECT) */ {
 public:
  inline C_GET_GAME_OBJECT() : C_GET_GAME_OBJECT(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_GET_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_GET_GAME_OBJECT(const C_GET_GAME_OBJECT& from);
  C_GET_GAME_OBJECT(C_GET_GAME_OBJECT&& from) noexcept
    : C_GET_GAME_OBJECT() {
    *this = ::std::move(from);
  }

  inline C_GET_GAME_OBJECT& operator=(const C_GET_GAME_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_GET_GAME_OBJECT& operator=(C_GET_GAME_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_GET_GAME_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_GET_GAME_OBJECT* internal_default_instance() {
    return reinterpret_cast<const C_GET_GAME_OBJECT*>(
               &_C_GET_GAME_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_GET_GAME_OBJECT& a, C_GET_GAME_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_GET_GAME_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_GET_GAME_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_GET_GAME_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_GET_GAME_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_GET_GAME_OBJECT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_GET_GAME_OBJECT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_GET_GAME_OBJECT";
  }
  protected:
  explicit C_GET_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_GET_GAME_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_ADD_GAME_OBJECT_GameObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo) */ {
 public:
  inline S_ADD_GAME_OBJECT_GameObjectInfo() : S_ADD_GAME_OBJECT_GameObjectInfo(nullptr) {}
  ~S_ADD_GAME_OBJECT_GameObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR S_ADD_GAME_OBJECT_GameObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ADD_GAME_OBJECT_GameObjectInfo(const S_ADD_GAME_OBJECT_GameObjectInfo& from);
  S_ADD_GAME_OBJECT_GameObjectInfo(S_ADD_GAME_OBJECT_GameObjectInfo&& from) noexcept
    : S_ADD_GAME_OBJECT_GameObjectInfo() {
    *this = ::std::move(from);
  }

  inline S_ADD_GAME_OBJECT_GameObjectInfo& operator=(const S_ADD_GAME_OBJECT_GameObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ADD_GAME_OBJECT_GameObjectInfo& operator=(S_ADD_GAME_OBJECT_GameObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ADD_GAME_OBJECT_GameObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ADD_GAME_OBJECT_GameObjectInfo* internal_default_instance() {
    return reinterpret_cast<const S_ADD_GAME_OBJECT_GameObjectInfo*>(
               &_S_ADD_GAME_OBJECT_GameObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_ADD_GAME_OBJECT_GameObjectInfo& a, S_ADD_GAME_OBJECT_GameObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ADD_GAME_OBJECT_GameObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ADD_GAME_OBJECT_GameObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ADD_GAME_OBJECT_GameObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ADD_GAME_OBJECT_GameObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ADD_GAME_OBJECT_GameObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ADD_GAME_OBJECT_GameObjectInfo& from) {
    S_ADD_GAME_OBJECT_GameObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ADD_GAME_OBJECT_GameObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ADD_GAME_OBJECT.GameObjectInfo";
  }
  protected:
  explicit S_ADD_GAME_OBJECT_GameObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 2,
    kPrefabNameFieldNumber = 4,
    kPositionFieldNumber = 5,
    kRotationFieldNumber = 6,
    kGameObjectIdFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // string ownerId = 2;
  void clear_ownerid();
  const std::string& ownerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ownerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ownerid();
  PROTOBUF_NODISCARD std::string* release_ownerid();
  void set_allocated_ownerid(std::string* ownerid);
  private:
  const std::string& _internal_ownerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ownerid(const std::string& value);
  std::string* _internal_mutable_ownerid();
  public:

  // string prefabName = 4;
  void clear_prefabname();
  const std::string& prefabname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefabname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefabname();
  PROTOBUF_NODISCARD std::string* release_prefabname();
  void set_allocated_prefabname(std::string* prefabname);
  private:
  const std::string& _internal_prefabname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefabname(const std::string& value);
  std::string* _internal_mutable_prefabname();
  public:

  // .Protocol.Vector3 position = 5;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 rotation = 6;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // int32 gameObjectId = 1;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ownerid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefabname_;
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* rotation_;
    int32_t gameobjectid_;
    int32_t type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_ADD_GAME_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ADD_GAME_OBJECT) */ {
 public:
  inline S_ADD_GAME_OBJECT() : S_ADD_GAME_OBJECT(nullptr) {}
  ~S_ADD_GAME_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR S_ADD_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ADD_GAME_OBJECT(const S_ADD_GAME_OBJECT& from);
  S_ADD_GAME_OBJECT(S_ADD_GAME_OBJECT&& from) noexcept
    : S_ADD_GAME_OBJECT() {
    *this = ::std::move(from);
  }

  inline S_ADD_GAME_OBJECT& operator=(const S_ADD_GAME_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ADD_GAME_OBJECT& operator=(S_ADD_GAME_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ADD_GAME_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ADD_GAME_OBJECT* internal_default_instance() {
    return reinterpret_cast<const S_ADD_GAME_OBJECT*>(
               &_S_ADD_GAME_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_ADD_GAME_OBJECT& a, S_ADD_GAME_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ADD_GAME_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ADD_GAME_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ADD_GAME_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ADD_GAME_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ADD_GAME_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ADD_GAME_OBJECT& from) {
    S_ADD_GAME_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ADD_GAME_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ADD_GAME_OBJECT";
  }
  protected:
  explicit S_ADD_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef S_ADD_GAME_OBJECT_GameObjectInfo GameObjectInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kGameObjectsFieldNumber = 1,
  };
  // repeated .Protocol.S_ADD_GAME_OBJECT.GameObjectInfo gameObjects = 1;
  int gameobjects_size() const;
  private:
  int _internal_gameobjects_size() const;
  public:
  void clear_gameobjects();
  ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* mutable_gameobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo >*
      mutable_gameobjects();
  private:
  const ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo& _internal_gameobjects(int index) const;
  ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* _internal_add_gameobjects();
  public:
  const ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo& gameobjects(int index) const;
  ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* add_gameobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo >&
      gameobjects() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_ADD_GAME_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo > gameobjects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class C_DESTORY_GAME_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DESTORY_GAME_OBJECT) */ {
 public:
  inline C_DESTORY_GAME_OBJECT() : C_DESTORY_GAME_OBJECT(nullptr) {}
  ~C_DESTORY_GAME_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR C_DESTORY_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DESTORY_GAME_OBJECT(const C_DESTORY_GAME_OBJECT& from);
  C_DESTORY_GAME_OBJECT(C_DESTORY_GAME_OBJECT&& from) noexcept
    : C_DESTORY_GAME_OBJECT() {
    *this = ::std::move(from);
  }

  inline C_DESTORY_GAME_OBJECT& operator=(const C_DESTORY_GAME_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DESTORY_GAME_OBJECT& operator=(C_DESTORY_GAME_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DESTORY_GAME_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DESTORY_GAME_OBJECT* internal_default_instance() {
    return reinterpret_cast<const C_DESTORY_GAME_OBJECT*>(
               &_C_DESTORY_GAME_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_DESTORY_GAME_OBJECT& a, C_DESTORY_GAME_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DESTORY_GAME_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DESTORY_GAME_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_DESTORY_GAME_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_DESTORY_GAME_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_DESTORY_GAME_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_DESTORY_GAME_OBJECT& from) {
    C_DESTORY_GAME_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DESTORY_GAME_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DESTORY_GAME_OBJECT";
  }
  protected:
  explicit C_DESTORY_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameObjectIdFieldNumber = 1,
  };
  // int32 gameObjectId = 1;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DESTORY_GAME_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_DESTORY_GAME_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DESTORY_GAME_OBJECT) */ {
 public:
  inline S_DESTORY_GAME_OBJECT() : S_DESTORY_GAME_OBJECT(nullptr) {}
  ~S_DESTORY_GAME_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR S_DESTORY_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DESTORY_GAME_OBJECT(const S_DESTORY_GAME_OBJECT& from);
  S_DESTORY_GAME_OBJECT(S_DESTORY_GAME_OBJECT&& from) noexcept
    : S_DESTORY_GAME_OBJECT() {
    *this = ::std::move(from);
  }

  inline S_DESTORY_GAME_OBJECT& operator=(const S_DESTORY_GAME_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DESTORY_GAME_OBJECT& operator=(S_DESTORY_GAME_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DESTORY_GAME_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DESTORY_GAME_OBJECT* internal_default_instance() {
    return reinterpret_cast<const S_DESTORY_GAME_OBJECT*>(
               &_S_DESTORY_GAME_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_DESTORY_GAME_OBJECT& a, S_DESTORY_GAME_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DESTORY_GAME_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DESTORY_GAME_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DESTORY_GAME_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DESTORY_GAME_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DESTORY_GAME_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_DESTORY_GAME_OBJECT& from) {
    S_DESTORY_GAME_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DESTORY_GAME_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DESTORY_GAME_OBJECT";
  }
  protected:
  explicit S_DESTORY_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kGameObjectIdFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 gameObjectId = 2;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DESTORY_GAME_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_REMOVE_GAME_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_REMOVE_GAME_OBJECT) */ {
 public:
  inline S_REMOVE_GAME_OBJECT() : S_REMOVE_GAME_OBJECT(nullptr) {}
  ~S_REMOVE_GAME_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR S_REMOVE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_REMOVE_GAME_OBJECT(const S_REMOVE_GAME_OBJECT& from);
  S_REMOVE_GAME_OBJECT(S_REMOVE_GAME_OBJECT&& from) noexcept
    : S_REMOVE_GAME_OBJECT() {
    *this = ::std::move(from);
  }

  inline S_REMOVE_GAME_OBJECT& operator=(const S_REMOVE_GAME_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_REMOVE_GAME_OBJECT& operator=(S_REMOVE_GAME_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_REMOVE_GAME_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_REMOVE_GAME_OBJECT* internal_default_instance() {
    return reinterpret_cast<const S_REMOVE_GAME_OBJECT*>(
               &_S_REMOVE_GAME_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_REMOVE_GAME_OBJECT& a, S_REMOVE_GAME_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_REMOVE_GAME_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_REMOVE_GAME_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_REMOVE_GAME_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_REMOVE_GAME_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_REMOVE_GAME_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_REMOVE_GAME_OBJECT& from) {
    S_REMOVE_GAME_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_REMOVE_GAME_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_REMOVE_GAME_OBJECT";
  }
  protected:
  explicit S_REMOVE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameObjectsFieldNumber = 1,
  };
  // repeated int32 gameObjects = 1;
  int gameobjects_size() const;
  private:
  int _internal_gameobjects_size() const;
  public:
  void clear_gameobjects();
  private:
  int32_t _internal_gameobjects(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_gameobjects() const;
  void _internal_add_gameobjects(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_gameobjects();
  public:
  int32_t gameobjects(int index) const;
  void set_gameobjects(int index, int32_t value);
  void add_gameobjects(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      gameobjects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_gameobjects();

  // @@protoc_insertion_point(class_scope:Protocol.S_REMOVE_GAME_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > gameobjects_;
    mutable std::atomic<int> _gameobjects_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class C_SET_GAME_OBJECT_PREFAB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SET_GAME_OBJECT_PREFAB) */ {
 public:
  inline C_SET_GAME_OBJECT_PREFAB() : C_SET_GAME_OBJECT_PREFAB(nullptr) {}
  ~C_SET_GAME_OBJECT_PREFAB() override;
  explicit PROTOBUF_CONSTEXPR C_SET_GAME_OBJECT_PREFAB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SET_GAME_OBJECT_PREFAB(const C_SET_GAME_OBJECT_PREFAB& from);
  C_SET_GAME_OBJECT_PREFAB(C_SET_GAME_OBJECT_PREFAB&& from) noexcept
    : C_SET_GAME_OBJECT_PREFAB() {
    *this = ::std::move(from);
  }

  inline C_SET_GAME_OBJECT_PREFAB& operator=(const C_SET_GAME_OBJECT_PREFAB& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SET_GAME_OBJECT_PREFAB& operator=(C_SET_GAME_OBJECT_PREFAB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SET_GAME_OBJECT_PREFAB& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SET_GAME_OBJECT_PREFAB* internal_default_instance() {
    return reinterpret_cast<const C_SET_GAME_OBJECT_PREFAB*>(
               &_C_SET_GAME_OBJECT_PREFAB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_SET_GAME_OBJECT_PREFAB& a, C_SET_GAME_OBJECT_PREFAB& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SET_GAME_OBJECT_PREFAB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SET_GAME_OBJECT_PREFAB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SET_GAME_OBJECT_PREFAB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SET_GAME_OBJECT_PREFAB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SET_GAME_OBJECT_PREFAB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SET_GAME_OBJECT_PREFAB& from) {
    C_SET_GAME_OBJECT_PREFAB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SET_GAME_OBJECT_PREFAB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SET_GAME_OBJECT_PREFAB";
  }
  protected:
  explicit C_SET_GAME_OBJECT_PREFAB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefabNameFieldNumber = 2,
    kGameObjectIdFieldNumber = 1,
  };
  // string prefabName = 2;
  void clear_prefabname();
  const std::string& prefabname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefabname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefabname();
  PROTOBUF_NODISCARD std::string* release_prefabname();
  void set_allocated_prefabname(std::string* prefabname);
  private:
  const std::string& _internal_prefabname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefabname(const std::string& value);
  std::string* _internal_mutable_prefabname();
  public:

  // int32 gameObjectId = 1;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SET_GAME_OBJECT_PREFAB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefabname_;
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_SET_GAME_OBJECT_PREFAB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SET_GAME_OBJECT_PREFAB) */ {
 public:
  inline S_SET_GAME_OBJECT_PREFAB() : S_SET_GAME_OBJECT_PREFAB(nullptr) {}
  ~S_SET_GAME_OBJECT_PREFAB() override;
  explicit PROTOBUF_CONSTEXPR S_SET_GAME_OBJECT_PREFAB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SET_GAME_OBJECT_PREFAB(const S_SET_GAME_OBJECT_PREFAB& from);
  S_SET_GAME_OBJECT_PREFAB(S_SET_GAME_OBJECT_PREFAB&& from) noexcept
    : S_SET_GAME_OBJECT_PREFAB() {
    *this = ::std::move(from);
  }

  inline S_SET_GAME_OBJECT_PREFAB& operator=(const S_SET_GAME_OBJECT_PREFAB& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SET_GAME_OBJECT_PREFAB& operator=(S_SET_GAME_OBJECT_PREFAB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SET_GAME_OBJECT_PREFAB& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SET_GAME_OBJECT_PREFAB* internal_default_instance() {
    return reinterpret_cast<const S_SET_GAME_OBJECT_PREFAB*>(
               &_S_SET_GAME_OBJECT_PREFAB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_SET_GAME_OBJECT_PREFAB& a, S_SET_GAME_OBJECT_PREFAB& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SET_GAME_OBJECT_PREFAB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SET_GAME_OBJECT_PREFAB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SET_GAME_OBJECT_PREFAB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SET_GAME_OBJECT_PREFAB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SET_GAME_OBJECT_PREFAB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SET_GAME_OBJECT_PREFAB& from) {
    S_SET_GAME_OBJECT_PREFAB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SET_GAME_OBJECT_PREFAB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SET_GAME_OBJECT_PREFAB";
  }
  protected:
  explicit S_SET_GAME_OBJECT_PREFAB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefabNameFieldNumber = 2,
    kGameObjectIdFieldNumber = 1,
  };
  // string prefabName = 2;
  void clear_prefabname();
  const std::string& prefabname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefabname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefabname();
  PROTOBUF_NODISCARD std::string* release_prefabname();
  void set_allocated_prefabname(std::string* prefabname);
  private:
  const std::string& _internal_prefabname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefabname(const std::string& value);
  std::string* _internal_mutable_prefabname();
  public:

  // int32 gameObjectId = 1;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SET_GAME_OBJECT_PREFAB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefabname_;
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class C_SET_GAME_OBJECT_OWNER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SET_GAME_OBJECT_OWNER) */ {
 public:
  inline C_SET_GAME_OBJECT_OWNER() : C_SET_GAME_OBJECT_OWNER(nullptr) {}
  ~C_SET_GAME_OBJECT_OWNER() override;
  explicit PROTOBUF_CONSTEXPR C_SET_GAME_OBJECT_OWNER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SET_GAME_OBJECT_OWNER(const C_SET_GAME_OBJECT_OWNER& from);
  C_SET_GAME_OBJECT_OWNER(C_SET_GAME_OBJECT_OWNER&& from) noexcept
    : C_SET_GAME_OBJECT_OWNER() {
    *this = ::std::move(from);
  }

  inline C_SET_GAME_OBJECT_OWNER& operator=(const C_SET_GAME_OBJECT_OWNER& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SET_GAME_OBJECT_OWNER& operator=(C_SET_GAME_OBJECT_OWNER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SET_GAME_OBJECT_OWNER& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SET_GAME_OBJECT_OWNER* internal_default_instance() {
    return reinterpret_cast<const C_SET_GAME_OBJECT_OWNER*>(
               &_C_SET_GAME_OBJECT_OWNER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_SET_GAME_OBJECT_OWNER& a, C_SET_GAME_OBJECT_OWNER& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SET_GAME_OBJECT_OWNER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SET_GAME_OBJECT_OWNER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SET_GAME_OBJECT_OWNER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SET_GAME_OBJECT_OWNER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SET_GAME_OBJECT_OWNER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SET_GAME_OBJECT_OWNER& from) {
    C_SET_GAME_OBJECT_OWNER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SET_GAME_OBJECT_OWNER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SET_GAME_OBJECT_OWNER";
  }
  protected:
  explicit C_SET_GAME_OBJECT_OWNER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameObjectIdFieldNumber = 1,
  };
  // int32 gameObjectId = 1;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SET_GAME_OBJECT_OWNER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_SET_GAME_OBJECT_OWNER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SET_GAME_OBJECT_OWNER) */ {
 public:
  inline S_SET_GAME_OBJECT_OWNER() : S_SET_GAME_OBJECT_OWNER(nullptr) {}
  ~S_SET_GAME_OBJECT_OWNER() override;
  explicit PROTOBUF_CONSTEXPR S_SET_GAME_OBJECT_OWNER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SET_GAME_OBJECT_OWNER(const S_SET_GAME_OBJECT_OWNER& from);
  S_SET_GAME_OBJECT_OWNER(S_SET_GAME_OBJECT_OWNER&& from) noexcept
    : S_SET_GAME_OBJECT_OWNER() {
    *this = ::std::move(from);
  }

  inline S_SET_GAME_OBJECT_OWNER& operator=(const S_SET_GAME_OBJECT_OWNER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SET_GAME_OBJECT_OWNER& operator=(S_SET_GAME_OBJECT_OWNER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SET_GAME_OBJECT_OWNER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SET_GAME_OBJECT_OWNER* internal_default_instance() {
    return reinterpret_cast<const S_SET_GAME_OBJECT_OWNER*>(
               &_S_SET_GAME_OBJECT_OWNER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_SET_GAME_OBJECT_OWNER& a, S_SET_GAME_OBJECT_OWNER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SET_GAME_OBJECT_OWNER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SET_GAME_OBJECT_OWNER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SET_GAME_OBJECT_OWNER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SET_GAME_OBJECT_OWNER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SET_GAME_OBJECT_OWNER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SET_GAME_OBJECT_OWNER& from) {
    S_SET_GAME_OBJECT_OWNER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SET_GAME_OBJECT_OWNER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SET_GAME_OBJECT_OWNER";
  }
  protected:
  explicit S_SET_GAME_OBJECT_OWNER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 2,
    kGameObjectIdFieldNumber = 1,
  };
  // string ownerId = 2;
  void clear_ownerid();
  const std::string& ownerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ownerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ownerid();
  PROTOBUF_NODISCARD std::string* release_ownerid();
  void set_allocated_ownerid(std::string* ownerid);
  private:
  const std::string& _internal_ownerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ownerid(const std::string& value);
  std::string* _internal_mutable_ownerid();
  public:

  // int32 gameObjectId = 1;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SET_GAME_OBJECT_OWNER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ownerid_;
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class C_SET_TRANSFORM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SET_TRANSFORM) */ {
 public:
  inline C_SET_TRANSFORM() : C_SET_TRANSFORM(nullptr) {}
  ~C_SET_TRANSFORM() override;
  explicit PROTOBUF_CONSTEXPR C_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SET_TRANSFORM(const C_SET_TRANSFORM& from);
  C_SET_TRANSFORM(C_SET_TRANSFORM&& from) noexcept
    : C_SET_TRANSFORM() {
    *this = ::std::move(from);
  }

  inline C_SET_TRANSFORM& operator=(const C_SET_TRANSFORM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SET_TRANSFORM& operator=(C_SET_TRANSFORM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SET_TRANSFORM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SET_TRANSFORM* internal_default_instance() {
    return reinterpret_cast<const C_SET_TRANSFORM*>(
               &_C_SET_TRANSFORM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_SET_TRANSFORM& a, C_SET_TRANSFORM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SET_TRANSFORM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SET_TRANSFORM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SET_TRANSFORM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SET_TRANSFORM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SET_TRANSFORM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SET_TRANSFORM& from) {
    C_SET_TRANSFORM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SET_TRANSFORM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SET_TRANSFORM";
  }
  protected:
  explicit C_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kRotationFieldNumber = 5,
    kAngularVelocityFieldNumber = 6,
    kTimestampFieldNumber = 1,
    kGameObjectIdFieldNumber = 2,
  };
  // .Protocol.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::Protocol::Vector3& velocity() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_velocity();
  ::Protocol::Vector3* mutable_velocity();
  void set_allocated_velocity(::Protocol::Vector3* velocity);
  private:
  const ::Protocol::Vector3& _internal_velocity() const;
  ::Protocol::Vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::Protocol::Vector3* velocity);
  ::Protocol::Vector3* unsafe_arena_release_velocity();

  // .Protocol.Vector3 rotation = 5;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // .Protocol.Vector3 angularVelocity = 6;
  bool has_angularvelocity() const;
  private:
  bool _internal_has_angularvelocity() const;
  public:
  void clear_angularvelocity();
  const ::Protocol::Vector3& angularvelocity() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_angularvelocity();
  ::Protocol::Vector3* mutable_angularvelocity();
  void set_allocated_angularvelocity(::Protocol::Vector3* angularvelocity);
  private:
  const ::Protocol::Vector3& _internal_angularvelocity() const;
  ::Protocol::Vector3* _internal_mutable_angularvelocity();
  public:
  void unsafe_arena_set_allocated_angularvelocity(
      ::Protocol::Vector3* angularvelocity);
  ::Protocol::Vector3* unsafe_arena_release_angularvelocity();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 gameObjectId = 2;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SET_TRANSFORM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* velocity_;
    ::Protocol::Vector3* rotation_;
    ::Protocol::Vector3* angularvelocity_;
    int64_t timestamp_;
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_SET_TRANSFORM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SET_TRANSFORM) */ {
 public:
  inline S_SET_TRANSFORM() : S_SET_TRANSFORM(nullptr) {}
  ~S_SET_TRANSFORM() override;
  explicit PROTOBUF_CONSTEXPR S_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SET_TRANSFORM(const S_SET_TRANSFORM& from);
  S_SET_TRANSFORM(S_SET_TRANSFORM&& from) noexcept
    : S_SET_TRANSFORM() {
    *this = ::std::move(from);
  }

  inline S_SET_TRANSFORM& operator=(const S_SET_TRANSFORM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SET_TRANSFORM& operator=(S_SET_TRANSFORM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SET_TRANSFORM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SET_TRANSFORM* internal_default_instance() {
    return reinterpret_cast<const S_SET_TRANSFORM*>(
               &_S_SET_TRANSFORM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_SET_TRANSFORM& a, S_SET_TRANSFORM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SET_TRANSFORM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SET_TRANSFORM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SET_TRANSFORM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SET_TRANSFORM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SET_TRANSFORM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SET_TRANSFORM& from) {
    S_SET_TRANSFORM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SET_TRANSFORM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SET_TRANSFORM";
  }
  protected:
  explicit S_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kRotationFieldNumber = 5,
    kAngularVelocityFieldNumber = 6,
    kTimestampFieldNumber = 1,
    kGameObjectIdFieldNumber = 2,
  };
  // .Protocol.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::Protocol::Vector3& velocity() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_velocity();
  ::Protocol::Vector3* mutable_velocity();
  void set_allocated_velocity(::Protocol::Vector3* velocity);
  private:
  const ::Protocol::Vector3& _internal_velocity() const;
  ::Protocol::Vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::Protocol::Vector3* velocity);
  ::Protocol::Vector3* unsafe_arena_release_velocity();

  // .Protocol.Vector3 rotation = 5;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // .Protocol.Vector3 angularVelocity = 6;
  bool has_angularvelocity() const;
  private:
  bool _internal_has_angularvelocity() const;
  public:
  void clear_angularvelocity();
  const ::Protocol::Vector3& angularvelocity() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_angularvelocity();
  ::Protocol::Vector3* mutable_angularvelocity();
  void set_allocated_angularvelocity(::Protocol::Vector3* angularvelocity);
  private:
  const ::Protocol::Vector3& _internal_angularvelocity() const;
  ::Protocol::Vector3* _internal_mutable_angularvelocity();
  public:
  void unsafe_arena_set_allocated_angularvelocity(
      ::Protocol::Vector3* angularvelocity);
  ::Protocol::Vector3* unsafe_arena_release_angularvelocity();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 gameObjectId = 2;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SET_TRANSFORM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* velocity_;
    ::Protocol::Vector3* rotation_;
    ::Protocol::Vector3* angularvelocity_;
    int64_t timestamp_;
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class C_SET_ANIMATION_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<C_SET_ANIMATION_ParamsEntry_DoNotUse, 
    std::string, ::Protocol::AnimationParameter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<C_SET_ANIMATION_ParamsEntry_DoNotUse, 
    std::string, ::Protocol::AnimationParameter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  C_SET_ANIMATION_ParamsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR C_SET_ANIMATION_ParamsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit C_SET_ANIMATION_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const C_SET_ANIMATION_ParamsEntry_DoNotUse& other);
  static const C_SET_ANIMATION_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const C_SET_ANIMATION_ParamsEntry_DoNotUse*>(&_C_SET_ANIMATION_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Protocol.C_SET_ANIMATION.ParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};

// -------------------------------------------------------------------

class C_SET_ANIMATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SET_ANIMATION) */ {
 public:
  inline C_SET_ANIMATION() : C_SET_ANIMATION(nullptr) {}
  ~C_SET_ANIMATION() override;
  explicit PROTOBUF_CONSTEXPR C_SET_ANIMATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SET_ANIMATION(const C_SET_ANIMATION& from);
  C_SET_ANIMATION(C_SET_ANIMATION&& from) noexcept
    : C_SET_ANIMATION() {
    *this = ::std::move(from);
  }

  inline C_SET_ANIMATION& operator=(const C_SET_ANIMATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SET_ANIMATION& operator=(C_SET_ANIMATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SET_ANIMATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SET_ANIMATION* internal_default_instance() {
    return reinterpret_cast<const C_SET_ANIMATION*>(
               &_C_SET_ANIMATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(C_SET_ANIMATION& a, C_SET_ANIMATION& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SET_ANIMATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SET_ANIMATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SET_ANIMATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SET_ANIMATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SET_ANIMATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SET_ANIMATION& from) {
    C_SET_ANIMATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SET_ANIMATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SET_ANIMATION";
  }
  protected:
  explicit C_SET_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kGameObjectIdFieldNumber = 1,
  };
  // map<string, .Protocol.AnimationParameter> params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >*
      mutable_params();

  // int32 gameObjectId = 1;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SET_ANIMATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        C_SET_ANIMATION_ParamsEntry_DoNotUse,
        std::string, ::Protocol::AnimationParameter,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> params_;
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_SET_ANIMATION_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<S_SET_ANIMATION_ParamsEntry_DoNotUse, 
    std::string, ::Protocol::AnimationParameter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<S_SET_ANIMATION_ParamsEntry_DoNotUse, 
    std::string, ::Protocol::AnimationParameter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  S_SET_ANIMATION_ParamsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR S_SET_ANIMATION_ParamsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit S_SET_ANIMATION_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const S_SET_ANIMATION_ParamsEntry_DoNotUse& other);
  static const S_SET_ANIMATION_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const S_SET_ANIMATION_ParamsEntry_DoNotUse*>(&_S_SET_ANIMATION_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "Protocol.S_SET_ANIMATION.ParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};

// -------------------------------------------------------------------

class S_SET_ANIMATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SET_ANIMATION) */ {
 public:
  inline S_SET_ANIMATION() : S_SET_ANIMATION(nullptr) {}
  ~S_SET_ANIMATION() override;
  explicit PROTOBUF_CONSTEXPR S_SET_ANIMATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SET_ANIMATION(const S_SET_ANIMATION& from);
  S_SET_ANIMATION(S_SET_ANIMATION&& from) noexcept
    : S_SET_ANIMATION() {
    *this = ::std::move(from);
  }

  inline S_SET_ANIMATION& operator=(const S_SET_ANIMATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SET_ANIMATION& operator=(S_SET_ANIMATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SET_ANIMATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SET_ANIMATION* internal_default_instance() {
    return reinterpret_cast<const S_SET_ANIMATION*>(
               &_S_SET_ANIMATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_SET_ANIMATION& a, S_SET_ANIMATION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SET_ANIMATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SET_ANIMATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SET_ANIMATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SET_ANIMATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SET_ANIMATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SET_ANIMATION& from) {
    S_SET_ANIMATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SET_ANIMATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SET_ANIMATION";
  }
  protected:
  explicit S_SET_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 2,
    kGameObjectIdFieldNumber = 1,
  };
  // map<string, .Protocol.AnimationParameter> params = 2;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >&
      _internal_params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >*
      _internal_mutable_params();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >*
      mutable_params();

  // int32 gameObjectId = 1;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SET_ANIMATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        S_SET_ANIMATION_ParamsEntry_DoNotUse,
        std::string, ::Protocol::AnimationParameter,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> params_;
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.z)
}

// -------------------------------------------------------------------

// AnimationParameter

// bool bool_param = 1;
inline bool AnimationParameter::_internal_has_bool_param() const {
  return param_case() == kBoolParam;
}
inline bool AnimationParameter::has_bool_param() const {
  return _internal_has_bool_param();
}
inline void AnimationParameter::set_has_bool_param() {
  _impl_._oneof_case_[0] = kBoolParam;
}
inline void AnimationParameter::clear_bool_param() {
  if (_internal_has_bool_param()) {
    _impl_.param_.bool_param_ = false;
    clear_has_param();
  }
}
inline bool AnimationParameter::_internal_bool_param() const {
  if (_internal_has_bool_param()) {
    return _impl_.param_.bool_param_;
  }
  return false;
}
inline void AnimationParameter::_internal_set_bool_param(bool value) {
  if (!_internal_has_bool_param()) {
    clear_param();
    set_has_bool_param();
  }
  _impl_.param_.bool_param_ = value;
}
inline bool AnimationParameter::bool_param() const {
  // @@protoc_insertion_point(field_get:Protocol.AnimationParameter.bool_param)
  return _internal_bool_param();
}
inline void AnimationParameter::set_bool_param(bool value) {
  _internal_set_bool_param(value);
  // @@protoc_insertion_point(field_set:Protocol.AnimationParameter.bool_param)
}

// int32 int_param = 2;
inline bool AnimationParameter::_internal_has_int_param() const {
  return param_case() == kIntParam;
}
inline bool AnimationParameter::has_int_param() const {
  return _internal_has_int_param();
}
inline void AnimationParameter::set_has_int_param() {
  _impl_._oneof_case_[0] = kIntParam;
}
inline void AnimationParameter::clear_int_param() {
  if (_internal_has_int_param()) {
    _impl_.param_.int_param_ = 0;
    clear_has_param();
  }
}
inline int32_t AnimationParameter::_internal_int_param() const {
  if (_internal_has_int_param()) {
    return _impl_.param_.int_param_;
  }
  return 0;
}
inline void AnimationParameter::_internal_set_int_param(int32_t value) {
  if (!_internal_has_int_param()) {
    clear_param();
    set_has_int_param();
  }
  _impl_.param_.int_param_ = value;
}
inline int32_t AnimationParameter::int_param() const {
  // @@protoc_insertion_point(field_get:Protocol.AnimationParameter.int_param)
  return _internal_int_param();
}
inline void AnimationParameter::set_int_param(int32_t value) {
  _internal_set_int_param(value);
  // @@protoc_insertion_point(field_set:Protocol.AnimationParameter.int_param)
}

// float float_param = 3;
inline bool AnimationParameter::_internal_has_float_param() const {
  return param_case() == kFloatParam;
}
inline bool AnimationParameter::has_float_param() const {
  return _internal_has_float_param();
}
inline void AnimationParameter::set_has_float_param() {
  _impl_._oneof_case_[0] = kFloatParam;
}
inline void AnimationParameter::clear_float_param() {
  if (_internal_has_float_param()) {
    _impl_.param_.float_param_ = 0;
    clear_has_param();
  }
}
inline float AnimationParameter::_internal_float_param() const {
  if (_internal_has_float_param()) {
    return _impl_.param_.float_param_;
  }
  return 0;
}
inline void AnimationParameter::_internal_set_float_param(float value) {
  if (!_internal_has_float_param()) {
    clear_param();
    set_has_float_param();
  }
  _impl_.param_.float_param_ = value;
}
inline float AnimationParameter::float_param() const {
  // @@protoc_insertion_point(field_get:Protocol.AnimationParameter.float_param)
  return _internal_float_param();
}
inline void AnimationParameter::set_float_param(float value) {
  _internal_set_float_param(value);
  // @@protoc_insertion_point(field_set:Protocol.AnimationParameter.float_param)
}

inline bool AnimationParameter::has_param() const {
  return param_case() != PARAM_NOT_SET;
}
inline void AnimationParameter::clear_has_param() {
  _impl_._oneof_case_[0] = PARAM_NOT_SET;
}
inline AnimationParameter::ParamCase AnimationParameter::param_case() const {
  return AnimationParameter::ParamCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// C_INSTANTIATE_GAME_OBJECT

// int32 type = 1;
inline void C_INSTANTIATE_GAME_OBJECT::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t C_INSTANTIATE_GAME_OBJECT::_internal_type() const {
  return _impl_.type_;
}
inline int32_t C_INSTANTIATE_GAME_OBJECT::type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INSTANTIATE_GAME_OBJECT.type)
  return _internal_type();
}
inline void C_INSTANTIATE_GAME_OBJECT::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void C_INSTANTIATE_GAME_OBJECT::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_INSTANTIATE_GAME_OBJECT.type)
}

// string prefabName = 2;
inline void C_INSTANTIATE_GAME_OBJECT::clear_prefabname() {
  _impl_.prefabname_.ClearToEmpty();
}
inline const std::string& C_INSTANTIATE_GAME_OBJECT::prefabname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INSTANTIATE_GAME_OBJECT.prefabName)
  return _internal_prefabname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_INSTANTIATE_GAME_OBJECT::set_prefabname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prefabname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_INSTANTIATE_GAME_OBJECT.prefabName)
}
inline std::string* C_INSTANTIATE_GAME_OBJECT::mutable_prefabname() {
  std::string* _s = _internal_mutable_prefabname();
  // @@protoc_insertion_point(field_mutable:Protocol.C_INSTANTIATE_GAME_OBJECT.prefabName)
  return _s;
}
inline const std::string& C_INSTANTIATE_GAME_OBJECT::_internal_prefabname() const {
  return _impl_.prefabname_.Get();
}
inline void C_INSTANTIATE_GAME_OBJECT::_internal_set_prefabname(const std::string& value) {
  
  _impl_.prefabname_.Set(value, GetArenaForAllocation());
}
inline std::string* C_INSTANTIATE_GAME_OBJECT::_internal_mutable_prefabname() {
  
  return _impl_.prefabname_.Mutable(GetArenaForAllocation());
}
inline std::string* C_INSTANTIATE_GAME_OBJECT::release_prefabname() {
  // @@protoc_insertion_point(field_release:Protocol.C_INSTANTIATE_GAME_OBJECT.prefabName)
  return _impl_.prefabname_.Release();
}
inline void C_INSTANTIATE_GAME_OBJECT::set_allocated_prefabname(std::string* prefabname) {
  if (prefabname != nullptr) {
    
  } else {
    
  }
  _impl_.prefabname_.SetAllocated(prefabname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefabname_.IsDefault()) {
    _impl_.prefabname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_INSTANTIATE_GAME_OBJECT.prefabName)
}

// .Protocol.Vector3 position = 3;
inline bool C_INSTANTIATE_GAME_OBJECT::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_INSTANTIATE_GAME_OBJECT::has_position() const {
  return _internal_has_position();
}
inline void C_INSTANTIATE_GAME_OBJECT::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& C_INSTANTIATE_GAME_OBJECT::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_INSTANTIATE_GAME_OBJECT::position() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INSTANTIATE_GAME_OBJECT.position)
  return _internal_position();
}
inline void C_INSTANTIATE_GAME_OBJECT::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_INSTANTIATE_GAME_OBJECT.position)
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.C_INSTANTIATE_GAME_OBJECT.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.C_INSTANTIATE_GAME_OBJECT.position)
  return _msg;
}
inline void C_INSTANTIATE_GAME_OBJECT::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_INSTANTIATE_GAME_OBJECT.position)
}

// .Protocol.Vector3 rotation = 4;
inline bool C_INSTANTIATE_GAME_OBJECT::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool C_INSTANTIATE_GAME_OBJECT::has_rotation() const {
  return _internal_has_rotation();
}
inline void C_INSTANTIATE_GAME_OBJECT::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& C_INSTANTIATE_GAME_OBJECT::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_INSTANTIATE_GAME_OBJECT::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INSTANTIATE_GAME_OBJECT.rotation)
  return _internal_rotation();
}
inline void C_INSTANTIATE_GAME_OBJECT::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_INSTANTIATE_GAME_OBJECT.rotation)
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.C_INSTANTIATE_GAME_OBJECT.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.C_INSTANTIATE_GAME_OBJECT.rotation)
  return _msg;
}
inline void C_INSTANTIATE_GAME_OBJECT::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_INSTANTIATE_GAME_OBJECT.rotation)
}

// -------------------------------------------------------------------

// S_INSTANTIATE_GAME_OBJECT

// bool success = 1;
inline void S_INSTANTIATE_GAME_OBJECT::clear_success() {
  _impl_.success_ = false;
}
inline bool S_INSTANTIATE_GAME_OBJECT::_internal_success() const {
  return _impl_.success_;
}
inline bool S_INSTANTIATE_GAME_OBJECT::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INSTANTIATE_GAME_OBJECT.success)
  return _internal_success();
}
inline void S_INSTANTIATE_GAME_OBJECT::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_INSTANTIATE_GAME_OBJECT::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_INSTANTIATE_GAME_OBJECT.success)
}

// int32 gameObjectId = 2;
inline void S_INSTANTIATE_GAME_OBJECT::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t S_INSTANTIATE_GAME_OBJECT::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t S_INSTANTIATE_GAME_OBJECT::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INSTANTIATE_GAME_OBJECT.gameObjectId)
  return _internal_gameobjectid();
}
inline void S_INSTANTIATE_GAME_OBJECT::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void S_INSTANTIATE_GAME_OBJECT::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_INSTANTIATE_GAME_OBJECT.gameObjectId)
}

// -------------------------------------------------------------------

// C_GET_GAME_OBJECT

// -------------------------------------------------------------------

// S_ADD_GAME_OBJECT_GameObjectInfo

// int32 gameObjectId = 1;
inline void S_ADD_GAME_OBJECT_GameObjectInfo::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t S_ADD_GAME_OBJECT_GameObjectInfo::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t S_ADD_GAME_OBJECT_GameObjectInfo::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.gameObjectId)
  return _internal_gameobjectid();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.gameObjectId)
}

// string ownerId = 2;
inline void S_ADD_GAME_OBJECT_GameObjectInfo::clear_ownerid() {
  _impl_.ownerid_.ClearToEmpty();
}
inline const std::string& S_ADD_GAME_OBJECT_GameObjectInfo::ownerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.ownerId)
  return _internal_ownerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ADD_GAME_OBJECT_GameObjectInfo::set_ownerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ownerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.ownerId)
}
inline std::string* S_ADD_GAME_OBJECT_GameObjectInfo::mutable_ownerid() {
  std::string* _s = _internal_mutable_ownerid();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.ownerId)
  return _s;
}
inline const std::string& S_ADD_GAME_OBJECT_GameObjectInfo::_internal_ownerid() const {
  return _impl_.ownerid_.Get();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::_internal_set_ownerid(const std::string& value) {
  
  _impl_.ownerid_.Set(value, GetArenaForAllocation());
}
inline std::string* S_ADD_GAME_OBJECT_GameObjectInfo::_internal_mutable_ownerid() {
  
  return _impl_.ownerid_.Mutable(GetArenaForAllocation());
}
inline std::string* S_ADD_GAME_OBJECT_GameObjectInfo::release_ownerid() {
  // @@protoc_insertion_point(field_release:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.ownerId)
  return _impl_.ownerid_.Release();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::set_allocated_ownerid(std::string* ownerid) {
  if (ownerid != nullptr) {
    
  } else {
    
  }
  _impl_.ownerid_.SetAllocated(ownerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ownerid_.IsDefault()) {
    _impl_.ownerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.ownerId)
}

// int32 type = 3;
inline void S_ADD_GAME_OBJECT_GameObjectInfo::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t S_ADD_GAME_OBJECT_GameObjectInfo::_internal_type() const {
  return _impl_.type_;
}
inline int32_t S_ADD_GAME_OBJECT_GameObjectInfo::type() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.type)
  return _internal_type();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.type)
}

// string prefabName = 4;
inline void S_ADD_GAME_OBJECT_GameObjectInfo::clear_prefabname() {
  _impl_.prefabname_.ClearToEmpty();
}
inline const std::string& S_ADD_GAME_OBJECT_GameObjectInfo::prefabname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.prefabName)
  return _internal_prefabname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ADD_GAME_OBJECT_GameObjectInfo::set_prefabname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prefabname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.prefabName)
}
inline std::string* S_ADD_GAME_OBJECT_GameObjectInfo::mutable_prefabname() {
  std::string* _s = _internal_mutable_prefabname();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.prefabName)
  return _s;
}
inline const std::string& S_ADD_GAME_OBJECT_GameObjectInfo::_internal_prefabname() const {
  return _impl_.prefabname_.Get();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::_internal_set_prefabname(const std::string& value) {
  
  _impl_.prefabname_.Set(value, GetArenaForAllocation());
}
inline std::string* S_ADD_GAME_OBJECT_GameObjectInfo::_internal_mutable_prefabname() {
  
  return _impl_.prefabname_.Mutable(GetArenaForAllocation());
}
inline std::string* S_ADD_GAME_OBJECT_GameObjectInfo::release_prefabname() {
  // @@protoc_insertion_point(field_release:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.prefabName)
  return _impl_.prefabname_.Release();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::set_allocated_prefabname(std::string* prefabname) {
  if (prefabname != nullptr) {
    
  } else {
    
  }
  _impl_.prefabname_.SetAllocated(prefabname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefabname_.IsDefault()) {
    _impl_.prefabname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.prefabName)
}

// .Protocol.Vector3 position = 5;
inline bool S_ADD_GAME_OBJECT_GameObjectInfo::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_ADD_GAME_OBJECT_GameObjectInfo::has_position() const {
  return _internal_has_position();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& S_ADD_GAME_OBJECT_GameObjectInfo::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_ADD_GAME_OBJECT_GameObjectInfo::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.position)
  return _internal_position();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.position)
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.position)
  return _msg;
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.position)
}

// .Protocol.Vector3 rotation = 6;
inline bool S_ADD_GAME_OBJECT_GameObjectInfo::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S_ADD_GAME_OBJECT_GameObjectInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& S_ADD_GAME_OBJECT_GameObjectInfo::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_ADD_GAME_OBJECT_GameObjectInfo::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.rotation)
  return _internal_rotation();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.rotation)
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.rotation)
  return _msg;
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.rotation)
}

// -------------------------------------------------------------------

// S_ADD_GAME_OBJECT

// repeated .Protocol.S_ADD_GAME_OBJECT.GameObjectInfo gameObjects = 1;
inline int S_ADD_GAME_OBJECT::_internal_gameobjects_size() const {
  return _impl_.gameobjects_.size();
}
inline int S_ADD_GAME_OBJECT::gameobjects_size() const {
  return _internal_gameobjects_size();
}
inline void S_ADD_GAME_OBJECT::clear_gameobjects() {
  _impl_.gameobjects_.Clear();
}
inline ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* S_ADD_GAME_OBJECT::mutable_gameobjects(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_GAME_OBJECT.gameObjects)
  return _impl_.gameobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo >*
S_ADD_GAME_OBJECT::mutable_gameobjects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ADD_GAME_OBJECT.gameObjects)
  return &_impl_.gameobjects_;
}
inline const ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo& S_ADD_GAME_OBJECT::_internal_gameobjects(int index) const {
  return _impl_.gameobjects_.Get(index);
}
inline const ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo& S_ADD_GAME_OBJECT::gameobjects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_GAME_OBJECT.gameObjects)
  return _internal_gameobjects(index);
}
inline ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* S_ADD_GAME_OBJECT::_internal_add_gameobjects() {
  return _impl_.gameobjects_.Add();
}
inline ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* S_ADD_GAME_OBJECT::add_gameobjects() {
  ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* _add = _internal_add_gameobjects();
  // @@protoc_insertion_point(field_add:Protocol.S_ADD_GAME_OBJECT.gameObjects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo >&
S_ADD_GAME_OBJECT::gameobjects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ADD_GAME_OBJECT.gameObjects)
  return _impl_.gameobjects_;
}

// -------------------------------------------------------------------

// C_DESTORY_GAME_OBJECT

// int32 gameObjectId = 1;
inline void C_DESTORY_GAME_OBJECT::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t C_DESTORY_GAME_OBJECT::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t C_DESTORY_GAME_OBJECT::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DESTORY_GAME_OBJECT.gameObjectId)
  return _internal_gameobjectid();
}
inline void C_DESTORY_GAME_OBJECT::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void C_DESTORY_GAME_OBJECT::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DESTORY_GAME_OBJECT.gameObjectId)
}

// -------------------------------------------------------------------

// S_DESTORY_GAME_OBJECT

// bool success = 1;
inline void S_DESTORY_GAME_OBJECT::clear_success() {
  _impl_.success_ = false;
}
inline bool S_DESTORY_GAME_OBJECT::_internal_success() const {
  return _impl_.success_;
}
inline bool S_DESTORY_GAME_OBJECT::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DESTORY_GAME_OBJECT.success)
  return _internal_success();
}
inline void S_DESTORY_GAME_OBJECT::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_DESTORY_GAME_OBJECT::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DESTORY_GAME_OBJECT.success)
}

// int32 gameObjectId = 2;
inline void S_DESTORY_GAME_OBJECT::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t S_DESTORY_GAME_OBJECT::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t S_DESTORY_GAME_OBJECT::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DESTORY_GAME_OBJECT.gameObjectId)
  return _internal_gameobjectid();
}
inline void S_DESTORY_GAME_OBJECT::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void S_DESTORY_GAME_OBJECT::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DESTORY_GAME_OBJECT.gameObjectId)
}

// -------------------------------------------------------------------

// S_REMOVE_GAME_OBJECT

// repeated int32 gameObjects = 1;
inline int S_REMOVE_GAME_OBJECT::_internal_gameobjects_size() const {
  return _impl_.gameobjects_.size();
}
inline int S_REMOVE_GAME_OBJECT::gameobjects_size() const {
  return _internal_gameobjects_size();
}
inline void S_REMOVE_GAME_OBJECT::clear_gameobjects() {
  _impl_.gameobjects_.Clear();
}
inline int32_t S_REMOVE_GAME_OBJECT::_internal_gameobjects(int index) const {
  return _impl_.gameobjects_.Get(index);
}
inline int32_t S_REMOVE_GAME_OBJECT::gameobjects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_REMOVE_GAME_OBJECT.gameObjects)
  return _internal_gameobjects(index);
}
inline void S_REMOVE_GAME_OBJECT::set_gameobjects(int index, int32_t value) {
  _impl_.gameobjects_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_REMOVE_GAME_OBJECT.gameObjects)
}
inline void S_REMOVE_GAME_OBJECT::_internal_add_gameobjects(int32_t value) {
  _impl_.gameobjects_.Add(value);
}
inline void S_REMOVE_GAME_OBJECT::add_gameobjects(int32_t value) {
  _internal_add_gameobjects(value);
  // @@protoc_insertion_point(field_add:Protocol.S_REMOVE_GAME_OBJECT.gameObjects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S_REMOVE_GAME_OBJECT::_internal_gameobjects() const {
  return _impl_.gameobjects_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S_REMOVE_GAME_OBJECT::gameobjects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_REMOVE_GAME_OBJECT.gameObjects)
  return _internal_gameobjects();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S_REMOVE_GAME_OBJECT::_internal_mutable_gameobjects() {
  return &_impl_.gameobjects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S_REMOVE_GAME_OBJECT::mutable_gameobjects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_REMOVE_GAME_OBJECT.gameObjects)
  return _internal_mutable_gameobjects();
}

// -------------------------------------------------------------------

// C_SET_GAME_OBJECT_PREFAB

// int32 gameObjectId = 1;
inline void C_SET_GAME_OBJECT_PREFAB::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t C_SET_GAME_OBJECT_PREFAB::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t C_SET_GAME_OBJECT_PREFAB::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_GAME_OBJECT_PREFAB.gameObjectId)
  return _internal_gameobjectid();
}
inline void C_SET_GAME_OBJECT_PREFAB::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void C_SET_GAME_OBJECT_PREFAB::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SET_GAME_OBJECT_PREFAB.gameObjectId)
}

// string prefabName = 2;
inline void C_SET_GAME_OBJECT_PREFAB::clear_prefabname() {
  _impl_.prefabname_.ClearToEmpty();
}
inline const std::string& C_SET_GAME_OBJECT_PREFAB::prefabname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_GAME_OBJECT_PREFAB.prefabName)
  return _internal_prefabname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SET_GAME_OBJECT_PREFAB::set_prefabname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prefabname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SET_GAME_OBJECT_PREFAB.prefabName)
}
inline std::string* C_SET_GAME_OBJECT_PREFAB::mutable_prefabname() {
  std::string* _s = _internal_mutable_prefabname();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SET_GAME_OBJECT_PREFAB.prefabName)
  return _s;
}
inline const std::string& C_SET_GAME_OBJECT_PREFAB::_internal_prefabname() const {
  return _impl_.prefabname_.Get();
}
inline void C_SET_GAME_OBJECT_PREFAB::_internal_set_prefabname(const std::string& value) {
  
  _impl_.prefabname_.Set(value, GetArenaForAllocation());
}
inline std::string* C_SET_GAME_OBJECT_PREFAB::_internal_mutable_prefabname() {
  
  return _impl_.prefabname_.Mutable(GetArenaForAllocation());
}
inline std::string* C_SET_GAME_OBJECT_PREFAB::release_prefabname() {
  // @@protoc_insertion_point(field_release:Protocol.C_SET_GAME_OBJECT_PREFAB.prefabName)
  return _impl_.prefabname_.Release();
}
inline void C_SET_GAME_OBJECT_PREFAB::set_allocated_prefabname(std::string* prefabname) {
  if (prefabname != nullptr) {
    
  } else {
    
  }
  _impl_.prefabname_.SetAllocated(prefabname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefabname_.IsDefault()) {
    _impl_.prefabname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SET_GAME_OBJECT_PREFAB.prefabName)
}

// -------------------------------------------------------------------

// S_SET_GAME_OBJECT_PREFAB

// int32 gameObjectId = 1;
inline void S_SET_GAME_OBJECT_PREFAB::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t S_SET_GAME_OBJECT_PREFAB::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t S_SET_GAME_OBJECT_PREFAB::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_GAME_OBJECT_PREFAB.gameObjectId)
  return _internal_gameobjectid();
}
inline void S_SET_GAME_OBJECT_PREFAB::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void S_SET_GAME_OBJECT_PREFAB::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SET_GAME_OBJECT_PREFAB.gameObjectId)
}

// string prefabName = 2;
inline void S_SET_GAME_OBJECT_PREFAB::clear_prefabname() {
  _impl_.prefabname_.ClearToEmpty();
}
inline const std::string& S_SET_GAME_OBJECT_PREFAB::prefabname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_GAME_OBJECT_PREFAB.prefabName)
  return _internal_prefabname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SET_GAME_OBJECT_PREFAB::set_prefabname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prefabname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SET_GAME_OBJECT_PREFAB.prefabName)
}
inline std::string* S_SET_GAME_OBJECT_PREFAB::mutable_prefabname() {
  std::string* _s = _internal_mutable_prefabname();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SET_GAME_OBJECT_PREFAB.prefabName)
  return _s;
}
inline const std::string& S_SET_GAME_OBJECT_PREFAB::_internal_prefabname() const {
  return _impl_.prefabname_.Get();
}
inline void S_SET_GAME_OBJECT_PREFAB::_internal_set_prefabname(const std::string& value) {
  
  _impl_.prefabname_.Set(value, GetArenaForAllocation());
}
inline std::string* S_SET_GAME_OBJECT_PREFAB::_internal_mutable_prefabname() {
  
  return _impl_.prefabname_.Mutable(GetArenaForAllocation());
}
inline std::string* S_SET_GAME_OBJECT_PREFAB::release_prefabname() {
  // @@protoc_insertion_point(field_release:Protocol.S_SET_GAME_OBJECT_PREFAB.prefabName)
  return _impl_.prefabname_.Release();
}
inline void S_SET_GAME_OBJECT_PREFAB::set_allocated_prefabname(std::string* prefabname) {
  if (prefabname != nullptr) {
    
  } else {
    
  }
  _impl_.prefabname_.SetAllocated(prefabname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefabname_.IsDefault()) {
    _impl_.prefabname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SET_GAME_OBJECT_PREFAB.prefabName)
}

// -------------------------------------------------------------------

// C_SET_GAME_OBJECT_OWNER

// int32 gameObjectId = 1;
inline void C_SET_GAME_OBJECT_OWNER::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t C_SET_GAME_OBJECT_OWNER::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t C_SET_GAME_OBJECT_OWNER::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_GAME_OBJECT_OWNER.gameObjectId)
  return _internal_gameobjectid();
}
inline void C_SET_GAME_OBJECT_OWNER::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void C_SET_GAME_OBJECT_OWNER::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SET_GAME_OBJECT_OWNER.gameObjectId)
}

// -------------------------------------------------------------------

// S_SET_GAME_OBJECT_OWNER

// int32 gameObjectId = 1;
inline void S_SET_GAME_OBJECT_OWNER::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t S_SET_GAME_OBJECT_OWNER::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t S_SET_GAME_OBJECT_OWNER::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_GAME_OBJECT_OWNER.gameObjectId)
  return _internal_gameobjectid();
}
inline void S_SET_GAME_OBJECT_OWNER::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void S_SET_GAME_OBJECT_OWNER::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SET_GAME_OBJECT_OWNER.gameObjectId)
}

// string ownerId = 2;
inline void S_SET_GAME_OBJECT_OWNER::clear_ownerid() {
  _impl_.ownerid_.ClearToEmpty();
}
inline const std::string& S_SET_GAME_OBJECT_OWNER::ownerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_GAME_OBJECT_OWNER.ownerId)
  return _internal_ownerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SET_GAME_OBJECT_OWNER::set_ownerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ownerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SET_GAME_OBJECT_OWNER.ownerId)
}
inline std::string* S_SET_GAME_OBJECT_OWNER::mutable_ownerid() {
  std::string* _s = _internal_mutable_ownerid();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SET_GAME_OBJECT_OWNER.ownerId)
  return _s;
}
inline const std::string& S_SET_GAME_OBJECT_OWNER::_internal_ownerid() const {
  return _impl_.ownerid_.Get();
}
inline void S_SET_GAME_OBJECT_OWNER::_internal_set_ownerid(const std::string& value) {
  
  _impl_.ownerid_.Set(value, GetArenaForAllocation());
}
inline std::string* S_SET_GAME_OBJECT_OWNER::_internal_mutable_ownerid() {
  
  return _impl_.ownerid_.Mutable(GetArenaForAllocation());
}
inline std::string* S_SET_GAME_OBJECT_OWNER::release_ownerid() {
  // @@protoc_insertion_point(field_release:Protocol.S_SET_GAME_OBJECT_OWNER.ownerId)
  return _impl_.ownerid_.Release();
}
inline void S_SET_GAME_OBJECT_OWNER::set_allocated_ownerid(std::string* ownerid) {
  if (ownerid != nullptr) {
    
  } else {
    
  }
  _impl_.ownerid_.SetAllocated(ownerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ownerid_.IsDefault()) {
    _impl_.ownerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SET_GAME_OBJECT_OWNER.ownerId)
}

// -------------------------------------------------------------------

// C_SET_TRANSFORM

// int64 timestamp = 1;
inline void C_SET_TRANSFORM::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C_SET_TRANSFORM::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C_SET_TRANSFORM::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_TRANSFORM.timestamp)
  return _internal_timestamp();
}
inline void C_SET_TRANSFORM::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C_SET_TRANSFORM::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SET_TRANSFORM.timestamp)
}

// int32 gameObjectId = 2;
inline void C_SET_TRANSFORM::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t C_SET_TRANSFORM::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t C_SET_TRANSFORM::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_TRANSFORM.gameObjectId)
  return _internal_gameobjectid();
}
inline void C_SET_TRANSFORM::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void C_SET_TRANSFORM::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SET_TRANSFORM.gameObjectId)
}

// .Protocol.Vector3 position = 3;
inline bool C_SET_TRANSFORM::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_SET_TRANSFORM::has_position() const {
  return _internal_has_position();
}
inline void C_SET_TRANSFORM::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& C_SET_TRANSFORM::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_SET_TRANSFORM::position() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_TRANSFORM.position)
  return _internal_position();
}
inline void C_SET_TRANSFORM::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SET_TRANSFORM.position)
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.C_SET_TRANSFORM.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SET_TRANSFORM.position)
  return _msg;
}
inline void C_SET_TRANSFORM::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SET_TRANSFORM.position)
}

// .Protocol.Vector3 velocity = 4;
inline bool C_SET_TRANSFORM::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool C_SET_TRANSFORM::has_velocity() const {
  return _internal_has_velocity();
}
inline void C_SET_TRANSFORM::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
}
inline const ::Protocol::Vector3& C_SET_TRANSFORM::_internal_velocity() const {
  const ::Protocol::Vector3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_SET_TRANSFORM::velocity() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_TRANSFORM.velocity)
  return _internal_velocity();
}
inline void C_SET_TRANSFORM::unsafe_arena_set_allocated_velocity(
    ::Protocol::Vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SET_TRANSFORM.velocity)
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::release_velocity() {
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:Protocol.C_SET_TRANSFORM.velocity)
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::mutable_velocity() {
  ::Protocol::Vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SET_TRANSFORM.velocity)
  return _msg;
}
inline void C_SET_TRANSFORM::set_allocated_velocity(::Protocol::Vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SET_TRANSFORM.velocity)
}

// .Protocol.Vector3 rotation = 5;
inline bool C_SET_TRANSFORM::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool C_SET_TRANSFORM::has_rotation() const {
  return _internal_has_rotation();
}
inline void C_SET_TRANSFORM::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& C_SET_TRANSFORM::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_SET_TRANSFORM::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_TRANSFORM.rotation)
  return _internal_rotation();
}
inline void C_SET_TRANSFORM::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SET_TRANSFORM.rotation)
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.C_SET_TRANSFORM.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SET_TRANSFORM.rotation)
  return _msg;
}
inline void C_SET_TRANSFORM::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SET_TRANSFORM.rotation)
}

// .Protocol.Vector3 angularVelocity = 6;
inline bool C_SET_TRANSFORM::_internal_has_angularvelocity() const {
  return this != internal_default_instance() && _impl_.angularvelocity_ != nullptr;
}
inline bool C_SET_TRANSFORM::has_angularvelocity() const {
  return _internal_has_angularvelocity();
}
inline void C_SET_TRANSFORM::clear_angularvelocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.angularvelocity_ != nullptr) {
    delete _impl_.angularvelocity_;
  }
  _impl_.angularvelocity_ = nullptr;
}
inline const ::Protocol::Vector3& C_SET_TRANSFORM::_internal_angularvelocity() const {
  const ::Protocol::Vector3* p = _impl_.angularvelocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_SET_TRANSFORM::angularvelocity() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_TRANSFORM.angularVelocity)
  return _internal_angularvelocity();
}
inline void C_SET_TRANSFORM::unsafe_arena_set_allocated_angularvelocity(
    ::Protocol::Vector3* angularvelocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularvelocity_);
  }
  _impl_.angularvelocity_ = angularvelocity;
  if (angularvelocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SET_TRANSFORM.angularVelocity)
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::release_angularvelocity() {
  
  ::Protocol::Vector3* temp = _impl_.angularvelocity_;
  _impl_.angularvelocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::unsafe_arena_release_angularvelocity() {
  // @@protoc_insertion_point(field_release:Protocol.C_SET_TRANSFORM.angularVelocity)
  
  ::Protocol::Vector3* temp = _impl_.angularvelocity_;
  _impl_.angularvelocity_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::_internal_mutable_angularvelocity() {
  
  if (_impl_.angularvelocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.angularvelocity_ = p;
  }
  return _impl_.angularvelocity_;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::mutable_angularvelocity() {
  ::Protocol::Vector3* _msg = _internal_mutable_angularvelocity();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SET_TRANSFORM.angularVelocity)
  return _msg;
}
inline void C_SET_TRANSFORM::set_allocated_angularvelocity(::Protocol::Vector3* angularvelocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.angularvelocity_;
  }
  if (angularvelocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angularvelocity);
    if (message_arena != submessage_arena) {
      angularvelocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angularvelocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angularvelocity_ = angularvelocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SET_TRANSFORM.angularVelocity)
}

// -------------------------------------------------------------------

// S_SET_TRANSFORM

// int64 timestamp = 1;
inline void S_SET_TRANSFORM::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S_SET_TRANSFORM::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S_SET_TRANSFORM::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_TRANSFORM.timestamp)
  return _internal_timestamp();
}
inline void S_SET_TRANSFORM::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S_SET_TRANSFORM::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SET_TRANSFORM.timestamp)
}

// int32 gameObjectId = 2;
inline void S_SET_TRANSFORM::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t S_SET_TRANSFORM::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t S_SET_TRANSFORM::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_TRANSFORM.gameObjectId)
  return _internal_gameobjectid();
}
inline void S_SET_TRANSFORM::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void S_SET_TRANSFORM::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SET_TRANSFORM.gameObjectId)
}

// .Protocol.Vector3 position = 3;
inline bool S_SET_TRANSFORM::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_SET_TRANSFORM::has_position() const {
  return _internal_has_position();
}
inline void S_SET_TRANSFORM::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& S_SET_TRANSFORM::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_SET_TRANSFORM::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_TRANSFORM.position)
  return _internal_position();
}
inline void S_SET_TRANSFORM::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SET_TRANSFORM.position)
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_SET_TRANSFORM.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SET_TRANSFORM.position)
  return _msg;
}
inline void S_SET_TRANSFORM::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SET_TRANSFORM.position)
}

// .Protocol.Vector3 velocity = 4;
inline bool S_SET_TRANSFORM::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool S_SET_TRANSFORM::has_velocity() const {
  return _internal_has_velocity();
}
inline void S_SET_TRANSFORM::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
}
inline const ::Protocol::Vector3& S_SET_TRANSFORM::_internal_velocity() const {
  const ::Protocol::Vector3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_SET_TRANSFORM::velocity() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_TRANSFORM.velocity)
  return _internal_velocity();
}
inline void S_SET_TRANSFORM::unsafe_arena_set_allocated_velocity(
    ::Protocol::Vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SET_TRANSFORM.velocity)
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::release_velocity() {
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:Protocol.S_SET_TRANSFORM.velocity)
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::mutable_velocity() {
  ::Protocol::Vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SET_TRANSFORM.velocity)
  return _msg;
}
inline void S_SET_TRANSFORM::set_allocated_velocity(::Protocol::Vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SET_TRANSFORM.velocity)
}

// .Protocol.Vector3 rotation = 5;
inline bool S_SET_TRANSFORM::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S_SET_TRANSFORM::has_rotation() const {
  return _internal_has_rotation();
}
inline void S_SET_TRANSFORM::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& S_SET_TRANSFORM::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_SET_TRANSFORM::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_TRANSFORM.rotation)
  return _internal_rotation();
}
inline void S_SET_TRANSFORM::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SET_TRANSFORM.rotation)
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S_SET_TRANSFORM.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SET_TRANSFORM.rotation)
  return _msg;
}
inline void S_SET_TRANSFORM::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SET_TRANSFORM.rotation)
}

// .Protocol.Vector3 angularVelocity = 6;
inline bool S_SET_TRANSFORM::_internal_has_angularvelocity() const {
  return this != internal_default_instance() && _impl_.angularvelocity_ != nullptr;
}
inline bool S_SET_TRANSFORM::has_angularvelocity() const {
  return _internal_has_angularvelocity();
}
inline void S_SET_TRANSFORM::clear_angularvelocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.angularvelocity_ != nullptr) {
    delete _impl_.angularvelocity_;
  }
  _impl_.angularvelocity_ = nullptr;
}
inline const ::Protocol::Vector3& S_SET_TRANSFORM::_internal_angularvelocity() const {
  const ::Protocol::Vector3* p = _impl_.angularvelocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_SET_TRANSFORM::angularvelocity() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_TRANSFORM.angularVelocity)
  return _internal_angularvelocity();
}
inline void S_SET_TRANSFORM::unsafe_arena_set_allocated_angularvelocity(
    ::Protocol::Vector3* angularvelocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angularvelocity_);
  }
  _impl_.angularvelocity_ = angularvelocity;
  if (angularvelocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SET_TRANSFORM.angularVelocity)
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::release_angularvelocity() {
  
  ::Protocol::Vector3* temp = _impl_.angularvelocity_;
  _impl_.angularvelocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::unsafe_arena_release_angularvelocity() {
  // @@protoc_insertion_point(field_release:Protocol.S_SET_TRANSFORM.angularVelocity)
  
  ::Protocol::Vector3* temp = _impl_.angularvelocity_;
  _impl_.angularvelocity_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::_internal_mutable_angularvelocity() {
  
  if (_impl_.angularvelocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.angularvelocity_ = p;
  }
  return _impl_.angularvelocity_;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::mutable_angularvelocity() {
  ::Protocol::Vector3* _msg = _internal_mutable_angularvelocity();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SET_TRANSFORM.angularVelocity)
  return _msg;
}
inline void S_SET_TRANSFORM::set_allocated_angularvelocity(::Protocol::Vector3* angularvelocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.angularvelocity_;
  }
  if (angularvelocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angularvelocity);
    if (message_arena != submessage_arena) {
      angularvelocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angularvelocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angularvelocity_ = angularvelocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SET_TRANSFORM.angularVelocity)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// C_SET_ANIMATION

// int32 gameObjectId = 1;
inline void C_SET_ANIMATION::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t C_SET_ANIMATION::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t C_SET_ANIMATION::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_ANIMATION.gameObjectId)
  return _internal_gameobjectid();
}
inline void C_SET_ANIMATION::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void C_SET_ANIMATION::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SET_ANIMATION.gameObjectId)
}

// map<string, .Protocol.AnimationParameter> params = 2;
inline int C_SET_ANIMATION::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int C_SET_ANIMATION::params_size() const {
  return _internal_params_size();
}
inline void C_SET_ANIMATION::clear_params() {
  _impl_.params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >&
C_SET_ANIMATION::_internal_params() const {
  return _impl_.params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >&
C_SET_ANIMATION::params() const {
  // @@protoc_insertion_point(field_map:Protocol.C_SET_ANIMATION.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >*
C_SET_ANIMATION::_internal_mutable_params() {
  return _impl_.params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >*
C_SET_ANIMATION::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:Protocol.C_SET_ANIMATION.params)
  return _internal_mutable_params();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// S_SET_ANIMATION

// int32 gameObjectId = 1;
inline void S_SET_ANIMATION::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t S_SET_ANIMATION::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t S_SET_ANIMATION::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_ANIMATION.gameObjectId)
  return _internal_gameobjectid();
}
inline void S_SET_ANIMATION::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void S_SET_ANIMATION::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SET_ANIMATION.gameObjectId)
}

// map<string, .Protocol.AnimationParameter> params = 2;
inline int S_SET_ANIMATION::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int S_SET_ANIMATION::params_size() const {
  return _internal_params_size();
}
inline void S_SET_ANIMATION::clear_params() {
  _impl_.params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >&
S_SET_ANIMATION::_internal_params() const {
  return _impl_.params_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >&
S_SET_ANIMATION::params() const {
  // @@protoc_insertion_point(field_map:Protocol.S_SET_ANIMATION.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >*
S_SET_ANIMATION::_internal_mutable_params() {
  return _impl_.params_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::Protocol::AnimationParameter >*
S_SET_ANIMATION::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:Protocol.S_SET_ANIMATION.params)
  return _internal_mutable_params();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_5f001_5fGameObject_2eproto
