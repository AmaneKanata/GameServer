// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_001_GameObject.proto

#include "Packet_001_GameObject.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR Vector3::Vector3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_CONSTEXPR C_INSTANTIATE_GAME_OBJECT::C_INSTANTIATE_GAME_OBJECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_INSTANTIATE_GAME_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_INSTANTIATE_GAME_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_INSTANTIATE_GAME_OBJECTDefaultTypeInternal() {}
  union {
    C_INSTANTIATE_GAME_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_INSTANTIATE_GAME_OBJECTDefaultTypeInternal _C_INSTANTIATE_GAME_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR S_INSTANTIATE_GAME_OBJECT::S_INSTANTIATE_GAME_OBJECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.gameobjectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_INSTANTIATE_GAME_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_INSTANTIATE_GAME_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_INSTANTIATE_GAME_OBJECTDefaultTypeInternal() {}
  union {
    S_INSTANTIATE_GAME_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_INSTANTIATE_GAME_OBJECTDefaultTypeInternal _S_INSTANTIATE_GAME_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR C_GET_GAME_OBJECT::C_GET_GAME_OBJECT(
    ::_pbi::ConstantInitialized) {}
struct C_GET_GAME_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_GET_GAME_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_GET_GAME_OBJECTDefaultTypeInternal() {}
  union {
    C_GET_GAME_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_GET_GAME_OBJECTDefaultTypeInternal _C_GET_GAME_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR S_ADD_GAME_OBJECT_GameObjectInfo::S_ADD_GAME_OBJECT_GameObjectInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ADD_GAME_OBJECT_GameObjectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ADD_GAME_OBJECT_GameObjectInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ADD_GAME_OBJECT_GameObjectInfoDefaultTypeInternal() {}
  union {
    S_ADD_GAME_OBJECT_GameObjectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ADD_GAME_OBJECT_GameObjectInfoDefaultTypeInternal _S_ADD_GAME_OBJECT_GameObjectInfo_default_instance_;
PROTOBUF_CONSTEXPR S_ADD_GAME_OBJECT::S_ADD_GAME_OBJECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gameobjects_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ADD_GAME_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ADD_GAME_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ADD_GAME_OBJECTDefaultTypeInternal() {}
  union {
    S_ADD_GAME_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ADD_GAME_OBJECTDefaultTypeInternal _S_ADD_GAME_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR S_REMOVE_GAME_OBJECT::S_REMOVE_GAME_OBJECT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gameobjects_)*/{}
  , /*decltype(_impl_._gameobjects_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_REMOVE_GAME_OBJECTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_REMOVE_GAME_OBJECTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_REMOVE_GAME_OBJECTDefaultTypeInternal() {}
  union {
    S_REMOVE_GAME_OBJECT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_REMOVE_GAME_OBJECTDefaultTypeInternal _S_REMOVE_GAME_OBJECT_default_instance_;
PROTOBUF_CONSTEXPR C_SET_TRANSFORM::C_SET_TRANSFORM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.gameobjectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SET_TRANSFORMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SET_TRANSFORMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SET_TRANSFORMDefaultTypeInternal() {}
  union {
    C_SET_TRANSFORM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SET_TRANSFORMDefaultTypeInternal _C_SET_TRANSFORM_default_instance_;
PROTOBUF_CONSTEXPR S_SET_TRANSFORM::S_SET_TRANSFORM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.gameobjectid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SET_TRANSFORMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SET_TRANSFORMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SET_TRANSFORMDefaultTypeInternal() {}
  union {
    S_SET_TRANSFORM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SET_TRANSFORMDefaultTypeInternal _S_SET_TRANSFORM_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Packet_5f001_5fGameObject_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Packet_5f001_5fGameObject_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Packet_5f001_5fGameObject_2eproto = nullptr;

const uint32_t TableStruct_Packet_5f001_5fGameObject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Vector3, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_INSTANTIATE_GAME_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_INSTANTIATE_GAME_OBJECT, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_INSTANTIATE_GAME_OBJECT, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INSTANTIATE_GAME_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INSTANTIATE_GAME_OBJECT, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_INSTANTIATE_GAME_OBJECT, _impl_.gameobjectid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_GET_GAME_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_GAME_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_GAME_OBJECT, _impl_.gameobjects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_REMOVE_GAME_OBJECT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_REMOVE_GAME_OBJECT, _impl_.gameobjects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_TRANSFORM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_TRANSFORM, _impl_.gameobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_TRANSFORM, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_TRANSFORM, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_TRANSFORM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_TRANSFORM, _impl_.gameobjectid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_TRANSFORM, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_TRANSFORM, _impl_.rotation_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::Vector3)},
  { 9, -1, -1, sizeof(::Protocol::C_INSTANTIATE_GAME_OBJECT)},
  { 17, -1, -1, sizeof(::Protocol::S_INSTANTIATE_GAME_OBJECT)},
  { 25, -1, -1, sizeof(::Protocol::C_GET_GAME_OBJECT)},
  { 31, -1, -1, sizeof(::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo)},
  { 40, -1, -1, sizeof(::Protocol::S_ADD_GAME_OBJECT)},
  { 47, -1, -1, sizeof(::Protocol::S_REMOVE_GAME_OBJECT)},
  { 54, -1, -1, sizeof(::Protocol::C_SET_TRANSFORM)},
  { 63, -1, -1, sizeof(::Protocol::S_SET_TRANSFORM)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_Vector3_default_instance_._instance,
  &::Protocol::_C_INSTANTIATE_GAME_OBJECT_default_instance_._instance,
  &::Protocol::_S_INSTANTIATE_GAME_OBJECT_default_instance_._instance,
  &::Protocol::_C_GET_GAME_OBJECT_default_instance_._instance,
  &::Protocol::_S_ADD_GAME_OBJECT_GameObjectInfo_default_instance_._instance,
  &::Protocol::_S_ADD_GAME_OBJECT_default_instance_._instance,
  &::Protocol::_S_REMOVE_GAME_OBJECT_default_instance_._instance,
  &::Protocol::_C_SET_TRANSFORM_default_instance_._instance,
  &::Protocol::_S_SET_TRANSFORM_default_instance_._instance,
};

const char descriptor_table_protodef_Packet_5f001_5fGameObject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033Packet_001_GameObject.proto\022\010Protocol\""
  "*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 "
  "\001(\002\"e\n\031C_INSTANTIATE_GAME_OBJECT\022#\n\010posi"
  "tion\030\001 \001(\0132\021.Protocol.Vector3\022#\n\010rotatio"
  "n\030\002 \001(\0132\021.Protocol.Vector3\"B\n\031S_INSTANTI"
  "ATE_GAME_OBJECT\022\017\n\007success\030\001 \001(\010\022\024\n\014game"
  "ObjectId\030\002 \001(\005\"\023\n\021C_GET_GAME_OBJECT\"\274\001\n\021"
  "S_ADD_GAME_OBJECT\022\?\n\013gameObjects\030\001 \003(\0132*"
  ".Protocol.S_ADD_GAME_OBJECT.GameObjectIn"
  "fo\032f\n\016GameObjectInfo\022\n\n\002Id\030\001 \001(\005\022#\n\010posi"
  "tion\030\002 \001(\0132\021.Protocol.Vector3\022#\n\010rotatio"
  "n\030\003 \001(\0132\021.Protocol.Vector3\"+\n\024S_REMOVE_G"
  "AME_OBJECT\022\023\n\013gameObjects\030\001 \003(\005\"q\n\017C_SET"
  "_TRANSFORM\022\024\n\014gameObjectId\030\001 \001(\005\022#\n\010posi"
  "tion\030\002 \001(\0132\021.Protocol.Vector3\022#\n\010rotatio"
  "n\030\003 \001(\0132\021.Protocol.Vector3\"q\n\017S_SET_TRAN"
  "SFORM\022\024\n\014gameObjectId\030\001 \001(\005\022#\n\010position\030"
  "\002 \001(\0132\021.Protocol.Vector3\022#\n\010rotation\030\003 \001"
  "(\0132\021.Protocol.Vector3b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_Packet_5f001_5fGameObject_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Packet_5f001_5fGameObject_2eproto = {
    false, false, 749, descriptor_table_protodef_Packet_5f001_5fGameObject_2eproto,
    "Packet_001_GameObject.proto",
    &descriptor_table_Packet_5f001_5fGameObject_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_Packet_5f001_5fGameObject_2eproto::offsets,
    file_level_metadata_Packet_5f001_5fGameObject_2eproto, file_level_enum_descriptors_Packet_5f001_5fGameObject_2eproto,
    file_level_service_descriptors_Packet_5f001_5fGameObject_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Packet_5f001_5fGameObject_2eproto_getter() {
  return &descriptor_table_Packet_5f001_5fGameObject_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Packet_5f001_5fGameObject_2eproto(&descriptor_table_Packet_5f001_5fGameObject_2eproto);
namespace Protocol {

// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Vector3)
}

inline void Vector3::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:Protocol.Vector3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Vector3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }


void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Vector3)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fGameObject_2eproto_getter, &descriptor_table_Packet_5f001_5fGameObject_2eproto_once,
      file_level_metadata_Packet_5f001_5fGameObject_2eproto[0]);
}

// ===================================================================

class C_INSTANTIATE_GAME_OBJECT::_Internal {
 public:
  static const ::Protocol::Vector3& position(const C_INSTANTIATE_GAME_OBJECT* msg);
  static const ::Protocol::Vector3& rotation(const C_INSTANTIATE_GAME_OBJECT* msg);
};

const ::Protocol::Vector3&
C_INSTANTIATE_GAME_OBJECT::_Internal::position(const C_INSTANTIATE_GAME_OBJECT* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Vector3&
C_INSTANTIATE_GAME_OBJECT::_Internal::rotation(const C_INSTANTIATE_GAME_OBJECT* msg) {
  return *msg->_impl_.rotation_;
}
C_INSTANTIATE_GAME_OBJECT::C_INSTANTIATE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_INSTANTIATE_GAME_OBJECT)
}
C_INSTANTIATE_GAME_OBJECT::C_INSTANTIATE_GAME_OBJECT(const C_INSTANTIATE_GAME_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_INSTANTIATE_GAME_OBJECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::Vector3(*from._impl_.rotation_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_INSTANTIATE_GAME_OBJECT)
}

inline void C_INSTANTIATE_GAME_OBJECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_INSTANTIATE_GAME_OBJECT::~C_INSTANTIATE_GAME_OBJECT() {
  // @@protoc_insertion_point(destructor:Protocol.C_INSTANTIATE_GAME_OBJECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_INSTANTIATE_GAME_OBJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void C_INSTANTIATE_GAME_OBJECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_INSTANTIATE_GAME_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_INSTANTIATE_GAME_OBJECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_INSTANTIATE_GAME_OBJECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Vector3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_INSTANTIATE_GAME_OBJECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_INSTANTIATE_GAME_OBJECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_INSTANTIATE_GAME_OBJECT)
  return target;
}

size_t C_INSTANTIATE_GAME_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_INSTANTIATE_GAME_OBJECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Vector3 rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_INSTANTIATE_GAME_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_INSTANTIATE_GAME_OBJECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_INSTANTIATE_GAME_OBJECT::GetClassData() const { return &_class_data_; }


void C_INSTANTIATE_GAME_OBJECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_INSTANTIATE_GAME_OBJECT*>(&to_msg);
  auto& from = static_cast<const C_INSTANTIATE_GAME_OBJECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_INSTANTIATE_GAME_OBJECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::Vector3::MergeFrom(
        from._internal_rotation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_INSTANTIATE_GAME_OBJECT::CopyFrom(const C_INSTANTIATE_GAME_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_INSTANTIATE_GAME_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_INSTANTIATE_GAME_OBJECT::IsInitialized() const {
  return true;
}

void C_INSTANTIATE_GAME_OBJECT::InternalSwap(C_INSTANTIATE_GAME_OBJECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_INSTANTIATE_GAME_OBJECT, _impl_.rotation_)
      + sizeof(C_INSTANTIATE_GAME_OBJECT::_impl_.rotation_)
      - PROTOBUF_FIELD_OFFSET(C_INSTANTIATE_GAME_OBJECT, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_INSTANTIATE_GAME_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fGameObject_2eproto_getter, &descriptor_table_Packet_5f001_5fGameObject_2eproto_once,
      file_level_metadata_Packet_5f001_5fGameObject_2eproto[1]);
}

// ===================================================================

class S_INSTANTIATE_GAME_OBJECT::_Internal {
 public:
};

S_INSTANTIATE_GAME_OBJECT::S_INSTANTIATE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_INSTANTIATE_GAME_OBJECT)
}
S_INSTANTIATE_GAME_OBJECT::S_INSTANTIATE_GAME_OBJECT(const S_INSTANTIATE_GAME_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_INSTANTIATE_GAME_OBJECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , decltype(_impl_.gameobjectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gameobjectid_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.gameobjectid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_INSTANTIATE_GAME_OBJECT)
}

inline void S_INSTANTIATE_GAME_OBJECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , decltype(_impl_.gameobjectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_INSTANTIATE_GAME_OBJECT::~S_INSTANTIATE_GAME_OBJECT() {
  // @@protoc_insertion_point(destructor:Protocol.S_INSTANTIATE_GAME_OBJECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_INSTANTIATE_GAME_OBJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_INSTANTIATE_GAME_OBJECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_INSTANTIATE_GAME_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_INSTANTIATE_GAME_OBJECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gameobjectid_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.gameobjectid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_INSTANTIATE_GAME_OBJECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 gameObjectId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.gameobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_INSTANTIATE_GAME_OBJECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_INSTANTIATE_GAME_OBJECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 gameObjectId = 2;
  if (this->_internal_gameobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_gameobjectid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_INSTANTIATE_GAME_OBJECT)
  return target;
}

size_t S_INSTANTIATE_GAME_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_INSTANTIATE_GAME_OBJECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // int32 gameObjectId = 2;
  if (this->_internal_gameobjectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gameobjectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_INSTANTIATE_GAME_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_INSTANTIATE_GAME_OBJECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_INSTANTIATE_GAME_OBJECT::GetClassData() const { return &_class_data_; }


void S_INSTANTIATE_GAME_OBJECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_INSTANTIATE_GAME_OBJECT*>(&to_msg);
  auto& from = static_cast<const S_INSTANTIATE_GAME_OBJECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_INSTANTIATE_GAME_OBJECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_gameobjectid() != 0) {
    _this->_internal_set_gameobjectid(from._internal_gameobjectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_INSTANTIATE_GAME_OBJECT::CopyFrom(const S_INSTANTIATE_GAME_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_INSTANTIATE_GAME_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_INSTANTIATE_GAME_OBJECT::IsInitialized() const {
  return true;
}

void S_INSTANTIATE_GAME_OBJECT::InternalSwap(S_INSTANTIATE_GAME_OBJECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_INSTANTIATE_GAME_OBJECT, _impl_.gameobjectid_)
      + sizeof(S_INSTANTIATE_GAME_OBJECT::_impl_.gameobjectid_)
      - PROTOBUF_FIELD_OFFSET(S_INSTANTIATE_GAME_OBJECT, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_INSTANTIATE_GAME_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fGameObject_2eproto_getter, &descriptor_table_Packet_5f001_5fGameObject_2eproto_once,
      file_level_metadata_Packet_5f001_5fGameObject_2eproto[2]);
}

// ===================================================================

class C_GET_GAME_OBJECT::_Internal {
 public:
};

C_GET_GAME_OBJECT::C_GET_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_GET_GAME_OBJECT)
}
C_GET_GAME_OBJECT::C_GET_GAME_OBJECT(const C_GET_GAME_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_GET_GAME_OBJECT* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_GET_GAME_OBJECT)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_GET_GAME_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_GET_GAME_OBJECT::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_GET_GAME_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fGameObject_2eproto_getter, &descriptor_table_Packet_5f001_5fGameObject_2eproto_once,
      file_level_metadata_Packet_5f001_5fGameObject_2eproto[3]);
}

// ===================================================================

class S_ADD_GAME_OBJECT_GameObjectInfo::_Internal {
 public:
  static const ::Protocol::Vector3& position(const S_ADD_GAME_OBJECT_GameObjectInfo* msg);
  static const ::Protocol::Vector3& rotation(const S_ADD_GAME_OBJECT_GameObjectInfo* msg);
};

const ::Protocol::Vector3&
S_ADD_GAME_OBJECT_GameObjectInfo::_Internal::position(const S_ADD_GAME_OBJECT_GameObjectInfo* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Vector3&
S_ADD_GAME_OBJECT_GameObjectInfo::_Internal::rotation(const S_ADD_GAME_OBJECT_GameObjectInfo* msg) {
  return *msg->_impl_.rotation_;
}
S_ADD_GAME_OBJECT_GameObjectInfo::S_ADD_GAME_OBJECT_GameObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo)
}
S_ADD_GAME_OBJECT_GameObjectInfo::S_ADD_GAME_OBJECT_GameObjectInfo(const S_ADD_GAME_OBJECT_GameObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ADD_GAME_OBJECT_GameObjectInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::Vector3(*from._impl_.rotation_);
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo)
}

inline void S_ADD_GAME_OBJECT_GameObjectInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ADD_GAME_OBJECT_GameObjectInfo::~S_ADD_GAME_OBJECT_GameObjectInfo() {
  // @@protoc_insertion_point(destructor:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ADD_GAME_OBJECT_GameObjectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void S_ADD_GAME_OBJECT_GameObjectInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ADD_GAME_OBJECT_GameObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ADD_GAME_OBJECT_GameObjectInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ADD_GAME_OBJECT_GameObjectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .Protocol.Vector3 position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 rotation = 3;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo)
  return target;
}

size_t S_ADD_GAME_OBJECT_GameObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Vector3 rotation = 3;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // int32 Id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ADD_GAME_OBJECT_GameObjectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ADD_GAME_OBJECT_GameObjectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ADD_GAME_OBJECT_GameObjectInfo::GetClassData() const { return &_class_data_; }


void S_ADD_GAME_OBJECT_GameObjectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ADD_GAME_OBJECT_GameObjectInfo*>(&to_msg);
  auto& from = static_cast<const S_ADD_GAME_OBJECT_GameObjectInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::Vector3::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ADD_GAME_OBJECT_GameObjectInfo::CopyFrom(const S_ADD_GAME_OBJECT_GameObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ADD_GAME_OBJECT_GameObjectInfo::IsInitialized() const {
  return true;
}

void S_ADD_GAME_OBJECT_GameObjectInfo::InternalSwap(S_ADD_GAME_OBJECT_GameObjectInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ADD_GAME_OBJECT_GameObjectInfo, _impl_.id_)
      + sizeof(S_ADD_GAME_OBJECT_GameObjectInfo::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(S_ADD_GAME_OBJECT_GameObjectInfo, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ADD_GAME_OBJECT_GameObjectInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fGameObject_2eproto_getter, &descriptor_table_Packet_5f001_5fGameObject_2eproto_once,
      file_level_metadata_Packet_5f001_5fGameObject_2eproto[4]);
}

// ===================================================================

class S_ADD_GAME_OBJECT::_Internal {
 public:
};

S_ADD_GAME_OBJECT::S_ADD_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ADD_GAME_OBJECT)
}
S_ADD_GAME_OBJECT::S_ADD_GAME_OBJECT(const S_ADD_GAME_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ADD_GAME_OBJECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gameobjects_){from._impl_.gameobjects_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ADD_GAME_OBJECT)
}

inline void S_ADD_GAME_OBJECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gameobjects_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ADD_GAME_OBJECT::~S_ADD_GAME_OBJECT() {
  // @@protoc_insertion_point(destructor:Protocol.S_ADD_GAME_OBJECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ADD_GAME_OBJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gameobjects_.~RepeatedPtrField();
}

void S_ADD_GAME_OBJECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ADD_GAME_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ADD_GAME_OBJECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gameobjects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ADD_GAME_OBJECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.S_ADD_GAME_OBJECT.GameObjectInfo gameObjects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gameobjects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ADD_GAME_OBJECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ADD_GAME_OBJECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.S_ADD_GAME_OBJECT.GameObjectInfo gameObjects = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gameobjects_size()); i < n; i++) {
    const auto& repfield = this->_internal_gameobjects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ADD_GAME_OBJECT)
  return target;
}

size_t S_ADD_GAME_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ADD_GAME_OBJECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.S_ADD_GAME_OBJECT.GameObjectInfo gameObjects = 1;
  total_size += 1UL * this->_internal_gameobjects_size();
  for (const auto& msg : this->_impl_.gameobjects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ADD_GAME_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ADD_GAME_OBJECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ADD_GAME_OBJECT::GetClassData() const { return &_class_data_; }


void S_ADD_GAME_OBJECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ADD_GAME_OBJECT*>(&to_msg);
  auto& from = static_cast<const S_ADD_GAME_OBJECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ADD_GAME_OBJECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gameobjects_.MergeFrom(from._impl_.gameobjects_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ADD_GAME_OBJECT::CopyFrom(const S_ADD_GAME_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ADD_GAME_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ADD_GAME_OBJECT::IsInitialized() const {
  return true;
}

void S_ADD_GAME_OBJECT::InternalSwap(S_ADD_GAME_OBJECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gameobjects_.InternalSwap(&other->_impl_.gameobjects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ADD_GAME_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fGameObject_2eproto_getter, &descriptor_table_Packet_5f001_5fGameObject_2eproto_once,
      file_level_metadata_Packet_5f001_5fGameObject_2eproto[5]);
}

// ===================================================================

class S_REMOVE_GAME_OBJECT::_Internal {
 public:
};

S_REMOVE_GAME_OBJECT::S_REMOVE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_REMOVE_GAME_OBJECT)
}
S_REMOVE_GAME_OBJECT::S_REMOVE_GAME_OBJECT(const S_REMOVE_GAME_OBJECT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_REMOVE_GAME_OBJECT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gameobjects_){from._impl_.gameobjects_}
    , /*decltype(_impl_._gameobjects_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_REMOVE_GAME_OBJECT)
}

inline void S_REMOVE_GAME_OBJECT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gameobjects_){arena}
    , /*decltype(_impl_._gameobjects_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_REMOVE_GAME_OBJECT::~S_REMOVE_GAME_OBJECT() {
  // @@protoc_insertion_point(destructor:Protocol.S_REMOVE_GAME_OBJECT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_REMOVE_GAME_OBJECT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gameobjects_.~RepeatedField();
}

void S_REMOVE_GAME_OBJECT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_REMOVE_GAME_OBJECT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_REMOVE_GAME_OBJECT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gameobjects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_REMOVE_GAME_OBJECT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 gameObjects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_gameobjects(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_gameobjects(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_REMOVE_GAME_OBJECT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_REMOVE_GAME_OBJECT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 gameObjects = 1;
  {
    int byte_size = _impl_._gameobjects_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_gameobjects(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_REMOVE_GAME_OBJECT)
  return target;
}

size_t S_REMOVE_GAME_OBJECT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_REMOVE_GAME_OBJECT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 gameObjects = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.gameobjects_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._gameobjects_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_REMOVE_GAME_OBJECT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_REMOVE_GAME_OBJECT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_REMOVE_GAME_OBJECT::GetClassData() const { return &_class_data_; }


void S_REMOVE_GAME_OBJECT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_REMOVE_GAME_OBJECT*>(&to_msg);
  auto& from = static_cast<const S_REMOVE_GAME_OBJECT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_REMOVE_GAME_OBJECT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gameobjects_.MergeFrom(from._impl_.gameobjects_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_REMOVE_GAME_OBJECT::CopyFrom(const S_REMOVE_GAME_OBJECT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_REMOVE_GAME_OBJECT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_REMOVE_GAME_OBJECT::IsInitialized() const {
  return true;
}

void S_REMOVE_GAME_OBJECT::InternalSwap(S_REMOVE_GAME_OBJECT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gameobjects_.InternalSwap(&other->_impl_.gameobjects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_REMOVE_GAME_OBJECT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fGameObject_2eproto_getter, &descriptor_table_Packet_5f001_5fGameObject_2eproto_once,
      file_level_metadata_Packet_5f001_5fGameObject_2eproto[6]);
}

// ===================================================================

class C_SET_TRANSFORM::_Internal {
 public:
  static const ::Protocol::Vector3& position(const C_SET_TRANSFORM* msg);
  static const ::Protocol::Vector3& rotation(const C_SET_TRANSFORM* msg);
};

const ::Protocol::Vector3&
C_SET_TRANSFORM::_Internal::position(const C_SET_TRANSFORM* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Vector3&
C_SET_TRANSFORM::_Internal::rotation(const C_SET_TRANSFORM* msg) {
  return *msg->_impl_.rotation_;
}
C_SET_TRANSFORM::C_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SET_TRANSFORM)
}
C_SET_TRANSFORM::C_SET_TRANSFORM(const C_SET_TRANSFORM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SET_TRANSFORM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.gameobjectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::Vector3(*from._impl_.rotation_);
  }
  _this->_impl_.gameobjectid_ = from._impl_.gameobjectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SET_TRANSFORM)
}

inline void C_SET_TRANSFORM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.gameobjectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SET_TRANSFORM::~C_SET_TRANSFORM() {
  // @@protoc_insertion_point(destructor:Protocol.C_SET_TRANSFORM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SET_TRANSFORM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void C_SET_TRANSFORM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SET_TRANSFORM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SET_TRANSFORM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _impl_.gameobjectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SET_TRANSFORM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gameObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gameobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SET_TRANSFORM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SET_TRANSFORM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameObjectId = 1;
  if (this->_internal_gameobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameobjectid(), target);
  }

  // .Protocol.Vector3 position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 rotation = 3;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SET_TRANSFORM)
  return target;
}

size_t C_SET_TRANSFORM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SET_TRANSFORM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Vector3 rotation = 3;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // int32 gameObjectId = 1;
  if (this->_internal_gameobjectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gameobjectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SET_TRANSFORM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SET_TRANSFORM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SET_TRANSFORM::GetClassData() const { return &_class_data_; }


void C_SET_TRANSFORM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SET_TRANSFORM*>(&to_msg);
  auto& from = static_cast<const C_SET_TRANSFORM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SET_TRANSFORM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::Vector3::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_gameobjectid() != 0) {
    _this->_internal_set_gameobjectid(from._internal_gameobjectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SET_TRANSFORM::CopyFrom(const C_SET_TRANSFORM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SET_TRANSFORM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SET_TRANSFORM::IsInitialized() const {
  return true;
}

void C_SET_TRANSFORM::InternalSwap(C_SET_TRANSFORM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_SET_TRANSFORM, _impl_.gameobjectid_)
      + sizeof(C_SET_TRANSFORM::_impl_.gameobjectid_)
      - PROTOBUF_FIELD_OFFSET(C_SET_TRANSFORM, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SET_TRANSFORM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fGameObject_2eproto_getter, &descriptor_table_Packet_5f001_5fGameObject_2eproto_once,
      file_level_metadata_Packet_5f001_5fGameObject_2eproto[7]);
}

// ===================================================================

class S_SET_TRANSFORM::_Internal {
 public:
  static const ::Protocol::Vector3& position(const S_SET_TRANSFORM* msg);
  static const ::Protocol::Vector3& rotation(const S_SET_TRANSFORM* msg);
};

const ::Protocol::Vector3&
S_SET_TRANSFORM::_Internal::position(const S_SET_TRANSFORM* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Vector3&
S_SET_TRANSFORM::_Internal::rotation(const S_SET_TRANSFORM* msg) {
  return *msg->_impl_.rotation_;
}
S_SET_TRANSFORM::S_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SET_TRANSFORM)
}
S_SET_TRANSFORM::S_SET_TRANSFORM(const S_SET_TRANSFORM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SET_TRANSFORM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.gameobjectid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::Vector3(*from._impl_.rotation_);
  }
  _this->_impl_.gameobjectid_ = from._impl_.gameobjectid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SET_TRANSFORM)
}

inline void S_SET_TRANSFORM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.gameobjectid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SET_TRANSFORM::~S_SET_TRANSFORM() {
  // @@protoc_insertion_point(destructor:Protocol.S_SET_TRANSFORM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SET_TRANSFORM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void S_SET_TRANSFORM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SET_TRANSFORM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SET_TRANSFORM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _impl_.gameobjectid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SET_TRANSFORM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gameObjectId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gameobjectid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 rotation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SET_TRANSFORM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SET_TRANSFORM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gameObjectId = 1;
  if (this->_internal_gameobjectid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gameobjectid(), target);
  }

  // .Protocol.Vector3 position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 rotation = 3;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SET_TRANSFORM)
  return target;
}

size_t S_SET_TRANSFORM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SET_TRANSFORM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Vector3 rotation = 3;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // int32 gameObjectId = 1;
  if (this->_internal_gameobjectid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gameobjectid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SET_TRANSFORM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SET_TRANSFORM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SET_TRANSFORM::GetClassData() const { return &_class_data_; }


void S_SET_TRANSFORM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SET_TRANSFORM*>(&to_msg);
  auto& from = static_cast<const S_SET_TRANSFORM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SET_TRANSFORM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::Vector3::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_gameobjectid() != 0) {
    _this->_internal_set_gameobjectid(from._internal_gameobjectid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SET_TRANSFORM::CopyFrom(const S_SET_TRANSFORM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SET_TRANSFORM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SET_TRANSFORM::IsInitialized() const {
  return true;
}

void S_SET_TRANSFORM::InternalSwap(S_SET_TRANSFORM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SET_TRANSFORM, _impl_.gameobjectid_)
      + sizeof(S_SET_TRANSFORM::_impl_.gameobjectid_)
      - PROTOBUF_FIELD_OFFSET(S_SET_TRANSFORM, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SET_TRANSFORM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f001_5fGameObject_2eproto_getter, &descriptor_table_Packet_5f001_5fGameObject_2eproto_once,
      file_level_metadata_Packet_5f001_5fGameObject_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::Vector3*
Arena::CreateMaybeMessage< ::Protocol::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_INSTANTIATE_GAME_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::C_INSTANTIATE_GAME_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_INSTANTIATE_GAME_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_INSTANTIATE_GAME_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::S_INSTANTIATE_GAME_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_INSTANTIATE_GAME_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_GET_GAME_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::C_GET_GAME_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_GET_GAME_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo*
Arena::CreateMaybeMessage< ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ADD_GAME_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::S_ADD_GAME_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ADD_GAME_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_REMOVE_GAME_OBJECT*
Arena::CreateMaybeMessage< ::Protocol::S_REMOVE_GAME_OBJECT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_REMOVE_GAME_OBJECT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SET_TRANSFORM*
Arena::CreateMaybeMessage< ::Protocol::C_SET_TRANSFORM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SET_TRANSFORM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SET_TRANSFORM*
Arena::CreateMaybeMessage< ::Protocol::S_SET_TRANSFORM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SET_TRANSFORM >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
