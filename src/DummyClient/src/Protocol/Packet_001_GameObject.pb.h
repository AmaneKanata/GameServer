// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_001_GameObject.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_5f001_5fGameObject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_5f001_5fGameObject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_5f001_5fGameObject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_5f001_5fGameObject_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_5f001_5fGameObject_2eproto;
namespace Protocol {
class C_GET_GAME_OBJECT;
struct C_GET_GAME_OBJECTDefaultTypeInternal;
extern C_GET_GAME_OBJECTDefaultTypeInternal _C_GET_GAME_OBJECT_default_instance_;
class C_INSTANTIATE_GAME_OBJECT;
struct C_INSTANTIATE_GAME_OBJECTDefaultTypeInternal;
extern C_INSTANTIATE_GAME_OBJECTDefaultTypeInternal _C_INSTANTIATE_GAME_OBJECT_default_instance_;
class C_SET_TRANSFORM;
struct C_SET_TRANSFORMDefaultTypeInternal;
extern C_SET_TRANSFORMDefaultTypeInternal _C_SET_TRANSFORM_default_instance_;
class S_ADD_GAME_OBJECT;
struct S_ADD_GAME_OBJECTDefaultTypeInternal;
extern S_ADD_GAME_OBJECTDefaultTypeInternal _S_ADD_GAME_OBJECT_default_instance_;
class S_ADD_GAME_OBJECT_GameObjectInfo;
struct S_ADD_GAME_OBJECT_GameObjectInfoDefaultTypeInternal;
extern S_ADD_GAME_OBJECT_GameObjectInfoDefaultTypeInternal _S_ADD_GAME_OBJECT_GameObjectInfo_default_instance_;
class S_INSTANTIATE_GAME_OBJECT;
struct S_INSTANTIATE_GAME_OBJECTDefaultTypeInternal;
extern S_INSTANTIATE_GAME_OBJECTDefaultTypeInternal _S_INSTANTIATE_GAME_OBJECT_default_instance_;
class S_REMOVE_GAME_OBJECT;
struct S_REMOVE_GAME_OBJECTDefaultTypeInternal;
extern S_REMOVE_GAME_OBJECTDefaultTypeInternal _S_REMOVE_GAME_OBJECT_default_instance_;
class S_SET_TRANSFORM;
struct S_SET_TRANSFORMDefaultTypeInternal;
extern S_SET_TRANSFORMDefaultTypeInternal _S_SET_TRANSFORM_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_GET_GAME_OBJECT* Arena::CreateMaybeMessage<::Protocol::C_GET_GAME_OBJECT>(Arena*);
template<> ::Protocol::C_INSTANTIATE_GAME_OBJECT* Arena::CreateMaybeMessage<::Protocol::C_INSTANTIATE_GAME_OBJECT>(Arena*);
template<> ::Protocol::C_SET_TRANSFORM* Arena::CreateMaybeMessage<::Protocol::C_SET_TRANSFORM>(Arena*);
template<> ::Protocol::S_ADD_GAME_OBJECT* Arena::CreateMaybeMessage<::Protocol::S_ADD_GAME_OBJECT>(Arena*);
template<> ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* Arena::CreateMaybeMessage<::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo>(Arena*);
template<> ::Protocol::S_INSTANTIATE_GAME_OBJECT* Arena::CreateMaybeMessage<::Protocol::S_INSTANTIATE_GAME_OBJECT>(Arena*);
template<> ::Protocol::S_REMOVE_GAME_OBJECT* Arena::CreateMaybeMessage<::Protocol::S_REMOVE_GAME_OBJECT>(Arena*);
template<> ::Protocol::S_SET_TRANSFORM* Arena::CreateMaybeMessage<::Protocol::S_SET_TRANSFORM>(Arena*);
template<> ::Protocol::Vector3* Arena::CreateMaybeMessage<::Protocol::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class C_INSTANTIATE_GAME_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_INSTANTIATE_GAME_OBJECT) */ {
 public:
  inline C_INSTANTIATE_GAME_OBJECT() : C_INSTANTIATE_GAME_OBJECT(nullptr) {}
  ~C_INSTANTIATE_GAME_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR C_INSTANTIATE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_INSTANTIATE_GAME_OBJECT(const C_INSTANTIATE_GAME_OBJECT& from);
  C_INSTANTIATE_GAME_OBJECT(C_INSTANTIATE_GAME_OBJECT&& from) noexcept
    : C_INSTANTIATE_GAME_OBJECT() {
    *this = ::std::move(from);
  }

  inline C_INSTANTIATE_GAME_OBJECT& operator=(const C_INSTANTIATE_GAME_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_INSTANTIATE_GAME_OBJECT& operator=(C_INSTANTIATE_GAME_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_INSTANTIATE_GAME_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_INSTANTIATE_GAME_OBJECT* internal_default_instance() {
    return reinterpret_cast<const C_INSTANTIATE_GAME_OBJECT*>(
               &_C_INSTANTIATE_GAME_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_INSTANTIATE_GAME_OBJECT& a, C_INSTANTIATE_GAME_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_INSTANTIATE_GAME_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_INSTANTIATE_GAME_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_INSTANTIATE_GAME_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_INSTANTIATE_GAME_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_INSTANTIATE_GAME_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_INSTANTIATE_GAME_OBJECT& from) {
    C_INSTANTIATE_GAME_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_INSTANTIATE_GAME_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_INSTANTIATE_GAME_OBJECT";
  }
  protected:
  explicit C_INSTANTIATE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .Protocol.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:Protocol.C_INSTANTIATE_GAME_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_INSTANTIATE_GAME_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_INSTANTIATE_GAME_OBJECT) */ {
 public:
  inline S_INSTANTIATE_GAME_OBJECT() : S_INSTANTIATE_GAME_OBJECT(nullptr) {}
  ~S_INSTANTIATE_GAME_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR S_INSTANTIATE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_INSTANTIATE_GAME_OBJECT(const S_INSTANTIATE_GAME_OBJECT& from);
  S_INSTANTIATE_GAME_OBJECT(S_INSTANTIATE_GAME_OBJECT&& from) noexcept
    : S_INSTANTIATE_GAME_OBJECT() {
    *this = ::std::move(from);
  }

  inline S_INSTANTIATE_GAME_OBJECT& operator=(const S_INSTANTIATE_GAME_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_INSTANTIATE_GAME_OBJECT& operator=(S_INSTANTIATE_GAME_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_INSTANTIATE_GAME_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_INSTANTIATE_GAME_OBJECT* internal_default_instance() {
    return reinterpret_cast<const S_INSTANTIATE_GAME_OBJECT*>(
               &_S_INSTANTIATE_GAME_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_INSTANTIATE_GAME_OBJECT& a, S_INSTANTIATE_GAME_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_INSTANTIATE_GAME_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_INSTANTIATE_GAME_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_INSTANTIATE_GAME_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_INSTANTIATE_GAME_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_INSTANTIATE_GAME_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_INSTANTIATE_GAME_OBJECT& from) {
    S_INSTANTIATE_GAME_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_INSTANTIATE_GAME_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_INSTANTIATE_GAME_OBJECT";
  }
  protected:
  explicit S_INSTANTIATE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kGameObjectIdFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 gameObjectId = 2;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_INSTANTIATE_GAME_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class C_GET_GAME_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_GET_GAME_OBJECT) */ {
 public:
  inline C_GET_GAME_OBJECT() : C_GET_GAME_OBJECT(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_GET_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_GET_GAME_OBJECT(const C_GET_GAME_OBJECT& from);
  C_GET_GAME_OBJECT(C_GET_GAME_OBJECT&& from) noexcept
    : C_GET_GAME_OBJECT() {
    *this = ::std::move(from);
  }

  inline C_GET_GAME_OBJECT& operator=(const C_GET_GAME_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_GET_GAME_OBJECT& operator=(C_GET_GAME_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_GET_GAME_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_GET_GAME_OBJECT* internal_default_instance() {
    return reinterpret_cast<const C_GET_GAME_OBJECT*>(
               &_C_GET_GAME_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_GET_GAME_OBJECT& a, C_GET_GAME_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_GET_GAME_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_GET_GAME_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_GET_GAME_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_GET_GAME_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_GET_GAME_OBJECT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_GET_GAME_OBJECT& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_GET_GAME_OBJECT";
  }
  protected:
  explicit C_GET_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_GET_GAME_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_ADD_GAME_OBJECT_GameObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo) */ {
 public:
  inline S_ADD_GAME_OBJECT_GameObjectInfo() : S_ADD_GAME_OBJECT_GameObjectInfo(nullptr) {}
  ~S_ADD_GAME_OBJECT_GameObjectInfo() override;
  explicit PROTOBUF_CONSTEXPR S_ADD_GAME_OBJECT_GameObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ADD_GAME_OBJECT_GameObjectInfo(const S_ADD_GAME_OBJECT_GameObjectInfo& from);
  S_ADD_GAME_OBJECT_GameObjectInfo(S_ADD_GAME_OBJECT_GameObjectInfo&& from) noexcept
    : S_ADD_GAME_OBJECT_GameObjectInfo() {
    *this = ::std::move(from);
  }

  inline S_ADD_GAME_OBJECT_GameObjectInfo& operator=(const S_ADD_GAME_OBJECT_GameObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ADD_GAME_OBJECT_GameObjectInfo& operator=(S_ADD_GAME_OBJECT_GameObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ADD_GAME_OBJECT_GameObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ADD_GAME_OBJECT_GameObjectInfo* internal_default_instance() {
    return reinterpret_cast<const S_ADD_GAME_OBJECT_GameObjectInfo*>(
               &_S_ADD_GAME_OBJECT_GameObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_ADD_GAME_OBJECT_GameObjectInfo& a, S_ADD_GAME_OBJECT_GameObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ADD_GAME_OBJECT_GameObjectInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ADD_GAME_OBJECT_GameObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ADD_GAME_OBJECT_GameObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ADD_GAME_OBJECT_GameObjectInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ADD_GAME_OBJECT_GameObjectInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ADD_GAME_OBJECT_GameObjectInfo& from) {
    S_ADD_GAME_OBJECT_GameObjectInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ADD_GAME_OBJECT_GameObjectInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ADD_GAME_OBJECT.GameObjectInfo";
  }
  protected:
  explicit S_ADD_GAME_OBJECT_GameObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // .Protocol.Vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // int32 Id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* rotation_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_ADD_GAME_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ADD_GAME_OBJECT) */ {
 public:
  inline S_ADD_GAME_OBJECT() : S_ADD_GAME_OBJECT(nullptr) {}
  ~S_ADD_GAME_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR S_ADD_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ADD_GAME_OBJECT(const S_ADD_GAME_OBJECT& from);
  S_ADD_GAME_OBJECT(S_ADD_GAME_OBJECT&& from) noexcept
    : S_ADD_GAME_OBJECT() {
    *this = ::std::move(from);
  }

  inline S_ADD_GAME_OBJECT& operator=(const S_ADD_GAME_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ADD_GAME_OBJECT& operator=(S_ADD_GAME_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ADD_GAME_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ADD_GAME_OBJECT* internal_default_instance() {
    return reinterpret_cast<const S_ADD_GAME_OBJECT*>(
               &_S_ADD_GAME_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_ADD_GAME_OBJECT& a, S_ADD_GAME_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ADD_GAME_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ADD_GAME_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ADD_GAME_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ADD_GAME_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ADD_GAME_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ADD_GAME_OBJECT& from) {
    S_ADD_GAME_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ADD_GAME_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ADD_GAME_OBJECT";
  }
  protected:
  explicit S_ADD_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef S_ADD_GAME_OBJECT_GameObjectInfo GameObjectInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kGameObjectsFieldNumber = 1,
  };
  // repeated .Protocol.S_ADD_GAME_OBJECT.GameObjectInfo gameObjects = 1;
  int gameobjects_size() const;
  private:
  int _internal_gameobjects_size() const;
  public:
  void clear_gameobjects();
  ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* mutable_gameobjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo >*
      mutable_gameobjects();
  private:
  const ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo& _internal_gameobjects(int index) const;
  ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* _internal_add_gameobjects();
  public:
  const ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo& gameobjects(int index) const;
  ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* add_gameobjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo >&
      gameobjects() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_ADD_GAME_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo > gameobjects_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_REMOVE_GAME_OBJECT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_REMOVE_GAME_OBJECT) */ {
 public:
  inline S_REMOVE_GAME_OBJECT() : S_REMOVE_GAME_OBJECT(nullptr) {}
  ~S_REMOVE_GAME_OBJECT() override;
  explicit PROTOBUF_CONSTEXPR S_REMOVE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_REMOVE_GAME_OBJECT(const S_REMOVE_GAME_OBJECT& from);
  S_REMOVE_GAME_OBJECT(S_REMOVE_GAME_OBJECT&& from) noexcept
    : S_REMOVE_GAME_OBJECT() {
    *this = ::std::move(from);
  }

  inline S_REMOVE_GAME_OBJECT& operator=(const S_REMOVE_GAME_OBJECT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_REMOVE_GAME_OBJECT& operator=(S_REMOVE_GAME_OBJECT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_REMOVE_GAME_OBJECT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_REMOVE_GAME_OBJECT* internal_default_instance() {
    return reinterpret_cast<const S_REMOVE_GAME_OBJECT*>(
               &_S_REMOVE_GAME_OBJECT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_REMOVE_GAME_OBJECT& a, S_REMOVE_GAME_OBJECT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_REMOVE_GAME_OBJECT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_REMOVE_GAME_OBJECT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_REMOVE_GAME_OBJECT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_REMOVE_GAME_OBJECT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_REMOVE_GAME_OBJECT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_REMOVE_GAME_OBJECT& from) {
    S_REMOVE_GAME_OBJECT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_REMOVE_GAME_OBJECT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_REMOVE_GAME_OBJECT";
  }
  protected:
  explicit S_REMOVE_GAME_OBJECT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameObjectsFieldNumber = 1,
  };
  // repeated int32 gameObjects = 1;
  int gameobjects_size() const;
  private:
  int _internal_gameobjects_size() const;
  public:
  void clear_gameobjects();
  private:
  int32_t _internal_gameobjects(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_gameobjects() const;
  void _internal_add_gameobjects(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_gameobjects();
  public:
  int32_t gameobjects(int index) const;
  void set_gameobjects(int index, int32_t value);
  void add_gameobjects(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      gameobjects() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_gameobjects();

  // @@protoc_insertion_point(class_scope:Protocol.S_REMOVE_GAME_OBJECT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > gameobjects_;
    mutable std::atomic<int> _gameobjects_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class C_SET_TRANSFORM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SET_TRANSFORM) */ {
 public:
  inline C_SET_TRANSFORM() : C_SET_TRANSFORM(nullptr) {}
  ~C_SET_TRANSFORM() override;
  explicit PROTOBUF_CONSTEXPR C_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SET_TRANSFORM(const C_SET_TRANSFORM& from);
  C_SET_TRANSFORM(C_SET_TRANSFORM&& from) noexcept
    : C_SET_TRANSFORM() {
    *this = ::std::move(from);
  }

  inline C_SET_TRANSFORM& operator=(const C_SET_TRANSFORM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SET_TRANSFORM& operator=(C_SET_TRANSFORM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SET_TRANSFORM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SET_TRANSFORM* internal_default_instance() {
    return reinterpret_cast<const C_SET_TRANSFORM*>(
               &_C_SET_TRANSFORM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_SET_TRANSFORM& a, C_SET_TRANSFORM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SET_TRANSFORM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SET_TRANSFORM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_SET_TRANSFORM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_SET_TRANSFORM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_SET_TRANSFORM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_SET_TRANSFORM& from) {
    C_SET_TRANSFORM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SET_TRANSFORM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SET_TRANSFORM";
  }
  protected:
  explicit C_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kGameObjectIdFieldNumber = 1,
  };
  // .Protocol.Vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // int32 gameObjectId = 1;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SET_TRANSFORM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* rotation_;
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// -------------------------------------------------------------------

class S_SET_TRANSFORM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SET_TRANSFORM) */ {
 public:
  inline S_SET_TRANSFORM() : S_SET_TRANSFORM(nullptr) {}
  ~S_SET_TRANSFORM() override;
  explicit PROTOBUF_CONSTEXPR S_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SET_TRANSFORM(const S_SET_TRANSFORM& from);
  S_SET_TRANSFORM(S_SET_TRANSFORM&& from) noexcept
    : S_SET_TRANSFORM() {
    *this = ::std::move(from);
  }

  inline S_SET_TRANSFORM& operator=(const S_SET_TRANSFORM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SET_TRANSFORM& operator=(S_SET_TRANSFORM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SET_TRANSFORM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SET_TRANSFORM* internal_default_instance() {
    return reinterpret_cast<const S_SET_TRANSFORM*>(
               &_S_SET_TRANSFORM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_SET_TRANSFORM& a, S_SET_TRANSFORM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SET_TRANSFORM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SET_TRANSFORM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SET_TRANSFORM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SET_TRANSFORM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SET_TRANSFORM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SET_TRANSFORM& from) {
    S_SET_TRANSFORM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SET_TRANSFORM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SET_TRANSFORM";
  }
  protected:
  explicit S_SET_TRANSFORM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kRotationFieldNumber = 3,
    kGameObjectIdFieldNumber = 1,
  };
  // .Protocol.Vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 rotation = 3;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Vector3& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_rotation();
  ::Protocol::Vector3* mutable_rotation();
  void set_allocated_rotation(::Protocol::Vector3* rotation);
  private:
  const ::Protocol::Vector3& _internal_rotation() const;
  ::Protocol::Vector3* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Vector3* rotation);
  ::Protocol::Vector3* unsafe_arena_release_rotation();

  // int32 gameObjectId = 1;
  void clear_gameobjectid();
  int32_t gameobjectid() const;
  void set_gameobjectid(int32_t value);
  private:
  int32_t _internal_gameobjectid() const;
  void _internal_set_gameobjectid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SET_TRANSFORM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* rotation_;
    int32_t gameobjectid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f001_5fGameObject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Vector3.z)
}

// -------------------------------------------------------------------

// C_INSTANTIATE_GAME_OBJECT

// .Protocol.Vector3 position = 1;
inline bool C_INSTANTIATE_GAME_OBJECT::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_INSTANTIATE_GAME_OBJECT::has_position() const {
  return _internal_has_position();
}
inline void C_INSTANTIATE_GAME_OBJECT::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& C_INSTANTIATE_GAME_OBJECT::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_INSTANTIATE_GAME_OBJECT::position() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INSTANTIATE_GAME_OBJECT.position)
  return _internal_position();
}
inline void C_INSTANTIATE_GAME_OBJECT::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_INSTANTIATE_GAME_OBJECT.position)
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.C_INSTANTIATE_GAME_OBJECT.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.C_INSTANTIATE_GAME_OBJECT.position)
  return _msg;
}
inline void C_INSTANTIATE_GAME_OBJECT::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_INSTANTIATE_GAME_OBJECT.position)
}

// .Protocol.Vector3 rotation = 2;
inline bool C_INSTANTIATE_GAME_OBJECT::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool C_INSTANTIATE_GAME_OBJECT::has_rotation() const {
  return _internal_has_rotation();
}
inline void C_INSTANTIATE_GAME_OBJECT::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& C_INSTANTIATE_GAME_OBJECT::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_INSTANTIATE_GAME_OBJECT::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INSTANTIATE_GAME_OBJECT.rotation)
  return _internal_rotation();
}
inline void C_INSTANTIATE_GAME_OBJECT::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_INSTANTIATE_GAME_OBJECT.rotation)
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.C_INSTANTIATE_GAME_OBJECT.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* C_INSTANTIATE_GAME_OBJECT::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.C_INSTANTIATE_GAME_OBJECT.rotation)
  return _msg;
}
inline void C_INSTANTIATE_GAME_OBJECT::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_INSTANTIATE_GAME_OBJECT.rotation)
}

// -------------------------------------------------------------------

// S_INSTANTIATE_GAME_OBJECT

// bool success = 1;
inline void S_INSTANTIATE_GAME_OBJECT::clear_success() {
  _impl_.success_ = false;
}
inline bool S_INSTANTIATE_GAME_OBJECT::_internal_success() const {
  return _impl_.success_;
}
inline bool S_INSTANTIATE_GAME_OBJECT::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INSTANTIATE_GAME_OBJECT.success)
  return _internal_success();
}
inline void S_INSTANTIATE_GAME_OBJECT::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_INSTANTIATE_GAME_OBJECT::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_INSTANTIATE_GAME_OBJECT.success)
}

// int32 gameObjectId = 2;
inline void S_INSTANTIATE_GAME_OBJECT::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t S_INSTANTIATE_GAME_OBJECT::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t S_INSTANTIATE_GAME_OBJECT::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INSTANTIATE_GAME_OBJECT.gameObjectId)
  return _internal_gameobjectid();
}
inline void S_INSTANTIATE_GAME_OBJECT::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void S_INSTANTIATE_GAME_OBJECT::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_INSTANTIATE_GAME_OBJECT.gameObjectId)
}

// -------------------------------------------------------------------

// C_GET_GAME_OBJECT

// -------------------------------------------------------------------

// S_ADD_GAME_OBJECT_GameObjectInfo

// int32 Id = 1;
inline void S_ADD_GAME_OBJECT_GameObjectInfo::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t S_ADD_GAME_OBJECT_GameObjectInfo::_internal_id() const {
  return _impl_.id_;
}
inline int32_t S_ADD_GAME_OBJECT_GameObjectInfo::id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.Id)
  return _internal_id();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.Id)
}

// .Protocol.Vector3 position = 2;
inline bool S_ADD_GAME_OBJECT_GameObjectInfo::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_ADD_GAME_OBJECT_GameObjectInfo::has_position() const {
  return _internal_has_position();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& S_ADD_GAME_OBJECT_GameObjectInfo::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_ADD_GAME_OBJECT_GameObjectInfo::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.position)
  return _internal_position();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.position)
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.position)
  return _msg;
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.position)
}

// .Protocol.Vector3 rotation = 3;
inline bool S_ADD_GAME_OBJECT_GameObjectInfo::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S_ADD_GAME_OBJECT_GameObjectInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& S_ADD_GAME_OBJECT_GameObjectInfo::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_ADD_GAME_OBJECT_GameObjectInfo::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.rotation)
  return _internal_rotation();
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.rotation)
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* S_ADD_GAME_OBJECT_GameObjectInfo::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.rotation)
  return _msg;
}
inline void S_ADD_GAME_OBJECT_GameObjectInfo::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ADD_GAME_OBJECT.GameObjectInfo.rotation)
}

// -------------------------------------------------------------------

// S_ADD_GAME_OBJECT

// repeated .Protocol.S_ADD_GAME_OBJECT.GameObjectInfo gameObjects = 1;
inline int S_ADD_GAME_OBJECT::_internal_gameobjects_size() const {
  return _impl_.gameobjects_.size();
}
inline int S_ADD_GAME_OBJECT::gameobjects_size() const {
  return _internal_gameobjects_size();
}
inline void S_ADD_GAME_OBJECT::clear_gameobjects() {
  _impl_.gameobjects_.Clear();
}
inline ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* S_ADD_GAME_OBJECT::mutable_gameobjects(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_GAME_OBJECT.gameObjects)
  return _impl_.gameobjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo >*
S_ADD_GAME_OBJECT::mutable_gameobjects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_ADD_GAME_OBJECT.gameObjects)
  return &_impl_.gameobjects_;
}
inline const ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo& S_ADD_GAME_OBJECT::_internal_gameobjects(int index) const {
  return _impl_.gameobjects_.Get(index);
}
inline const ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo& S_ADD_GAME_OBJECT::gameobjects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_GAME_OBJECT.gameObjects)
  return _internal_gameobjects(index);
}
inline ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* S_ADD_GAME_OBJECT::_internal_add_gameobjects() {
  return _impl_.gameobjects_.Add();
}
inline ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* S_ADD_GAME_OBJECT::add_gameobjects() {
  ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo* _add = _internal_add_gameobjects();
  // @@protoc_insertion_point(field_add:Protocol.S_ADD_GAME_OBJECT.gameObjects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_ADD_GAME_OBJECT_GameObjectInfo >&
S_ADD_GAME_OBJECT::gameobjects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_ADD_GAME_OBJECT.gameObjects)
  return _impl_.gameobjects_;
}

// -------------------------------------------------------------------

// S_REMOVE_GAME_OBJECT

// repeated int32 gameObjects = 1;
inline int S_REMOVE_GAME_OBJECT::_internal_gameobjects_size() const {
  return _impl_.gameobjects_.size();
}
inline int S_REMOVE_GAME_OBJECT::gameobjects_size() const {
  return _internal_gameobjects_size();
}
inline void S_REMOVE_GAME_OBJECT::clear_gameobjects() {
  _impl_.gameobjects_.Clear();
}
inline int32_t S_REMOVE_GAME_OBJECT::_internal_gameobjects(int index) const {
  return _impl_.gameobjects_.Get(index);
}
inline int32_t S_REMOVE_GAME_OBJECT::gameobjects(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_REMOVE_GAME_OBJECT.gameObjects)
  return _internal_gameobjects(index);
}
inline void S_REMOVE_GAME_OBJECT::set_gameobjects(int index, int32_t value) {
  _impl_.gameobjects_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_REMOVE_GAME_OBJECT.gameObjects)
}
inline void S_REMOVE_GAME_OBJECT::_internal_add_gameobjects(int32_t value) {
  _impl_.gameobjects_.Add(value);
}
inline void S_REMOVE_GAME_OBJECT::add_gameobjects(int32_t value) {
  _internal_add_gameobjects(value);
  // @@protoc_insertion_point(field_add:Protocol.S_REMOVE_GAME_OBJECT.gameObjects)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S_REMOVE_GAME_OBJECT::_internal_gameobjects() const {
  return _impl_.gameobjects_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
S_REMOVE_GAME_OBJECT::gameobjects() const {
  // @@protoc_insertion_point(field_list:Protocol.S_REMOVE_GAME_OBJECT.gameObjects)
  return _internal_gameobjects();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S_REMOVE_GAME_OBJECT::_internal_mutable_gameobjects() {
  return &_impl_.gameobjects_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
S_REMOVE_GAME_OBJECT::mutable_gameobjects() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_REMOVE_GAME_OBJECT.gameObjects)
  return _internal_mutable_gameobjects();
}

// -------------------------------------------------------------------

// C_SET_TRANSFORM

// int32 gameObjectId = 1;
inline void C_SET_TRANSFORM::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t C_SET_TRANSFORM::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t C_SET_TRANSFORM::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_TRANSFORM.gameObjectId)
  return _internal_gameobjectid();
}
inline void C_SET_TRANSFORM::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void C_SET_TRANSFORM::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SET_TRANSFORM.gameObjectId)
}

// .Protocol.Vector3 position = 2;
inline bool C_SET_TRANSFORM::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_SET_TRANSFORM::has_position() const {
  return _internal_has_position();
}
inline void C_SET_TRANSFORM::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& C_SET_TRANSFORM::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_SET_TRANSFORM::position() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_TRANSFORM.position)
  return _internal_position();
}
inline void C_SET_TRANSFORM::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SET_TRANSFORM.position)
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.C_SET_TRANSFORM.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SET_TRANSFORM.position)
  return _msg;
}
inline void C_SET_TRANSFORM::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SET_TRANSFORM.position)
}

// .Protocol.Vector3 rotation = 3;
inline bool C_SET_TRANSFORM::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool C_SET_TRANSFORM::has_rotation() const {
  return _internal_has_rotation();
}
inline void C_SET_TRANSFORM::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& C_SET_TRANSFORM::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_SET_TRANSFORM::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SET_TRANSFORM.rotation)
  return _internal_rotation();
}
inline void C_SET_TRANSFORM::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_SET_TRANSFORM.rotation)
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.C_SET_TRANSFORM.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* C_SET_TRANSFORM::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.C_SET_TRANSFORM.rotation)
  return _msg;
}
inline void C_SET_TRANSFORM::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SET_TRANSFORM.rotation)
}

// -------------------------------------------------------------------

// S_SET_TRANSFORM

// int32 gameObjectId = 1;
inline void S_SET_TRANSFORM::clear_gameobjectid() {
  _impl_.gameobjectid_ = 0;
}
inline int32_t S_SET_TRANSFORM::_internal_gameobjectid() const {
  return _impl_.gameobjectid_;
}
inline int32_t S_SET_TRANSFORM::gameobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_TRANSFORM.gameObjectId)
  return _internal_gameobjectid();
}
inline void S_SET_TRANSFORM::_internal_set_gameobjectid(int32_t value) {
  
  _impl_.gameobjectid_ = value;
}
inline void S_SET_TRANSFORM::set_gameobjectid(int32_t value) {
  _internal_set_gameobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SET_TRANSFORM.gameObjectId)
}

// .Protocol.Vector3 position = 2;
inline bool S_SET_TRANSFORM::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_SET_TRANSFORM::has_position() const {
  return _internal_has_position();
}
inline void S_SET_TRANSFORM::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::Protocol::Vector3& S_SET_TRANSFORM::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_SET_TRANSFORM::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_TRANSFORM.position)
  return _internal_position();
}
inline void S_SET_TRANSFORM::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SET_TRANSFORM.position)
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_SET_TRANSFORM.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SET_TRANSFORM.position)
  return _msg;
}
inline void S_SET_TRANSFORM::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SET_TRANSFORM.position)
}

// .Protocol.Vector3 rotation = 3;
inline bool S_SET_TRANSFORM::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S_SET_TRANSFORM::has_rotation() const {
  return _internal_has_rotation();
}
inline void S_SET_TRANSFORM::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Vector3& S_SET_TRANSFORM::_internal_rotation() const {
  const ::Protocol::Vector3* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_SET_TRANSFORM::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SET_TRANSFORM.rotation)
  return _internal_rotation();
}
inline void S_SET_TRANSFORM::unsafe_arena_set_allocated_rotation(
    ::Protocol::Vector3* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_SET_TRANSFORM.rotation)
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::release_rotation() {
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S_SET_TRANSFORM.rotation)
  
  ::Protocol::Vector3* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Vector3* S_SET_TRANSFORM::mutable_rotation() {
  ::Protocol::Vector3* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S_SET_TRANSFORM.rotation)
  return _msg;
}
inline void S_SET_TRANSFORM::set_allocated_rotation(::Protocol::Vector3* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SET_TRANSFORM.rotation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_5f001_5fGameObject_2eproto
