// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_002_FPS.proto

#include "Packet_002_FPS.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR Quaternion::Quaternion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;
PROTOBUF_CONSTEXPR S_ADD_FPS_PLAYER_GameObjectInfo::S_ADD_FPS_PLAYER_GameObjectInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ownerid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ADD_FPS_PLAYER_GameObjectInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ADD_FPS_PLAYER_GameObjectInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ADD_FPS_PLAYER_GameObjectInfoDefaultTypeInternal() {}
  union {
    S_ADD_FPS_PLAYER_GameObjectInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ADD_FPS_PLAYER_GameObjectInfoDefaultTypeInternal _S_ADD_FPS_PLAYER_GameObjectInfo_default_instance_;
PROTOBUF_CONSTEXPR S_ADD_FPS_PLAYER::S_ADD_FPS_PLAYER(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gameobjects_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ADD_FPS_PLAYERDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ADD_FPS_PLAYERDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ADD_FPS_PLAYERDefaultTypeInternal() {}
  union {
    S_ADD_FPS_PLAYER _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ADD_FPS_PLAYERDefaultTypeInternal _S_ADD_FPS_PLAYER_default_instance_;
PROTOBUF_CONSTEXPR C_SET_FPS_POSITION::C_SET_FPS_POSITION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SET_FPS_POSITIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SET_FPS_POSITIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SET_FPS_POSITIONDefaultTypeInternal() {}
  union {
    C_SET_FPS_POSITION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SET_FPS_POSITIONDefaultTypeInternal _C_SET_FPS_POSITION_default_instance_;
PROTOBUF_CONSTEXPR S_SET_FPS_POSITION::S_SET_FPS_POSITION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SET_FPS_POSITIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SET_FPS_POSITIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SET_FPS_POSITIONDefaultTypeInternal() {}
  union {
    S_SET_FPS_POSITION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SET_FPS_POSITIONDefaultTypeInternal _S_SET_FPS_POSITION_default_instance_;
PROTOBUF_CONSTEXPR C_SET_FPS_ROTATION::C_SET_FPS_ROTATION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SET_FPS_ROTATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SET_FPS_ROTATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SET_FPS_ROTATIONDefaultTypeInternal() {}
  union {
    C_SET_FPS_ROTATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SET_FPS_ROTATIONDefaultTypeInternal _C_SET_FPS_ROTATION_default_instance_;
PROTOBUF_CONSTEXPR S_SET_FPS_ROTATION::S_SET_FPS_ROTATION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SET_FPS_ROTATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SET_FPS_ROTATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SET_FPS_ROTATIONDefaultTypeInternal() {}
  union {
    S_SET_FPS_ROTATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SET_FPS_ROTATIONDefaultTypeInternal _S_SET_FPS_ROTATION_default_instance_;
PROTOBUF_CONSTEXPR C_SHOOT::C_SHOOT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.direction_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SHOOTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SHOOTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SHOOTDefaultTypeInternal() {}
  union {
    C_SHOOT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SHOOTDefaultTypeInternal _C_SHOOT_default_instance_;
PROTOBUF_CONSTEXPR S_SHOOT::S_SHOOT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SHOOTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SHOOTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SHOOTDefaultTypeInternal() {}
  union {
    S_SHOOT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SHOOTDefaultTypeInternal _S_SHOOT_default_instance_;
PROTOBUF_CONSTEXPR S_ATTACKED::S_ATTACKED(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_.damage_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ATTACKEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ATTACKEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ATTACKEDDefaultTypeInternal() {}
  union {
    S_ATTACKED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ATTACKEDDefaultTypeInternal _S_ATTACKED_default_instance_;
PROTOBUF_CONSTEXPR C_CHANGE_WEAPON::C_CHANGE_WEAPON(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.weaponid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_CHANGE_WEAPONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CHANGE_WEAPONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CHANGE_WEAPONDefaultTypeInternal() {}
  union {
    C_CHANGE_WEAPON _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CHANGE_WEAPONDefaultTypeInternal _C_CHANGE_WEAPON_default_instance_;
PROTOBUF_CONSTEXPR S_CHANGE_WEAPON::S_CHANGE_WEAPON(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_.weaponid_)*/0
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CHANGE_WEAPONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CHANGE_WEAPONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CHANGE_WEAPONDefaultTypeInternal() {}
  union {
    S_CHANGE_WEAPON _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHANGE_WEAPONDefaultTypeInternal _S_CHANGE_WEAPON_default_instance_;
PROTOBUF_CONSTEXPR C_RELOAD::C_RELOAD(
    ::_pbi::ConstantInitialized) {}
struct C_RELOADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_RELOADDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_RELOADDefaultTypeInternal() {}
  union {
    C_RELOAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_RELOADDefaultTypeInternal _C_RELOAD_default_instance_;
PROTOBUF_CONSTEXPR S_RELOAD::S_RELOAD(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_RELOADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_RELOADDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_RELOADDefaultTypeInternal() {}
  union {
    S_RELOAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_RELOADDefaultTypeInternal _S_RELOAD_default_instance_;
PROTOBUF_CONSTEXPR FPS_Animation::FPS_Animation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.movex_)*/0
  , /*decltype(_impl_.movey_)*/0
  , /*decltype(_impl_.velocity_)*/0
  , /*decltype(_impl_.sprinting_)*/0
  , /*decltype(_impl_.posestate_)*/0
  , /*decltype(_impl_.movementstate_)*/0
  , /*decltype(_impl_.moving_)*/false
  , /*decltype(_impl_.inair_)*/false
  , /*decltype(_impl_.isturning_)*/false
  , /*decltype(_impl_.turnright_)*/false
  , /*decltype(_impl_.lookx_)*/0
  , /*decltype(_impl_.looky_)*/0
  , /*decltype(_impl_.aiming_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FPS_AnimationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FPS_AnimationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FPS_AnimationDefaultTypeInternal() {}
  union {
    FPS_Animation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FPS_AnimationDefaultTypeInternal _FPS_Animation_default_instance_;
PROTOBUF_CONSTEXPR C_FPS_ANIMATION::C_FPS_ANIMATION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fpsanimation_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_FPS_ANIMATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_FPS_ANIMATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_FPS_ANIMATIONDefaultTypeInternal() {}
  union {
    C_FPS_ANIMATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_FPS_ANIMATIONDefaultTypeInternal _C_FPS_ANIMATION_default_instance_;
PROTOBUF_CONSTEXPR S_FPS_ANIMATION::S_FPS_ANIMATION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fpsanimation_)*/nullptr
  , /*decltype(_impl_.playerid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_FPS_ANIMATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FPS_ANIMATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FPS_ANIMATIONDefaultTypeInternal() {}
  union {
    S_FPS_ANIMATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FPS_ANIMATIONDefaultTypeInternal _S_FPS_ANIMATION_default_instance_;
PROTOBUF_CONSTEXPR C_FPS_READY::C_FPS_READY(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isready_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_FPS_READYDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_FPS_READYDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_FPS_READYDefaultTypeInternal() {}
  union {
    C_FPS_READY _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_FPS_READYDefaultTypeInternal _C_FPS_READY_default_instance_;
PROTOBUF_CONSTEXPR S_FPS_LOAD::S_FPS_LOAD(
    ::_pbi::ConstantInitialized) {}
struct S_FPS_LOADDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FPS_LOADDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FPS_LOADDefaultTypeInternal() {}
  union {
    S_FPS_LOAD _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FPS_LOADDefaultTypeInternal _S_FPS_LOAD_default_instance_;
PROTOBUF_CONSTEXPR S_FPS_START::S_FPS_START(
    ::_pbi::ConstantInitialized) {}
struct S_FPS_STARTDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FPS_STARTDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FPS_STARTDefaultTypeInternal() {}
  union {
    S_FPS_START _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FPS_STARTDefaultTypeInternal _S_FPS_START_default_instance_;
PROTOBUF_CONSTEXPR C_FPS_LOAD_COMPLETE::C_FPS_LOAD_COMPLETE(
    ::_pbi::ConstantInitialized) {}
struct C_FPS_LOAD_COMPLETEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_FPS_LOAD_COMPLETEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_FPS_LOAD_COMPLETEDefaultTypeInternal() {}
  union {
    C_FPS_LOAD_COMPLETE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_FPS_LOAD_COMPLETEDefaultTypeInternal _C_FPS_LOAD_COMPLETE_default_instance_;
PROTOBUF_CONSTEXPR S_FPS_FINISH::S_FPS_FINISH(
    ::_pbi::ConstantInitialized) {}
struct S_FPS_FINISHDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FPS_FINISHDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FPS_FINISHDefaultTypeInternal() {}
  union {
    S_FPS_FINISH _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FPS_FINISHDefaultTypeInternal _S_FPS_FINISH_default_instance_;
PROTOBUF_CONSTEXPR S_FPS_ANNOUNCE::S_FPS_ANNOUNCE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_FPS_ANNOUNCEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FPS_ANNOUNCEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FPS_ANNOUNCEDefaultTypeInternal() {}
  union {
    S_FPS_ANNOUNCE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FPS_ANNOUNCEDefaultTypeInternal _S_FPS_ANNOUNCE_default_instance_;
PROTOBUF_CONSTEXPR S_FPS_SPAWN_ITEM::S_FPS_SPAWN_ITEM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_FPS_SPAWN_ITEMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FPS_SPAWN_ITEMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FPS_SPAWN_ITEMDefaultTypeInternal() {}
  union {
    S_FPS_SPAWN_ITEM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FPS_SPAWN_ITEMDefaultTypeInternal _S_FPS_SPAWN_ITEM_default_instance_;
PROTOBUF_CONSTEXPR S_FPS_SPAWN_DESTINATION::S_FPS_SPAWN_DESTINATION(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_FPS_SPAWN_DESTINATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FPS_SPAWN_DESTINATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FPS_SPAWN_DESTINATIONDefaultTypeInternal() {}
  union {
    S_FPS_SPAWN_DESTINATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FPS_SPAWN_DESTINATIONDefaultTypeInternal _S_FPS_SPAWN_DESTINATION_default_instance_;
PROTOBUF_CONSTEXPR S_FPS_DESTROY_DESTINATION::S_FPS_DESTROY_DESTINATION(
    ::_pbi::ConstantInitialized) {}
struct S_FPS_DESTROY_DESTINATIONDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FPS_DESTROY_DESTINATIONDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FPS_DESTROY_DESTINATIONDefaultTypeInternal() {}
  union {
    S_FPS_DESTROY_DESTINATION _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FPS_DESTROY_DESTINATIONDefaultTypeInternal _S_FPS_DESTROY_DESTINATION_default_instance_;
PROTOBUF_CONSTEXPR S_FPS_ITEM_OCCUPY_PROGRESS_STATE::S_FPS_ITEM_OCCUPY_PROGRESS_STATE(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.occupyprogressstate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_FPS_ITEM_OCCUPY_PROGRESS_STATEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FPS_ITEM_OCCUPY_PROGRESS_STATEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FPS_ITEM_OCCUPY_PROGRESS_STATEDefaultTypeInternal() {}
  union {
    S_FPS_ITEM_OCCUPY_PROGRESS_STATE _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FPS_ITEM_OCCUPY_PROGRESS_STATEDefaultTypeInternal _S_FPS_ITEM_OCCUPY_PROGRESS_STATE_default_instance_;
PROTOBUF_CONSTEXPR S_FPS_ITEM_OCCUPIED::S_FPS_ITEM_OCCUPIED(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.occupier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_FPS_ITEM_OCCUPIEDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FPS_ITEM_OCCUPIEDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FPS_ITEM_OCCUPIEDDefaultTypeInternal() {}
  union {
    S_FPS_ITEM_OCCUPIED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FPS_ITEM_OCCUPIEDDefaultTypeInternal _S_FPS_ITEM_OCCUPIED_default_instance_;
PROTOBUF_CONSTEXPR S_FPS_SCORED::S_FPS_SCORED(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scorer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_FPS_SCOREDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_FPS_SCOREDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_FPS_SCOREDDefaultTypeInternal() {}
  union {
    S_FPS_SCORED _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_FPS_SCOREDDefaultTypeInternal _S_FPS_SCORED_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Packet_5f002_5fFPS_2eproto[29];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Packet_5f002_5fFPS_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Packet_5f002_5fFPS_2eproto = nullptr;

const uint32_t TableStruct_Packet_5f002_5fFPS_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::Quaternion, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Quaternion, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Quaternion, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::Quaternion, _impl_.w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo, _impl_.ownerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_FPS_PLAYER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADD_FPS_PLAYER, _impl_.gameobjects_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_FPS_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_FPS_POSITION, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_FPS_POSITION, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_FPS_POSITION, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_FPS_POSITION, _impl_.velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_FPS_POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_FPS_POSITION, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_FPS_POSITION, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_FPS_POSITION, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_FPS_POSITION, _impl_.velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_FPS_ROTATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_FPS_ROTATION, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SET_FPS_ROTATION, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_FPS_ROTATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_FPS_ROTATION, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SET_FPS_ROTATION, _impl_.rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SHOOT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SHOOT, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SHOOT, _impl_.direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOOT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SHOOT, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACKED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACKED, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACKED, _impl_.damage_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ATTACKED, _impl_.hp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANGE_WEAPON, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANGE_WEAPON, _impl_.weaponid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHANGE_WEAPON, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANGE_WEAPON, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANGE_WEAPON, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANGE_WEAPON, _impl_.weaponid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHANGE_WEAPON, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_RELOAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_RELOAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_RELOAD, _impl_.playerid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.movex_),
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.movey_),
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.moving_),
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.inair_),
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.sprinting_),
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.posestate_),
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.movementstate_),
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.lookx_),
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.looky_),
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.isturning_),
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.turnright_),
  PROTOBUF_FIELD_OFFSET(::Protocol::FPS_Animation, _impl_.aiming_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_FPS_ANIMATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_FPS_ANIMATION, _impl_.fpsanimation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_ANIMATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_ANIMATION, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_ANIMATION, _impl_.fpsanimation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_FPS_READY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_FPS_READY, _impl_.isready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_LOAD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_START, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_FPS_LOAD_COMPLETE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_FINISH, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_ANNOUNCE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_ANNOUNCE, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_SPAWN_ITEM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_SPAWN_ITEM, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_SPAWN_DESTINATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_SPAWN_DESTINATION, _impl_.position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_DESTROY_DESTINATION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_ITEM_OCCUPY_PROGRESS_STATE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_ITEM_OCCUPY_PROGRESS_STATE, _impl_.occupyprogressstate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_ITEM_OCCUPIED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_ITEM_OCCUPIED, _impl_.occupier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_SCORED, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_FPS_SCORED, _impl_.scorer_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::Quaternion)},
  { 10, -1, -1, sizeof(::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo)},
  { 21, -1, -1, sizeof(::Protocol::S_ADD_FPS_PLAYER)},
  { 28, -1, -1, sizeof(::Protocol::C_SET_FPS_POSITION)},
  { 38, -1, -1, sizeof(::Protocol::S_SET_FPS_POSITION)},
  { 48, -1, -1, sizeof(::Protocol::C_SET_FPS_ROTATION)},
  { 56, -1, -1, sizeof(::Protocol::S_SET_FPS_ROTATION)},
  { 64, -1, -1, sizeof(::Protocol::C_SHOOT)},
  { 72, -1, -1, sizeof(::Protocol::S_SHOOT)},
  { 79, -1, -1, sizeof(::Protocol::S_ATTACKED)},
  { 88, -1, -1, sizeof(::Protocol::C_CHANGE_WEAPON)},
  { 96, -1, -1, sizeof(::Protocol::S_CHANGE_WEAPON)},
  { 105, -1, -1, sizeof(::Protocol::C_RELOAD)},
  { 111, -1, -1, sizeof(::Protocol::S_RELOAD)},
  { 118, -1, -1, sizeof(::Protocol::FPS_Animation)},
  { 137, -1, -1, sizeof(::Protocol::C_FPS_ANIMATION)},
  { 144, -1, -1, sizeof(::Protocol::S_FPS_ANIMATION)},
  { 152, -1, -1, sizeof(::Protocol::C_FPS_READY)},
  { 159, -1, -1, sizeof(::Protocol::S_FPS_LOAD)},
  { 165, -1, -1, sizeof(::Protocol::S_FPS_START)},
  { 171, -1, -1, sizeof(::Protocol::C_FPS_LOAD_COMPLETE)},
  { 177, -1, -1, sizeof(::Protocol::S_FPS_FINISH)},
  { 183, -1, -1, sizeof(::Protocol::S_FPS_ANNOUNCE)},
  { 190, -1, -1, sizeof(::Protocol::S_FPS_SPAWN_ITEM)},
  { 197, -1, -1, sizeof(::Protocol::S_FPS_SPAWN_DESTINATION)},
  { 204, -1, -1, sizeof(::Protocol::S_FPS_DESTROY_DESTINATION)},
  { 210, -1, -1, sizeof(::Protocol::S_FPS_ITEM_OCCUPY_PROGRESS_STATE)},
  { 217, -1, -1, sizeof(::Protocol::S_FPS_ITEM_OCCUPIED)},
  { 224, -1, -1, sizeof(::Protocol::S_FPS_SCORED)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_Quaternion_default_instance_._instance,
  &::Protocol::_S_ADD_FPS_PLAYER_GameObjectInfo_default_instance_._instance,
  &::Protocol::_S_ADD_FPS_PLAYER_default_instance_._instance,
  &::Protocol::_C_SET_FPS_POSITION_default_instance_._instance,
  &::Protocol::_S_SET_FPS_POSITION_default_instance_._instance,
  &::Protocol::_C_SET_FPS_ROTATION_default_instance_._instance,
  &::Protocol::_S_SET_FPS_ROTATION_default_instance_._instance,
  &::Protocol::_C_SHOOT_default_instance_._instance,
  &::Protocol::_S_SHOOT_default_instance_._instance,
  &::Protocol::_S_ATTACKED_default_instance_._instance,
  &::Protocol::_C_CHANGE_WEAPON_default_instance_._instance,
  &::Protocol::_S_CHANGE_WEAPON_default_instance_._instance,
  &::Protocol::_C_RELOAD_default_instance_._instance,
  &::Protocol::_S_RELOAD_default_instance_._instance,
  &::Protocol::_FPS_Animation_default_instance_._instance,
  &::Protocol::_C_FPS_ANIMATION_default_instance_._instance,
  &::Protocol::_S_FPS_ANIMATION_default_instance_._instance,
  &::Protocol::_C_FPS_READY_default_instance_._instance,
  &::Protocol::_S_FPS_LOAD_default_instance_._instance,
  &::Protocol::_S_FPS_START_default_instance_._instance,
  &::Protocol::_C_FPS_LOAD_COMPLETE_default_instance_._instance,
  &::Protocol::_S_FPS_FINISH_default_instance_._instance,
  &::Protocol::_S_FPS_ANNOUNCE_default_instance_._instance,
  &::Protocol::_S_FPS_SPAWN_ITEM_default_instance_._instance,
  &::Protocol::_S_FPS_SPAWN_DESTINATION_default_instance_._instance,
  &::Protocol::_S_FPS_DESTROY_DESTINATION_default_instance_._instance,
  &::Protocol::_S_FPS_ITEM_OCCUPY_PROGRESS_STATE_default_instance_._instance,
  &::Protocol::_S_FPS_ITEM_OCCUPIED_default_instance_._instance,
  &::Protocol::_S_FPS_SCORED_default_instance_._instance,
};

const char descriptor_table_protodef_Packet_5f002_5fFPS_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024Packet_002_FPS.proto\022\010Protocol\032\033Packet"
  "_001_GameObject.proto\"8\n\nQuaternion\022\t\n\001x"
  "\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\t\n\001w\030\004 \001(\002\""
  "\341\001\n\020S_ADD_FPS_PLAYER\022>\n\013gameObjects\030\001 \003("
  "\0132).Protocol.S_ADD_FPS_PLAYER.GameObject"
  "Info\032\214\001\n\016GameObjectInfo\022\020\n\010playerId\030\001 \001("
  "\005\022\017\n\007ownerId\030\002 \001(\t\022\n\n\002hp\030\003 \001(\005\022#\n\010positi"
  "on\030\004 \001(\0132\021.Protocol.Vector3\022&\n\010rotation\030"
  "\005 \001(\0132\024.Protocol.Quaternion\"\203\001\n\022C_SET_FP"
  "S_POSITION\022\021\n\ttimestamp\030\001 \001(\003\022\020\n\010playerI"
  "d\030\002 \001(\005\022#\n\010position\030\003 \001(\0132\021.Protocol.Vec"
  "tor3\022#\n\010velocity\030\004 \001(\0132\021.Protocol.Vector"
  "3\"\203\001\n\022S_SET_FPS_POSITION\022\021\n\ttimestamp\030\001 "
  "\001(\003\022\020\n\010playerId\030\002 \001(\005\022#\n\010position\030\003 \001(\0132"
  "\021.Protocol.Vector3\022#\n\010velocity\030\004 \001(\0132\021.P"
  "rotocol.Vector3\"N\n\022C_SET_FPS_ROTATION\022\020\n"
  "\010playerId\030\001 \001(\005\022&\n\010rotation\030\002 \001(\0132\024.Prot"
  "ocol.Quaternion\"N\n\022S_SET_FPS_ROTATION\022\020\n"
  "\010playerId\030\001 \001(\005\022&\n\010rotation\030\002 \001(\0132\024.Prot"
  "ocol.Quaternion\"T\n\007C_SHOOT\022#\n\010position\030\001"
  " \001(\0132\021.Protocol.Vector3\022$\n\tdirection\030\002 \001"
  "(\0132\021.Protocol.Vector3\"\033\n\007S_SHOOT\022\020\n\010play"
  "erId\030\001 \001(\005\":\n\nS_ATTACKED\022\020\n\010playerid\030\001 \001"
  "(\005\022\016\n\006damage\030\002 \001(\005\022\n\n\002hp\030\003 \001(\005\"6\n\017C_CHAN"
  "GE_WEAPON\022\020\n\010weaponId\030\001 \001(\005\022\021\n\ttimestamp"
  "\030\002 \001(\003\"H\n\017S_CHANGE_WEAPON\022\020\n\010playerId\030\001 "
  "\001(\005\022\020\n\010weaponId\030\002 \001(\005\022\021\n\ttimestamp\030\003 \001(\003"
  "\"\n\n\010C_RELOAD\"\034\n\010S_RELOAD\022\020\n\010playerId\030\001 \001"
  "(\005\"\357\001\n\rFPS_Animation\022\r\n\005moveX\030\001 \001(\002\022\r\n\005m"
  "oveY\030\002 \001(\002\022\020\n\010velocity\030\003 \001(\002\022\016\n\006moving\030\004"
  " \001(\010\022\r\n\005inAir\030\005 \001(\010\022\021\n\tsprinting\030\006 \001(\002\022\021"
  "\n\tposeState\030\007 \001(\005\022\025\n\rmovementState\030\010 \001(\005"
  "\022\r\n\005lookX\030\t \001(\002\022\r\n\005lookY\030\n \001(\002\022\021\n\tisTurn"
  "ing\030\013 \001(\010\022\021\n\tturnRight\030\014 \001(\010\022\016\n\006aiming\030\r"
  " \001(\010\"@\n\017C_FPS_ANIMATION\022-\n\014fpsAnimation\030"
  "\001 \001(\0132\027.Protocol.FPS_Animation\"R\n\017S_FPS_"
  "ANIMATION\022\020\n\010playerId\030\001 \001(\005\022-\n\014fpsAnimat"
  "ion\030\002 \001(\0132\027.Protocol.FPS_Animation\"\036\n\013C_"
  "FPS_READY\022\017\n\007isReady\030\001 \001(\010\"\014\n\nS_FPS_LOAD"
  "\"\r\n\013S_FPS_START\"\025\n\023C_FPS_LOAD_COMPLETE\"\016"
  "\n\014S_FPS_FINISH\"!\n\016S_FPS_ANNOUNCE\022\017\n\007mess"
  "age\030\001 \001(\t\"7\n\020S_FPS_SPAWN_ITEM\022#\n\010positio"
  "n\030\001 \001(\0132\021.Protocol.Vector3\">\n\027S_FPS_SPAW"
  "N_DESTINATION\022#\n\010position\030\001 \001(\0132\021.Protoc"
  "ol.Vector3\"\033\n\031S_FPS_DESTROY_DESTINATION\""
  "\?\n S_FPS_ITEM_OCCUPY_PROGRESS_STATE\022\033\n\023o"
  "ccupyProgressState\030\001 \001(\005\"\'\n\023S_FPS_ITEM_O"
  "CCUPIED\022\020\n\010occupier\030\001 \001(\t\"\036\n\014S_FPS_SCORE"
  "D\022\016\n\006scorer\030\001 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Packet_5f002_5fFPS_2eproto_deps[1] = {
  &::descriptor_table_Packet_5f001_5fGameObject_2eproto,
};
static ::_pbi::once_flag descriptor_table_Packet_5f002_5fFPS_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Packet_5f002_5fFPS_2eproto = {
    false, false, 1945, descriptor_table_protodef_Packet_5f002_5fFPS_2eproto,
    "Packet_002_FPS.proto",
    &descriptor_table_Packet_5f002_5fFPS_2eproto_once, descriptor_table_Packet_5f002_5fFPS_2eproto_deps, 1, 29,
    schemas, file_default_instances, TableStruct_Packet_5f002_5fFPS_2eproto::offsets,
    file_level_metadata_Packet_5f002_5fFPS_2eproto, file_level_enum_descriptors_Packet_5f002_5fFPS_2eproto,
    file_level_service_descriptors_Packet_5f002_5fFPS_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Packet_5f002_5fFPS_2eproto_getter() {
  return &descriptor_table_Packet_5f002_5fFPS_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Packet_5f002_5fFPS_2eproto(&descriptor_table_Packet_5f002_5fFPS_2eproto);
namespace Protocol {

// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Quaternion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:Protocol.Quaternion)
}

inline void Quaternion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:Protocol.Quaternion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quaternion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.Quaternion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.w_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Quaternion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.Quaternion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float w = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.Quaternion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  // float w = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = this->_internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quaternion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Quaternion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quaternion::GetClassData() const { return &_class_data_; }


void Quaternion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.Quaternion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_w = from._internal_w();
  uint32_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)
      + sizeof(Quaternion::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[0]);
}

// ===================================================================

class S_ADD_FPS_PLAYER_GameObjectInfo::_Internal {
 public:
  static const ::Protocol::Vector3& position(const S_ADD_FPS_PLAYER_GameObjectInfo* msg);
  static const ::Protocol::Quaternion& rotation(const S_ADD_FPS_PLAYER_GameObjectInfo* msg);
};

const ::Protocol::Vector3&
S_ADD_FPS_PLAYER_GameObjectInfo::_Internal::position(const S_ADD_FPS_PLAYER_GameObjectInfo* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Quaternion&
S_ADD_FPS_PLAYER_GameObjectInfo::_Internal::rotation(const S_ADD_FPS_PLAYER_GameObjectInfo* msg) {
  return *msg->_impl_.rotation_;
}
void S_ADD_FPS_PLAYER_GameObjectInfo::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
S_ADD_FPS_PLAYER_GameObjectInfo::S_ADD_FPS_PLAYER_GameObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo)
}
S_ADD_FPS_PLAYER_GameObjectInfo::S_ADD_FPS_PLAYER_GameObjectInfo(const S_ADD_FPS_PLAYER_GameObjectInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ADD_FPS_PLAYER_GameObjectInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ownerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ownerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ownerid().empty()) {
    _this->_impl_.ownerid_.Set(from._internal_ownerid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::Quaternion(*from._impl_.rotation_);
  }
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo)
}

inline void S_ADD_FPS_PLAYER_GameObjectInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ownerid_){}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.playerid_){0}
    , decltype(_impl_.hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ownerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ownerid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_ADD_FPS_PLAYER_GameObjectInfo::~S_ADD_FPS_PLAYER_GameObjectInfo() {
  // @@protoc_insertion_point(destructor:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ADD_FPS_PLAYER_GameObjectInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ownerid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void S_ADD_FPS_PLAYER_GameObjectInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ADD_FPS_PLAYER_GameObjectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ownerid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ADD_FPS_PLAYER_GameObjectInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ownerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ownerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.ownerId"));
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Quaternion rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ADD_FPS_PLAYER_GameObjectInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // string ownerId = 2;
  if (!this->_internal_ownerid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ownerid().data(), static_cast<int>(this->_internal_ownerid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_ADD_FPS_PLAYER.GameObjectInfo.ownerId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ownerid(), target);
  }

  // int32 hp = 3;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
  }

  // .Protocol.Vector3 position = 4;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Quaternion rotation = 5;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo)
  return target;
}

size_t S_ADD_FPS_PLAYER_GameObjectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ownerId = 2;
  if (!this->_internal_ownerid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ownerid());
  }

  // .Protocol.Vector3 position = 4;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Quaternion rotation = 5;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  // int32 hp = 3;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ADD_FPS_PLAYER_GameObjectInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ADD_FPS_PLAYER_GameObjectInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ADD_FPS_PLAYER_GameObjectInfo::GetClassData() const { return &_class_data_; }


void S_ADD_FPS_PLAYER_GameObjectInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ADD_FPS_PLAYER_GameObjectInfo*>(&to_msg);
  auto& from = static_cast<const S_ADD_FPS_PLAYER_GameObjectInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ownerid().empty()) {
    _this->_internal_set_ownerid(from._internal_ownerid());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::Quaternion::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ADD_FPS_PLAYER_GameObjectInfo::CopyFrom(const S_ADD_FPS_PLAYER_GameObjectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ADD_FPS_PLAYER.GameObjectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ADD_FPS_PLAYER_GameObjectInfo::IsInitialized() const {
  return true;
}

void S_ADD_FPS_PLAYER_GameObjectInfo::InternalSwap(S_ADD_FPS_PLAYER_GameObjectInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ownerid_, lhs_arena,
      &other->_impl_.ownerid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ADD_FPS_PLAYER_GameObjectInfo, _impl_.hp_)
      + sizeof(S_ADD_FPS_PLAYER_GameObjectInfo::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(S_ADD_FPS_PLAYER_GameObjectInfo, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ADD_FPS_PLAYER_GameObjectInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[1]);
}

// ===================================================================

class S_ADD_FPS_PLAYER::_Internal {
 public:
};

S_ADD_FPS_PLAYER::S_ADD_FPS_PLAYER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ADD_FPS_PLAYER)
}
S_ADD_FPS_PLAYER::S_ADD_FPS_PLAYER(const S_ADD_FPS_PLAYER& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ADD_FPS_PLAYER* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gameobjects_){from._impl_.gameobjects_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ADD_FPS_PLAYER)
}

inline void S_ADD_FPS_PLAYER::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gameobjects_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ADD_FPS_PLAYER::~S_ADD_FPS_PLAYER() {
  // @@protoc_insertion_point(destructor:Protocol.S_ADD_FPS_PLAYER)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ADD_FPS_PLAYER::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gameobjects_.~RepeatedPtrField();
}

void S_ADD_FPS_PLAYER::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ADD_FPS_PLAYER::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ADD_FPS_PLAYER)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gameobjects_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ADD_FPS_PLAYER::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.S_ADD_FPS_PLAYER.GameObjectInfo gameObjects = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gameobjects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ADD_FPS_PLAYER::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ADD_FPS_PLAYER)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.S_ADD_FPS_PLAYER.GameObjectInfo gameObjects = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gameobjects_size()); i < n; i++) {
    const auto& repfield = this->_internal_gameobjects(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ADD_FPS_PLAYER)
  return target;
}

size_t S_ADD_FPS_PLAYER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ADD_FPS_PLAYER)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.S_ADD_FPS_PLAYER.GameObjectInfo gameObjects = 1;
  total_size += 1UL * this->_internal_gameobjects_size();
  for (const auto& msg : this->_impl_.gameobjects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ADD_FPS_PLAYER::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ADD_FPS_PLAYER::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ADD_FPS_PLAYER::GetClassData() const { return &_class_data_; }


void S_ADD_FPS_PLAYER::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ADD_FPS_PLAYER*>(&to_msg);
  auto& from = static_cast<const S_ADD_FPS_PLAYER&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ADD_FPS_PLAYER)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gameobjects_.MergeFrom(from._impl_.gameobjects_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ADD_FPS_PLAYER::CopyFrom(const S_ADD_FPS_PLAYER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ADD_FPS_PLAYER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ADD_FPS_PLAYER::IsInitialized() const {
  return true;
}

void S_ADD_FPS_PLAYER::InternalSwap(S_ADD_FPS_PLAYER* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gameobjects_.InternalSwap(&other->_impl_.gameobjects_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ADD_FPS_PLAYER::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[2]);
}

// ===================================================================

class C_SET_FPS_POSITION::_Internal {
 public:
  static const ::Protocol::Vector3& position(const C_SET_FPS_POSITION* msg);
  static const ::Protocol::Vector3& velocity(const C_SET_FPS_POSITION* msg);
};

const ::Protocol::Vector3&
C_SET_FPS_POSITION::_Internal::position(const C_SET_FPS_POSITION* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Vector3&
C_SET_FPS_POSITION::_Internal::velocity(const C_SET_FPS_POSITION* msg) {
  return *msg->_impl_.velocity_;
}
void C_SET_FPS_POSITION::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
void C_SET_FPS_POSITION::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
}
C_SET_FPS_POSITION::C_SET_FPS_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SET_FPS_POSITION)
}
C_SET_FPS_POSITION::C_SET_FPS_POSITION(const C_SET_FPS_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SET_FPS_POSITION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::Protocol::Vector3(*from._impl_.velocity_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.playerid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SET_FPS_POSITION)
}

inline void C_SET_FPS_POSITION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.playerid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SET_FPS_POSITION::~C_SET_FPS_POSITION() {
  // @@protoc_insertion_point(destructor:Protocol.C_SET_FPS_POSITION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SET_FPS_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
}

void C_SET_FPS_POSITION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SET_FPS_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SET_FPS_POSITION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playerid_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SET_FPS_POSITION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SET_FPS_POSITION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SET_FPS_POSITION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int32 playerId = 2;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerid(), target);
  }

  // .Protocol.Vector3 position = 3;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 velocity = 4;
  if (this->_internal_has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SET_FPS_POSITION)
  return target;
}

size_t C_SET_FPS_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SET_FPS_POSITION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Vector3 velocity = 4;
  if (this->_internal_has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 playerId = 2;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SET_FPS_POSITION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SET_FPS_POSITION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SET_FPS_POSITION::GetClassData() const { return &_class_data_; }


void C_SET_FPS_POSITION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SET_FPS_POSITION*>(&to_msg);
  auto& from = static_cast<const C_SET_FPS_POSITION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SET_FPS_POSITION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_velocity()) {
    _this->_internal_mutable_velocity()->::Protocol::Vector3::MergeFrom(
        from._internal_velocity());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SET_FPS_POSITION::CopyFrom(const C_SET_FPS_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SET_FPS_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SET_FPS_POSITION::IsInitialized() const {
  return true;
}

void C_SET_FPS_POSITION::InternalSwap(C_SET_FPS_POSITION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_SET_FPS_POSITION, _impl_.playerid_)
      + sizeof(C_SET_FPS_POSITION::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(C_SET_FPS_POSITION, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SET_FPS_POSITION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[3]);
}

// ===================================================================

class S_SET_FPS_POSITION::_Internal {
 public:
  static const ::Protocol::Vector3& position(const S_SET_FPS_POSITION* msg);
  static const ::Protocol::Vector3& velocity(const S_SET_FPS_POSITION* msg);
};

const ::Protocol::Vector3&
S_SET_FPS_POSITION::_Internal::position(const S_SET_FPS_POSITION* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Vector3&
S_SET_FPS_POSITION::_Internal::velocity(const S_SET_FPS_POSITION* msg) {
  return *msg->_impl_.velocity_;
}
void S_SET_FPS_POSITION::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
void S_SET_FPS_POSITION::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
}
S_SET_FPS_POSITION::S_SET_FPS_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SET_FPS_POSITION)
}
S_SET_FPS_POSITION::S_SET_FPS_POSITION(const S_SET_FPS_POSITION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SET_FPS_POSITION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::Protocol::Vector3(*from._impl_.velocity_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playerid_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.playerid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SET_FPS_POSITION)
}

inline void S_SET_FPS_POSITION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.playerid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SET_FPS_POSITION::~S_SET_FPS_POSITION() {
  // @@protoc_insertion_point(destructor:Protocol.S_SET_FPS_POSITION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SET_FPS_POSITION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
}

void S_SET_FPS_POSITION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SET_FPS_POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SET_FPS_POSITION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playerid_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.playerid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SET_FPS_POSITION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playerId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SET_FPS_POSITION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SET_FPS_POSITION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // int32 playerId = 2;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_playerid(), target);
  }

  // .Protocol.Vector3 position = 3;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 velocity = 4;
  if (this->_internal_has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SET_FPS_POSITION)
  return target;
}

size_t S_SET_FPS_POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SET_FPS_POSITION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Vector3 velocity = 4;
  if (this->_internal_has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_);
  }

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 playerId = 2;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SET_FPS_POSITION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SET_FPS_POSITION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SET_FPS_POSITION::GetClassData() const { return &_class_data_; }


void S_SET_FPS_POSITION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SET_FPS_POSITION*>(&to_msg);
  auto& from = static_cast<const S_SET_FPS_POSITION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SET_FPS_POSITION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_velocity()) {
    _this->_internal_mutable_velocity()->::Protocol::Vector3::MergeFrom(
        from._internal_velocity());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SET_FPS_POSITION::CopyFrom(const S_SET_FPS_POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SET_FPS_POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SET_FPS_POSITION::IsInitialized() const {
  return true;
}

void S_SET_FPS_POSITION::InternalSwap(S_SET_FPS_POSITION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SET_FPS_POSITION, _impl_.playerid_)
      + sizeof(S_SET_FPS_POSITION::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(S_SET_FPS_POSITION, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SET_FPS_POSITION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[4]);
}

// ===================================================================

class C_SET_FPS_ROTATION::_Internal {
 public:
  static const ::Protocol::Quaternion& rotation(const C_SET_FPS_ROTATION* msg);
};

const ::Protocol::Quaternion&
C_SET_FPS_ROTATION::_Internal::rotation(const C_SET_FPS_ROTATION* msg) {
  return *msg->_impl_.rotation_;
}
C_SET_FPS_ROTATION::C_SET_FPS_ROTATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SET_FPS_ROTATION)
}
C_SET_FPS_ROTATION::C_SET_FPS_ROTATION(const C_SET_FPS_ROTATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SET_FPS_ROTATION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::Quaternion(*from._impl_.rotation_);
  }
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SET_FPS_ROTATION)
}

inline void C_SET_FPS_ROTATION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.playerid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SET_FPS_ROTATION::~C_SET_FPS_ROTATION() {
  // @@protoc_insertion_point(destructor:Protocol.C_SET_FPS_ROTATION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SET_FPS_ROTATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void C_SET_FPS_ROTATION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SET_FPS_ROTATION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SET_FPS_ROTATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _impl_.playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SET_FPS_ROTATION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Quaternion rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SET_FPS_ROTATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SET_FPS_ROTATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // .Protocol.Quaternion rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SET_FPS_ROTATION)
  return target;
}

size_t C_SET_FPS_ROTATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SET_FPS_ROTATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Quaternion rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SET_FPS_ROTATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SET_FPS_ROTATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SET_FPS_ROTATION::GetClassData() const { return &_class_data_; }


void C_SET_FPS_ROTATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SET_FPS_ROTATION*>(&to_msg);
  auto& from = static_cast<const C_SET_FPS_ROTATION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SET_FPS_ROTATION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::Quaternion::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SET_FPS_ROTATION::CopyFrom(const C_SET_FPS_ROTATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SET_FPS_ROTATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SET_FPS_ROTATION::IsInitialized() const {
  return true;
}

void C_SET_FPS_ROTATION::InternalSwap(C_SET_FPS_ROTATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_SET_FPS_ROTATION, _impl_.playerid_)
      + sizeof(C_SET_FPS_ROTATION::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(C_SET_FPS_ROTATION, _impl_.rotation_)>(
          reinterpret_cast<char*>(&_impl_.rotation_),
          reinterpret_cast<char*>(&other->_impl_.rotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SET_FPS_ROTATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[5]);
}

// ===================================================================

class S_SET_FPS_ROTATION::_Internal {
 public:
  static const ::Protocol::Quaternion& rotation(const S_SET_FPS_ROTATION* msg);
};

const ::Protocol::Quaternion&
S_SET_FPS_ROTATION::_Internal::rotation(const S_SET_FPS_ROTATION* msg) {
  return *msg->_impl_.rotation_;
}
S_SET_FPS_ROTATION::S_SET_FPS_ROTATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SET_FPS_ROTATION)
}
S_SET_FPS_ROTATION::S_SET_FPS_ROTATION(const S_SET_FPS_ROTATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SET_FPS_ROTATION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::Protocol::Quaternion(*from._impl_.rotation_);
  }
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SET_FPS_ROTATION)
}

inline void S_SET_FPS_ROTATION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.playerid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SET_FPS_ROTATION::~S_SET_FPS_ROTATION() {
  // @@protoc_insertion_point(destructor:Protocol.S_SET_FPS_ROTATION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SET_FPS_ROTATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void S_SET_FPS_ROTATION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SET_FPS_ROTATION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SET_FPS_ROTATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  _impl_.playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SET_FPS_ROTATION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Quaternion rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SET_FPS_ROTATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SET_FPS_ROTATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // .Protocol.Quaternion rotation = 2;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SET_FPS_ROTATION)
  return target;
}

size_t S_SET_FPS_ROTATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SET_FPS_ROTATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Quaternion rotation = 2;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SET_FPS_ROTATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SET_FPS_ROTATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SET_FPS_ROTATION::GetClassData() const { return &_class_data_; }


void S_SET_FPS_ROTATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SET_FPS_ROTATION*>(&to_msg);
  auto& from = static_cast<const S_SET_FPS_ROTATION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SET_FPS_ROTATION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::Protocol::Quaternion::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SET_FPS_ROTATION::CopyFrom(const S_SET_FPS_ROTATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SET_FPS_ROTATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SET_FPS_ROTATION::IsInitialized() const {
  return true;
}

void S_SET_FPS_ROTATION::InternalSwap(S_SET_FPS_ROTATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_SET_FPS_ROTATION, _impl_.playerid_)
      + sizeof(S_SET_FPS_ROTATION::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(S_SET_FPS_ROTATION, _impl_.rotation_)>(
          reinterpret_cast<char*>(&_impl_.rotation_),
          reinterpret_cast<char*>(&other->_impl_.rotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SET_FPS_ROTATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[6]);
}

// ===================================================================

class C_SHOOT::_Internal {
 public:
  static const ::Protocol::Vector3& position(const C_SHOOT* msg);
  static const ::Protocol::Vector3& direction(const C_SHOOT* msg);
};

const ::Protocol::Vector3&
C_SHOOT::_Internal::position(const C_SHOOT* msg) {
  return *msg->_impl_.position_;
}
const ::Protocol::Vector3&
C_SHOOT::_Internal::direction(const C_SHOOT* msg) {
  return *msg->_impl_.direction_;
}
void C_SHOOT::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
void C_SHOOT::clear_direction() {
  if (GetArenaForAllocation() == nullptr && _impl_.direction_ != nullptr) {
    delete _impl_.direction_;
  }
  _impl_.direction_ = nullptr;
}
C_SHOOT::C_SHOOT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SHOOT)
}
C_SHOOT::C_SHOOT(const C_SHOOT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SHOOT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.direction_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_direction()) {
    _this->_impl_.direction_ = new ::Protocol::Vector3(*from._impl_.direction_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SHOOT)
}

inline void C_SHOOT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.direction_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SHOOT::~C_SHOOT() {
  // @@protoc_insertion_point(destructor:Protocol.C_SHOOT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SHOOT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.direction_;
}

void C_SHOOT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SHOOT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SHOOT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.direction_ != nullptr) {
    delete _impl_.direction_;
  }
  _impl_.direction_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SHOOT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Vector3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.Vector3 direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SHOOT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SHOOT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .Protocol.Vector3 direction = 2;
  if (this->_internal_has_direction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SHOOT)
  return target;
}

size_t C_SHOOT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SHOOT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .Protocol.Vector3 direction = 2;
  if (this->_internal_has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.direction_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SHOOT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SHOOT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SHOOT::GetClassData() const { return &_class_data_; }


void C_SHOOT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SHOOT*>(&to_msg);
  auto& from = static_cast<const C_SHOOT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SHOOT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_direction()) {
    _this->_internal_mutable_direction()->::Protocol::Vector3::MergeFrom(
        from._internal_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SHOOT::CopyFrom(const C_SHOOT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SHOOT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SHOOT::IsInitialized() const {
  return true;
}

void C_SHOOT::InternalSwap(C_SHOOT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_SHOOT, _impl_.direction_)
      + sizeof(C_SHOOT::_impl_.direction_)
      - PROTOBUF_FIELD_OFFSET(C_SHOOT, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SHOOT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[7]);
}

// ===================================================================

class S_SHOOT::_Internal {
 public:
};

S_SHOOT::S_SHOOT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SHOOT)
}
S_SHOOT::S_SHOOT(const S_SHOOT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SHOOT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SHOOT)
}

inline void S_SHOOT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SHOOT::~S_SHOOT() {
  // @@protoc_insertion_point(destructor:Protocol.S_SHOOT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SHOOT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_SHOOT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SHOOT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SHOOT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SHOOT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SHOOT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SHOOT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SHOOT)
  return target;
}

size_t S_SHOOT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SHOOT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SHOOT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SHOOT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SHOOT::GetClassData() const { return &_class_data_; }


void S_SHOOT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SHOOT*>(&to_msg);
  auto& from = static_cast<const S_SHOOT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SHOOT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SHOOT::CopyFrom(const S_SHOOT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SHOOT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SHOOT::IsInitialized() const {
  return true;
}

void S_SHOOT::InternalSwap(S_SHOOT* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SHOOT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[8]);
}

// ===================================================================

class S_ATTACKED::_Internal {
 public:
};

S_ATTACKED::S_ATTACKED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ATTACKED)
}
S_ATTACKED::S_ATTACKED(const S_ATTACKED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ATTACKED* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.damage_){}
    , decltype(_impl_.hp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.hp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ATTACKED)
}

inline void S_ATTACKED::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0}
    , decltype(_impl_.damage_){0}
    , decltype(_impl_.hp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ATTACKED::~S_ATTACKED() {
  // @@protoc_insertion_point(destructor:Protocol.S_ATTACKED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ATTACKED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ATTACKED::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ATTACKED::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ATTACKED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hp_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.hp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ATTACKED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ATTACKED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ATTACKED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerid = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 damage = 2;
  if (this->_internal_damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_damage(), target);
  }

  // int32 hp = 3;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ATTACKED)
  return target;
}

size_t S_ATTACKED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ATTACKED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerid = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  // int32 damage = 2;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
  }

  // int32 hp = 3;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ATTACKED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ATTACKED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ATTACKED::GetClassData() const { return &_class_data_; }


void S_ATTACKED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ATTACKED*>(&to_msg);
  auto& from = static_cast<const S_ATTACKED&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ATTACKED)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ATTACKED::CopyFrom(const S_ATTACKED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ATTACKED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ATTACKED::IsInitialized() const {
  return true;
}

void S_ATTACKED::InternalSwap(S_ATTACKED* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ATTACKED, _impl_.hp_)
      + sizeof(S_ATTACKED::_impl_.hp_)
      - PROTOBUF_FIELD_OFFSET(S_ATTACKED, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ATTACKED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[9]);
}

// ===================================================================

class C_CHANGE_WEAPON::_Internal {
 public:
};

C_CHANGE_WEAPON::C_CHANGE_WEAPON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHANGE_WEAPON)
}
C_CHANGE_WEAPON::C_CHANGE_WEAPON(const C_CHANGE_WEAPON& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_CHANGE_WEAPON* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){}
    , decltype(_impl_.weaponid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weaponid_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.weaponid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHANGE_WEAPON)
}

inline void C_CHANGE_WEAPON::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.weaponid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_CHANGE_WEAPON::~C_CHANGE_WEAPON() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHANGE_WEAPON)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CHANGE_WEAPON::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_CHANGE_WEAPON::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_CHANGE_WEAPON::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHANGE_WEAPON)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.weaponid_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.weaponid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHANGE_WEAPON::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 weaponId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.weaponid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHANGE_WEAPON::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHANGE_WEAPON)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 weaponId = 1;
  if (this->_internal_weaponid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_weaponid(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHANGE_WEAPON)
  return target;
}

size_t C_CHANGE_WEAPON::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHANGE_WEAPON)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 weaponId = 1;
  if (this->_internal_weaponid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_weaponid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHANGE_WEAPON::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_CHANGE_WEAPON::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHANGE_WEAPON::GetClassData() const { return &_class_data_; }


void C_CHANGE_WEAPON::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_CHANGE_WEAPON*>(&to_msg);
  auto& from = static_cast<const C_CHANGE_WEAPON&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHANGE_WEAPON)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_weaponid() != 0) {
    _this->_internal_set_weaponid(from._internal_weaponid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHANGE_WEAPON::CopyFrom(const C_CHANGE_WEAPON& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHANGE_WEAPON)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHANGE_WEAPON::IsInitialized() const {
  return true;
}

void C_CHANGE_WEAPON::InternalSwap(C_CHANGE_WEAPON* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_CHANGE_WEAPON, _impl_.weaponid_)
      + sizeof(C_CHANGE_WEAPON::_impl_.weaponid_)
      - PROTOBUF_FIELD_OFFSET(C_CHANGE_WEAPON, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHANGE_WEAPON::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[10]);
}

// ===================================================================

class S_CHANGE_WEAPON::_Internal {
 public:
};

S_CHANGE_WEAPON::S_CHANGE_WEAPON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHANGE_WEAPON)
}
S_CHANGE_WEAPON::S_CHANGE_WEAPON(const S_CHANGE_WEAPON& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CHANGE_WEAPON* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.weaponid_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.timestamp_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.timestamp_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHANGE_WEAPON)
}

inline void S_CHANGE_WEAPON::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0}
    , decltype(_impl_.weaponid_){0}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_CHANGE_WEAPON::~S_CHANGE_WEAPON() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHANGE_WEAPON)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CHANGE_WEAPON::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_CHANGE_WEAPON::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CHANGE_WEAPON::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHANGE_WEAPON)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.timestamp_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHANGE_WEAPON::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 weaponId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.weaponid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHANGE_WEAPON::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHANGE_WEAPON)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // int32 weaponId = 2;
  if (this->_internal_weaponid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_weaponid(), target);
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHANGE_WEAPON)
  return target;
}

size_t S_CHANGE_WEAPON::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHANGE_WEAPON)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  // int32 weaponId = 2;
  if (this->_internal_weaponid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_weaponid());
  }

  // int64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHANGE_WEAPON::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CHANGE_WEAPON::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHANGE_WEAPON::GetClassData() const { return &_class_data_; }


void S_CHANGE_WEAPON::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CHANGE_WEAPON*>(&to_msg);
  auto& from = static_cast<const S_CHANGE_WEAPON&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHANGE_WEAPON)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_weaponid() != 0) {
    _this->_internal_set_weaponid(from._internal_weaponid());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHANGE_WEAPON::CopyFrom(const S_CHANGE_WEAPON& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHANGE_WEAPON)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHANGE_WEAPON::IsInitialized() const {
  return true;
}

void S_CHANGE_WEAPON::InternalSwap(S_CHANGE_WEAPON* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CHANGE_WEAPON, _impl_.timestamp_)
      + sizeof(S_CHANGE_WEAPON::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(S_CHANGE_WEAPON, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHANGE_WEAPON::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[11]);
}

// ===================================================================

class C_RELOAD::_Internal {
 public:
};

C_RELOAD::C_RELOAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_RELOAD)
}
C_RELOAD::C_RELOAD(const C_RELOAD& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_RELOAD* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_RELOAD)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_RELOAD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_RELOAD::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_RELOAD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[12]);
}

// ===================================================================

class S_RELOAD::_Internal {
 public:
};

S_RELOAD::S_RELOAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_RELOAD)
}
S_RELOAD::S_RELOAD(const S_RELOAD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_RELOAD* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_RELOAD)
}

inline void S_RELOAD::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_RELOAD::~S_RELOAD() {
  // @@protoc_insertion_point(destructor:Protocol.S_RELOAD)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_RELOAD::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_RELOAD::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_RELOAD::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_RELOAD)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_RELOAD::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_RELOAD::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_RELOAD)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_RELOAD)
  return target;
}

size_t S_RELOAD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_RELOAD)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_RELOAD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_RELOAD::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_RELOAD::GetClassData() const { return &_class_data_; }


void S_RELOAD::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_RELOAD*>(&to_msg);
  auto& from = static_cast<const S_RELOAD&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_RELOAD)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_RELOAD::CopyFrom(const S_RELOAD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_RELOAD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_RELOAD::IsInitialized() const {
  return true;
}

void S_RELOAD::InternalSwap(S_RELOAD* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_RELOAD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[13]);
}

// ===================================================================

class FPS_Animation::_Internal {
 public:
};

FPS_Animation::FPS_Animation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.FPS_Animation)
}
FPS_Animation::FPS_Animation(const FPS_Animation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FPS_Animation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.movex_){}
    , decltype(_impl_.movey_){}
    , decltype(_impl_.velocity_){}
    , decltype(_impl_.sprinting_){}
    , decltype(_impl_.posestate_){}
    , decltype(_impl_.movementstate_){}
    , decltype(_impl_.moving_){}
    , decltype(_impl_.inair_){}
    , decltype(_impl_.isturning_){}
    , decltype(_impl_.turnright_){}
    , decltype(_impl_.lookx_){}
    , decltype(_impl_.looky_){}
    , decltype(_impl_.aiming_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.movex_, &from._impl_.movex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.aiming_) -
    reinterpret_cast<char*>(&_impl_.movex_)) + sizeof(_impl_.aiming_));
  // @@protoc_insertion_point(copy_constructor:Protocol.FPS_Animation)
}

inline void FPS_Animation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.movex_){0}
    , decltype(_impl_.movey_){0}
    , decltype(_impl_.velocity_){0}
    , decltype(_impl_.sprinting_){0}
    , decltype(_impl_.posestate_){0}
    , decltype(_impl_.movementstate_){0}
    , decltype(_impl_.moving_){false}
    , decltype(_impl_.inair_){false}
    , decltype(_impl_.isturning_){false}
    , decltype(_impl_.turnright_){false}
    , decltype(_impl_.lookx_){0}
    , decltype(_impl_.looky_){0}
    , decltype(_impl_.aiming_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FPS_Animation::~FPS_Animation() {
  // @@protoc_insertion_point(destructor:Protocol.FPS_Animation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FPS_Animation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FPS_Animation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FPS_Animation::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.FPS_Animation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.movex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.aiming_) -
      reinterpret_cast<char*>(&_impl_.movex_)) + sizeof(_impl_.aiming_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FPS_Animation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float moveX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.movex_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float moveY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.movey_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool moving = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.moving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool inAir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.inair_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float sprinting = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.sprinting_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 poseState = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.posestate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 movementState = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.movementstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float lookX = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.lookx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float lookY = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.looky_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool isTurning = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.isturning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool turnRight = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.turnright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool aiming = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.aiming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FPS_Animation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.FPS_Animation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float moveX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_movex = this->_internal_movex();
  uint32_t raw_movex;
  memcpy(&raw_movex, &tmp_movex, sizeof(tmp_movex));
  if (raw_movex != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_movex(), target);
  }

  // float moveY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_movey = this->_internal_movey();
  uint32_t raw_movey;
  memcpy(&raw_movey, &tmp_movey, sizeof(tmp_movey));
  if (raw_movey != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_movey(), target);
  }

  // float velocity = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity = this->_internal_velocity();
  uint32_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_velocity(), target);
  }

  // bool moving = 4;
  if (this->_internal_moving() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_moving(), target);
  }

  // bool inAir = 5;
  if (this->_internal_inair() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_inair(), target);
  }

  // float sprinting = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sprinting = this->_internal_sprinting();
  uint32_t raw_sprinting;
  memcpy(&raw_sprinting, &tmp_sprinting, sizeof(tmp_sprinting));
  if (raw_sprinting != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_sprinting(), target);
  }

  // int32 poseState = 7;
  if (this->_internal_posestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_posestate(), target);
  }

  // int32 movementState = 8;
  if (this->_internal_movementstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_movementstate(), target);
  }

  // float lookX = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lookx = this->_internal_lookx();
  uint32_t raw_lookx;
  memcpy(&raw_lookx, &tmp_lookx, sizeof(tmp_lookx));
  if (raw_lookx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_lookx(), target);
  }

  // float lookY = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_looky = this->_internal_looky();
  uint32_t raw_looky;
  memcpy(&raw_looky, &tmp_looky, sizeof(tmp_looky));
  if (raw_looky != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_looky(), target);
  }

  // bool isTurning = 11;
  if (this->_internal_isturning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_isturning(), target);
  }

  // bool turnRight = 12;
  if (this->_internal_turnright() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_turnright(), target);
  }

  // bool aiming = 13;
  if (this->_internal_aiming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_aiming(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.FPS_Animation)
  return target;
}

size_t FPS_Animation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.FPS_Animation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float moveX = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_movex = this->_internal_movex();
  uint32_t raw_movex;
  memcpy(&raw_movex, &tmp_movex, sizeof(tmp_movex));
  if (raw_movex != 0) {
    total_size += 1 + 4;
  }

  // float moveY = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_movey = this->_internal_movey();
  uint32_t raw_movey;
  memcpy(&raw_movey, &tmp_movey, sizeof(tmp_movey));
  if (raw_movey != 0) {
    total_size += 1 + 4;
  }

  // float velocity = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity = this->_internal_velocity();
  uint32_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    total_size += 1 + 4;
  }

  // float sprinting = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sprinting = this->_internal_sprinting();
  uint32_t raw_sprinting;
  memcpy(&raw_sprinting, &tmp_sprinting, sizeof(tmp_sprinting));
  if (raw_sprinting != 0) {
    total_size += 1 + 4;
  }

  // int32 poseState = 7;
  if (this->_internal_posestate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_posestate());
  }

  // int32 movementState = 8;
  if (this->_internal_movementstate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_movementstate());
  }

  // bool moving = 4;
  if (this->_internal_moving() != 0) {
    total_size += 1 + 1;
  }

  // bool inAir = 5;
  if (this->_internal_inair() != 0) {
    total_size += 1 + 1;
  }

  // bool isTurning = 11;
  if (this->_internal_isturning() != 0) {
    total_size += 1 + 1;
  }

  // bool turnRight = 12;
  if (this->_internal_turnright() != 0) {
    total_size += 1 + 1;
  }

  // float lookX = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lookx = this->_internal_lookx();
  uint32_t raw_lookx;
  memcpy(&raw_lookx, &tmp_lookx, sizeof(tmp_lookx));
  if (raw_lookx != 0) {
    total_size += 1 + 4;
  }

  // float lookY = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_looky = this->_internal_looky();
  uint32_t raw_looky;
  memcpy(&raw_looky, &tmp_looky, sizeof(tmp_looky));
  if (raw_looky != 0) {
    total_size += 1 + 4;
  }

  // bool aiming = 13;
  if (this->_internal_aiming() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FPS_Animation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FPS_Animation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FPS_Animation::GetClassData() const { return &_class_data_; }


void FPS_Animation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FPS_Animation*>(&to_msg);
  auto& from = static_cast<const FPS_Animation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.FPS_Animation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_movex = from._internal_movex();
  uint32_t raw_movex;
  memcpy(&raw_movex, &tmp_movex, sizeof(tmp_movex));
  if (raw_movex != 0) {
    _this->_internal_set_movex(from._internal_movex());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_movey = from._internal_movey();
  uint32_t raw_movey;
  memcpy(&raw_movey, &tmp_movey, sizeof(tmp_movey));
  if (raw_movey != 0) {
    _this->_internal_set_movey(from._internal_movey());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_velocity = from._internal_velocity();
  uint32_t raw_velocity;
  memcpy(&raw_velocity, &tmp_velocity, sizeof(tmp_velocity));
  if (raw_velocity != 0) {
    _this->_internal_set_velocity(from._internal_velocity());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sprinting = from._internal_sprinting();
  uint32_t raw_sprinting;
  memcpy(&raw_sprinting, &tmp_sprinting, sizeof(tmp_sprinting));
  if (raw_sprinting != 0) {
    _this->_internal_set_sprinting(from._internal_sprinting());
  }
  if (from._internal_posestate() != 0) {
    _this->_internal_set_posestate(from._internal_posestate());
  }
  if (from._internal_movementstate() != 0) {
    _this->_internal_set_movementstate(from._internal_movementstate());
  }
  if (from._internal_moving() != 0) {
    _this->_internal_set_moving(from._internal_moving());
  }
  if (from._internal_inair() != 0) {
    _this->_internal_set_inair(from._internal_inair());
  }
  if (from._internal_isturning() != 0) {
    _this->_internal_set_isturning(from._internal_isturning());
  }
  if (from._internal_turnright() != 0) {
    _this->_internal_set_turnright(from._internal_turnright());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_lookx = from._internal_lookx();
  uint32_t raw_lookx;
  memcpy(&raw_lookx, &tmp_lookx, sizeof(tmp_lookx));
  if (raw_lookx != 0) {
    _this->_internal_set_lookx(from._internal_lookx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_looky = from._internal_looky();
  uint32_t raw_looky;
  memcpy(&raw_looky, &tmp_looky, sizeof(tmp_looky));
  if (raw_looky != 0) {
    _this->_internal_set_looky(from._internal_looky());
  }
  if (from._internal_aiming() != 0) {
    _this->_internal_set_aiming(from._internal_aiming());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FPS_Animation::CopyFrom(const FPS_Animation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.FPS_Animation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FPS_Animation::IsInitialized() const {
  return true;
}

void FPS_Animation::InternalSwap(FPS_Animation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FPS_Animation, _impl_.aiming_)
      + sizeof(FPS_Animation::_impl_.aiming_)
      - PROTOBUF_FIELD_OFFSET(FPS_Animation, _impl_.movex_)>(
          reinterpret_cast<char*>(&_impl_.movex_),
          reinterpret_cast<char*>(&other->_impl_.movex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FPS_Animation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[14]);
}

// ===================================================================

class C_FPS_ANIMATION::_Internal {
 public:
  static const ::Protocol::FPS_Animation& fpsanimation(const C_FPS_ANIMATION* msg);
};

const ::Protocol::FPS_Animation&
C_FPS_ANIMATION::_Internal::fpsanimation(const C_FPS_ANIMATION* msg) {
  return *msg->_impl_.fpsanimation_;
}
C_FPS_ANIMATION::C_FPS_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_FPS_ANIMATION)
}
C_FPS_ANIMATION::C_FPS_ANIMATION(const C_FPS_ANIMATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_FPS_ANIMATION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fpsanimation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fpsanimation()) {
    _this->_impl_.fpsanimation_ = new ::Protocol::FPS_Animation(*from._impl_.fpsanimation_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_FPS_ANIMATION)
}

inline void C_FPS_ANIMATION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fpsanimation_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_FPS_ANIMATION::~C_FPS_ANIMATION() {
  // @@protoc_insertion_point(destructor:Protocol.C_FPS_ANIMATION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_FPS_ANIMATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fpsanimation_;
}

void C_FPS_ANIMATION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_FPS_ANIMATION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_FPS_ANIMATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fpsanimation_ != nullptr) {
    delete _impl_.fpsanimation_;
  }
  _impl_.fpsanimation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_FPS_ANIMATION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.FPS_Animation fpsAnimation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fpsanimation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_FPS_ANIMATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_FPS_ANIMATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.FPS_Animation fpsAnimation = 1;
  if (this->_internal_has_fpsanimation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::fpsanimation(this),
        _Internal::fpsanimation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_FPS_ANIMATION)
  return target;
}

size_t C_FPS_ANIMATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_FPS_ANIMATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.FPS_Animation fpsAnimation = 1;
  if (this->_internal_has_fpsanimation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fpsanimation_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_FPS_ANIMATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_FPS_ANIMATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_FPS_ANIMATION::GetClassData() const { return &_class_data_; }


void C_FPS_ANIMATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_FPS_ANIMATION*>(&to_msg);
  auto& from = static_cast<const C_FPS_ANIMATION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_FPS_ANIMATION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fpsanimation()) {
    _this->_internal_mutable_fpsanimation()->::Protocol::FPS_Animation::MergeFrom(
        from._internal_fpsanimation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_FPS_ANIMATION::CopyFrom(const C_FPS_ANIMATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_FPS_ANIMATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_FPS_ANIMATION::IsInitialized() const {
  return true;
}

void C_FPS_ANIMATION::InternalSwap(C_FPS_ANIMATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.fpsanimation_, other->_impl_.fpsanimation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_FPS_ANIMATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[15]);
}

// ===================================================================

class S_FPS_ANIMATION::_Internal {
 public:
  static const ::Protocol::FPS_Animation& fpsanimation(const S_FPS_ANIMATION* msg);
};

const ::Protocol::FPS_Animation&
S_FPS_ANIMATION::_Internal::fpsanimation(const S_FPS_ANIMATION* msg) {
  return *msg->_impl_.fpsanimation_;
}
S_FPS_ANIMATION::S_FPS_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_FPS_ANIMATION)
}
S_FPS_ANIMATION::S_FPS_ANIMATION(const S_FPS_ANIMATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_FPS_ANIMATION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fpsanimation_){nullptr}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fpsanimation()) {
    _this->_impl_.fpsanimation_ = new ::Protocol::FPS_Animation(*from._impl_.fpsanimation_);
  }
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_FPS_ANIMATION)
}

inline void S_FPS_ANIMATION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fpsanimation_){nullptr}
    , decltype(_impl_.playerid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_FPS_ANIMATION::~S_FPS_ANIMATION() {
  // @@protoc_insertion_point(destructor:Protocol.S_FPS_ANIMATION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_FPS_ANIMATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.fpsanimation_;
}

void S_FPS_ANIMATION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_FPS_ANIMATION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_FPS_ANIMATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.fpsanimation_ != nullptr) {
    delete _impl_.fpsanimation_;
  }
  _impl_.fpsanimation_ = nullptr;
  _impl_.playerid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_FPS_ANIMATION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.FPS_Animation fpsAnimation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fpsanimation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_FPS_ANIMATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_FPS_ANIMATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // .Protocol.FPS_Animation fpsAnimation = 2;
  if (this->_internal_has_fpsanimation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fpsanimation(this),
        _Internal::fpsanimation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_FPS_ANIMATION)
  return target;
}

size_t S_FPS_ANIMATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_FPS_ANIMATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.FPS_Animation fpsAnimation = 2;
  if (this->_internal_has_fpsanimation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fpsanimation_);
  }

  // int32 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FPS_ANIMATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_FPS_ANIMATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FPS_ANIMATION::GetClassData() const { return &_class_data_; }


void S_FPS_ANIMATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_FPS_ANIMATION*>(&to_msg);
  auto& from = static_cast<const S_FPS_ANIMATION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_FPS_ANIMATION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_fpsanimation()) {
    _this->_internal_mutable_fpsanimation()->::Protocol::FPS_Animation::MergeFrom(
        from._internal_fpsanimation());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_FPS_ANIMATION::CopyFrom(const S_FPS_ANIMATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_FPS_ANIMATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_FPS_ANIMATION::IsInitialized() const {
  return true;
}

void S_FPS_ANIMATION::InternalSwap(S_FPS_ANIMATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_FPS_ANIMATION, _impl_.playerid_)
      + sizeof(S_FPS_ANIMATION::_impl_.playerid_)
      - PROTOBUF_FIELD_OFFSET(S_FPS_ANIMATION, _impl_.fpsanimation_)>(
          reinterpret_cast<char*>(&_impl_.fpsanimation_),
          reinterpret_cast<char*>(&other->_impl_.fpsanimation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_FPS_ANIMATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[16]);
}

// ===================================================================

class C_FPS_READY::_Internal {
 public:
};

C_FPS_READY::C_FPS_READY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_FPS_READY)
}
C_FPS_READY::C_FPS_READY(const C_FPS_READY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_FPS_READY* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isready_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.isready_ = from._impl_.isready_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_FPS_READY)
}

inline void C_FPS_READY::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isready_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_FPS_READY::~C_FPS_READY() {
  // @@protoc_insertion_point(destructor:Protocol.C_FPS_READY)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_FPS_READY::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_FPS_READY::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_FPS_READY::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_FPS_READY)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isready_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_FPS_READY::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool isReady = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_FPS_READY::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_FPS_READY)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isReady = 1;
  if (this->_internal_isready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_isready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_FPS_READY)
  return target;
}

size_t C_FPS_READY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_FPS_READY)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isReady = 1;
  if (this->_internal_isready() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_FPS_READY::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_FPS_READY::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_FPS_READY::GetClassData() const { return &_class_data_; }


void C_FPS_READY::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_FPS_READY*>(&to_msg);
  auto& from = static_cast<const C_FPS_READY&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_FPS_READY)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isready() != 0) {
    _this->_internal_set_isready(from._internal_isready());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_FPS_READY::CopyFrom(const C_FPS_READY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_FPS_READY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_FPS_READY::IsInitialized() const {
  return true;
}

void C_FPS_READY::InternalSwap(C_FPS_READY* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.isready_, other->_impl_.isready_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_FPS_READY::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[17]);
}

// ===================================================================

class S_FPS_LOAD::_Internal {
 public:
};

S_FPS_LOAD::S_FPS_LOAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_FPS_LOAD)
}
S_FPS_LOAD::S_FPS_LOAD(const S_FPS_LOAD& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  S_FPS_LOAD* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_FPS_LOAD)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FPS_LOAD::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FPS_LOAD::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_FPS_LOAD::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[18]);
}

// ===================================================================

class S_FPS_START::_Internal {
 public:
};

S_FPS_START::S_FPS_START(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_FPS_START)
}
S_FPS_START::S_FPS_START(const S_FPS_START& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  S_FPS_START* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_FPS_START)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FPS_START::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FPS_START::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_FPS_START::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[19]);
}

// ===================================================================

class C_FPS_LOAD_COMPLETE::_Internal {
 public:
};

C_FPS_LOAD_COMPLETE::C_FPS_LOAD_COMPLETE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_FPS_LOAD_COMPLETE)
}
C_FPS_LOAD_COMPLETE::C_FPS_LOAD_COMPLETE(const C_FPS_LOAD_COMPLETE& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_FPS_LOAD_COMPLETE* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_FPS_LOAD_COMPLETE)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_FPS_LOAD_COMPLETE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_FPS_LOAD_COMPLETE::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_FPS_LOAD_COMPLETE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[20]);
}

// ===================================================================

class S_FPS_FINISH::_Internal {
 public:
};

S_FPS_FINISH::S_FPS_FINISH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_FPS_FINISH)
}
S_FPS_FINISH::S_FPS_FINISH(const S_FPS_FINISH& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  S_FPS_FINISH* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_FPS_FINISH)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FPS_FINISH::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FPS_FINISH::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_FPS_FINISH::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[21]);
}

// ===================================================================

class S_FPS_ANNOUNCE::_Internal {
 public:
};

S_FPS_ANNOUNCE::S_FPS_ANNOUNCE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_FPS_ANNOUNCE)
}
S_FPS_ANNOUNCE::S_FPS_ANNOUNCE(const S_FPS_ANNOUNCE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_FPS_ANNOUNCE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_FPS_ANNOUNCE)
}

inline void S_FPS_ANNOUNCE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_FPS_ANNOUNCE::~S_FPS_ANNOUNCE() {
  // @@protoc_insertion_point(destructor:Protocol.S_FPS_ANNOUNCE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_FPS_ANNOUNCE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void S_FPS_ANNOUNCE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_FPS_ANNOUNCE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_FPS_ANNOUNCE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_FPS_ANNOUNCE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_FPS_ANNOUNCE.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_FPS_ANNOUNCE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_FPS_ANNOUNCE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_FPS_ANNOUNCE.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_FPS_ANNOUNCE)
  return target;
}

size_t S_FPS_ANNOUNCE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_FPS_ANNOUNCE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FPS_ANNOUNCE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_FPS_ANNOUNCE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FPS_ANNOUNCE::GetClassData() const { return &_class_data_; }


void S_FPS_ANNOUNCE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_FPS_ANNOUNCE*>(&to_msg);
  auto& from = static_cast<const S_FPS_ANNOUNCE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_FPS_ANNOUNCE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_FPS_ANNOUNCE::CopyFrom(const S_FPS_ANNOUNCE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_FPS_ANNOUNCE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_FPS_ANNOUNCE::IsInitialized() const {
  return true;
}

void S_FPS_ANNOUNCE::InternalSwap(S_FPS_ANNOUNCE* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_FPS_ANNOUNCE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[22]);
}

// ===================================================================

class S_FPS_SPAWN_ITEM::_Internal {
 public:
  static const ::Protocol::Vector3& position(const S_FPS_SPAWN_ITEM* msg);
};

const ::Protocol::Vector3&
S_FPS_SPAWN_ITEM::_Internal::position(const S_FPS_SPAWN_ITEM* msg) {
  return *msg->_impl_.position_;
}
void S_FPS_SPAWN_ITEM::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
S_FPS_SPAWN_ITEM::S_FPS_SPAWN_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_FPS_SPAWN_ITEM)
}
S_FPS_SPAWN_ITEM::S_FPS_SPAWN_ITEM(const S_FPS_SPAWN_ITEM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_FPS_SPAWN_ITEM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_FPS_SPAWN_ITEM)
}

inline void S_FPS_SPAWN_ITEM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_FPS_SPAWN_ITEM::~S_FPS_SPAWN_ITEM() {
  // @@protoc_insertion_point(destructor:Protocol.S_FPS_SPAWN_ITEM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_FPS_SPAWN_ITEM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void S_FPS_SPAWN_ITEM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_FPS_SPAWN_ITEM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_FPS_SPAWN_ITEM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_FPS_SPAWN_ITEM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Vector3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_FPS_SPAWN_ITEM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_FPS_SPAWN_ITEM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_FPS_SPAWN_ITEM)
  return target;
}

size_t S_FPS_SPAWN_ITEM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_FPS_SPAWN_ITEM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FPS_SPAWN_ITEM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_FPS_SPAWN_ITEM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FPS_SPAWN_ITEM::GetClassData() const { return &_class_data_; }


void S_FPS_SPAWN_ITEM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_FPS_SPAWN_ITEM*>(&to_msg);
  auto& from = static_cast<const S_FPS_SPAWN_ITEM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_FPS_SPAWN_ITEM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_FPS_SPAWN_ITEM::CopyFrom(const S_FPS_SPAWN_ITEM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_FPS_SPAWN_ITEM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_FPS_SPAWN_ITEM::IsInitialized() const {
  return true;
}

void S_FPS_SPAWN_ITEM::InternalSwap(S_FPS_SPAWN_ITEM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.position_, other->_impl_.position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_FPS_SPAWN_ITEM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[23]);
}

// ===================================================================

class S_FPS_SPAWN_DESTINATION::_Internal {
 public:
  static const ::Protocol::Vector3& position(const S_FPS_SPAWN_DESTINATION* msg);
};

const ::Protocol::Vector3&
S_FPS_SPAWN_DESTINATION::_Internal::position(const S_FPS_SPAWN_DESTINATION* msg) {
  return *msg->_impl_.position_;
}
void S_FPS_SPAWN_DESTINATION::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
S_FPS_SPAWN_DESTINATION::S_FPS_SPAWN_DESTINATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_FPS_SPAWN_DESTINATION)
}
S_FPS_SPAWN_DESTINATION::S_FPS_SPAWN_DESTINATION(const S_FPS_SPAWN_DESTINATION& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_FPS_SPAWN_DESTINATION* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::Protocol::Vector3(*from._impl_.position_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_FPS_SPAWN_DESTINATION)
}

inline void S_FPS_SPAWN_DESTINATION::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_FPS_SPAWN_DESTINATION::~S_FPS_SPAWN_DESTINATION() {
  // @@protoc_insertion_point(destructor:Protocol.S_FPS_SPAWN_DESTINATION)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_FPS_SPAWN_DESTINATION::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
}

void S_FPS_SPAWN_DESTINATION::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_FPS_SPAWN_DESTINATION::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_FPS_SPAWN_DESTINATION)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_FPS_SPAWN_DESTINATION::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.Vector3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_FPS_SPAWN_DESTINATION::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_FPS_SPAWN_DESTINATION)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_FPS_SPAWN_DESTINATION)
  return target;
}

size_t S_FPS_SPAWN_DESTINATION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_FPS_SPAWN_DESTINATION)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.Vector3 position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FPS_SPAWN_DESTINATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_FPS_SPAWN_DESTINATION::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FPS_SPAWN_DESTINATION::GetClassData() const { return &_class_data_; }


void S_FPS_SPAWN_DESTINATION::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_FPS_SPAWN_DESTINATION*>(&to_msg);
  auto& from = static_cast<const S_FPS_SPAWN_DESTINATION&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_FPS_SPAWN_DESTINATION)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::Protocol::Vector3::MergeFrom(
        from._internal_position());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_FPS_SPAWN_DESTINATION::CopyFrom(const S_FPS_SPAWN_DESTINATION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_FPS_SPAWN_DESTINATION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_FPS_SPAWN_DESTINATION::IsInitialized() const {
  return true;
}

void S_FPS_SPAWN_DESTINATION::InternalSwap(S_FPS_SPAWN_DESTINATION* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.position_, other->_impl_.position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_FPS_SPAWN_DESTINATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[24]);
}

// ===================================================================

class S_FPS_DESTROY_DESTINATION::_Internal {
 public:
};

S_FPS_DESTROY_DESTINATION::S_FPS_DESTROY_DESTINATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.S_FPS_DESTROY_DESTINATION)
}
S_FPS_DESTROY_DESTINATION::S_FPS_DESTROY_DESTINATION(const S_FPS_DESTROY_DESTINATION& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  S_FPS_DESTROY_DESTINATION* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_FPS_DESTROY_DESTINATION)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FPS_DESTROY_DESTINATION::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FPS_DESTROY_DESTINATION::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata S_FPS_DESTROY_DESTINATION::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[25]);
}

// ===================================================================

class S_FPS_ITEM_OCCUPY_PROGRESS_STATE::_Internal {
 public:
};

S_FPS_ITEM_OCCUPY_PROGRESS_STATE::S_FPS_ITEM_OCCUPY_PROGRESS_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE)
}
S_FPS_ITEM_OCCUPY_PROGRESS_STATE::S_FPS_ITEM_OCCUPY_PROGRESS_STATE(const S_FPS_ITEM_OCCUPY_PROGRESS_STATE& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_FPS_ITEM_OCCUPY_PROGRESS_STATE* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.occupyprogressstate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.occupyprogressstate_ = from._impl_.occupyprogressstate_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE)
}

inline void S_FPS_ITEM_OCCUPY_PROGRESS_STATE::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.occupyprogressstate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_FPS_ITEM_OCCUPY_PROGRESS_STATE::~S_FPS_ITEM_OCCUPY_PROGRESS_STATE() {
  // @@protoc_insertion_point(destructor:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_FPS_ITEM_OCCUPY_PROGRESS_STATE::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_FPS_ITEM_OCCUPY_PROGRESS_STATE::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_FPS_ITEM_OCCUPY_PROGRESS_STATE::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.occupyprogressstate_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_FPS_ITEM_OCCUPY_PROGRESS_STATE::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 occupyProgressState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.occupyprogressstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_FPS_ITEM_OCCUPY_PROGRESS_STATE::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 occupyProgressState = 1;
  if (this->_internal_occupyprogressstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_occupyprogressstate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE)
  return target;
}

size_t S_FPS_ITEM_OCCUPY_PROGRESS_STATE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 occupyProgressState = 1;
  if (this->_internal_occupyprogressstate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_occupyprogressstate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FPS_ITEM_OCCUPY_PROGRESS_STATE::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_FPS_ITEM_OCCUPY_PROGRESS_STATE::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FPS_ITEM_OCCUPY_PROGRESS_STATE::GetClassData() const { return &_class_data_; }


void S_FPS_ITEM_OCCUPY_PROGRESS_STATE::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_FPS_ITEM_OCCUPY_PROGRESS_STATE*>(&to_msg);
  auto& from = static_cast<const S_FPS_ITEM_OCCUPY_PROGRESS_STATE&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_occupyprogressstate() != 0) {
    _this->_internal_set_occupyprogressstate(from._internal_occupyprogressstate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_FPS_ITEM_OCCUPY_PROGRESS_STATE::CopyFrom(const S_FPS_ITEM_OCCUPY_PROGRESS_STATE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_FPS_ITEM_OCCUPY_PROGRESS_STATE::IsInitialized() const {
  return true;
}

void S_FPS_ITEM_OCCUPY_PROGRESS_STATE::InternalSwap(S_FPS_ITEM_OCCUPY_PROGRESS_STATE* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.occupyprogressstate_, other->_impl_.occupyprogressstate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_FPS_ITEM_OCCUPY_PROGRESS_STATE::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[26]);
}

// ===================================================================

class S_FPS_ITEM_OCCUPIED::_Internal {
 public:
};

S_FPS_ITEM_OCCUPIED::S_FPS_ITEM_OCCUPIED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_FPS_ITEM_OCCUPIED)
}
S_FPS_ITEM_OCCUPIED::S_FPS_ITEM_OCCUPIED(const S_FPS_ITEM_OCCUPIED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_FPS_ITEM_OCCUPIED* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.occupier_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.occupier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.occupier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_occupier().empty()) {
    _this->_impl_.occupier_.Set(from._internal_occupier(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_FPS_ITEM_OCCUPIED)
}

inline void S_FPS_ITEM_OCCUPIED::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.occupier_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.occupier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.occupier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_FPS_ITEM_OCCUPIED::~S_FPS_ITEM_OCCUPIED() {
  // @@protoc_insertion_point(destructor:Protocol.S_FPS_ITEM_OCCUPIED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_FPS_ITEM_OCCUPIED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.occupier_.Destroy();
}

void S_FPS_ITEM_OCCUPIED::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_FPS_ITEM_OCCUPIED::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_FPS_ITEM_OCCUPIED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.occupier_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_FPS_ITEM_OCCUPIED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string occupier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_occupier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_FPS_ITEM_OCCUPIED.occupier"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_FPS_ITEM_OCCUPIED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_FPS_ITEM_OCCUPIED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string occupier = 1;
  if (!this->_internal_occupier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_occupier().data(), static_cast<int>(this->_internal_occupier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_FPS_ITEM_OCCUPIED.occupier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_occupier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_FPS_ITEM_OCCUPIED)
  return target;
}

size_t S_FPS_ITEM_OCCUPIED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_FPS_ITEM_OCCUPIED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string occupier = 1;
  if (!this->_internal_occupier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_occupier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FPS_ITEM_OCCUPIED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_FPS_ITEM_OCCUPIED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FPS_ITEM_OCCUPIED::GetClassData() const { return &_class_data_; }


void S_FPS_ITEM_OCCUPIED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_FPS_ITEM_OCCUPIED*>(&to_msg);
  auto& from = static_cast<const S_FPS_ITEM_OCCUPIED&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_FPS_ITEM_OCCUPIED)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_occupier().empty()) {
    _this->_internal_set_occupier(from._internal_occupier());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_FPS_ITEM_OCCUPIED::CopyFrom(const S_FPS_ITEM_OCCUPIED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_FPS_ITEM_OCCUPIED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_FPS_ITEM_OCCUPIED::IsInitialized() const {
  return true;
}

void S_FPS_ITEM_OCCUPIED::InternalSwap(S_FPS_ITEM_OCCUPIED* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.occupier_, lhs_arena,
      &other->_impl_.occupier_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_FPS_ITEM_OCCUPIED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[27]);
}

// ===================================================================

class S_FPS_SCORED::_Internal {
 public:
};

S_FPS_SCORED::S_FPS_SCORED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_FPS_SCORED)
}
S_FPS_SCORED::S_FPS_SCORED(const S_FPS_SCORED& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_FPS_SCORED* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scorer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.scorer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scorer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scorer().empty()) {
    _this->_impl_.scorer_.Set(from._internal_scorer(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_FPS_SCORED)
}

inline void S_FPS_SCORED::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scorer_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.scorer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scorer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_FPS_SCORED::~S_FPS_SCORED() {
  // @@protoc_insertion_point(destructor:Protocol.S_FPS_SCORED)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_FPS_SCORED::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.scorer_.Destroy();
}

void S_FPS_SCORED::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_FPS_SCORED::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_FPS_SCORED)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.scorer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_FPS_SCORED::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string scorer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_scorer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_FPS_SCORED.scorer"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_FPS_SCORED::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_FPS_SCORED)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string scorer = 1;
  if (!this->_internal_scorer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scorer().data(), static_cast<int>(this->_internal_scorer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_FPS_SCORED.scorer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scorer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_FPS_SCORED)
  return target;
}

size_t S_FPS_SCORED::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_FPS_SCORED)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scorer = 1;
  if (!this->_internal_scorer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scorer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_FPS_SCORED::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_FPS_SCORED::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_FPS_SCORED::GetClassData() const { return &_class_data_; }


void S_FPS_SCORED::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_FPS_SCORED*>(&to_msg);
  auto& from = static_cast<const S_FPS_SCORED&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_FPS_SCORED)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_scorer().empty()) {
    _this->_internal_set_scorer(from._internal_scorer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_FPS_SCORED::CopyFrom(const S_FPS_SCORED& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_FPS_SCORED)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_FPS_SCORED::IsInitialized() const {
  return true;
}

void S_FPS_SCORED::InternalSwap(S_FPS_SCORED* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scorer_, lhs_arena,
      &other->_impl_.scorer_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_FPS_SCORED::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_5f002_5fFPS_2eproto_getter, &descriptor_table_Packet_5f002_5fFPS_2eproto_once,
      file_level_metadata_Packet_5f002_5fFPS_2eproto[28]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::Quaternion*
Arena::CreateMaybeMessage< ::Protocol::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo*
Arena::CreateMaybeMessage< ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ADD_FPS_PLAYER_GameObjectInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ADD_FPS_PLAYER*
Arena::CreateMaybeMessage< ::Protocol::S_ADD_FPS_PLAYER >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ADD_FPS_PLAYER >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SET_FPS_POSITION*
Arena::CreateMaybeMessage< ::Protocol::C_SET_FPS_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SET_FPS_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SET_FPS_POSITION*
Arena::CreateMaybeMessage< ::Protocol::S_SET_FPS_POSITION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SET_FPS_POSITION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SET_FPS_ROTATION*
Arena::CreateMaybeMessage< ::Protocol::C_SET_FPS_ROTATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SET_FPS_ROTATION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SET_FPS_ROTATION*
Arena::CreateMaybeMessage< ::Protocol::S_SET_FPS_ROTATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SET_FPS_ROTATION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SHOOT*
Arena::CreateMaybeMessage< ::Protocol::C_SHOOT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SHOOT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SHOOT*
Arena::CreateMaybeMessage< ::Protocol::S_SHOOT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SHOOT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ATTACKED*
Arena::CreateMaybeMessage< ::Protocol::S_ATTACKED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ATTACKED >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHANGE_WEAPON*
Arena::CreateMaybeMessage< ::Protocol::C_CHANGE_WEAPON >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHANGE_WEAPON >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHANGE_WEAPON*
Arena::CreateMaybeMessage< ::Protocol::S_CHANGE_WEAPON >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHANGE_WEAPON >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_RELOAD*
Arena::CreateMaybeMessage< ::Protocol::C_RELOAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_RELOAD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_RELOAD*
Arena::CreateMaybeMessage< ::Protocol::S_RELOAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_RELOAD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::FPS_Animation*
Arena::CreateMaybeMessage< ::Protocol::FPS_Animation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::FPS_Animation >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_FPS_ANIMATION*
Arena::CreateMaybeMessage< ::Protocol::C_FPS_ANIMATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_FPS_ANIMATION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_FPS_ANIMATION*
Arena::CreateMaybeMessage< ::Protocol::S_FPS_ANIMATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_FPS_ANIMATION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_FPS_READY*
Arena::CreateMaybeMessage< ::Protocol::C_FPS_READY >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_FPS_READY >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_FPS_LOAD*
Arena::CreateMaybeMessage< ::Protocol::S_FPS_LOAD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_FPS_LOAD >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_FPS_START*
Arena::CreateMaybeMessage< ::Protocol::S_FPS_START >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_FPS_START >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_FPS_LOAD_COMPLETE*
Arena::CreateMaybeMessage< ::Protocol::C_FPS_LOAD_COMPLETE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_FPS_LOAD_COMPLETE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_FPS_FINISH*
Arena::CreateMaybeMessage< ::Protocol::S_FPS_FINISH >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_FPS_FINISH >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_FPS_ANNOUNCE*
Arena::CreateMaybeMessage< ::Protocol::S_FPS_ANNOUNCE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_FPS_ANNOUNCE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_FPS_SPAWN_ITEM*
Arena::CreateMaybeMessage< ::Protocol::S_FPS_SPAWN_ITEM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_FPS_SPAWN_ITEM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_FPS_SPAWN_DESTINATION*
Arena::CreateMaybeMessage< ::Protocol::S_FPS_SPAWN_DESTINATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_FPS_SPAWN_DESTINATION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_FPS_DESTROY_DESTINATION*
Arena::CreateMaybeMessage< ::Protocol::S_FPS_DESTROY_DESTINATION >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_FPS_DESTROY_DESTINATION >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_FPS_ITEM_OCCUPY_PROGRESS_STATE*
Arena::CreateMaybeMessage< ::Protocol::S_FPS_ITEM_OCCUPY_PROGRESS_STATE >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_FPS_ITEM_OCCUPY_PROGRESS_STATE >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_FPS_ITEM_OCCUPIED*
Arena::CreateMaybeMessage< ::Protocol::S_FPS_ITEM_OCCUPIED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_FPS_ITEM_OCCUPIED >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_FPS_SCORED*
Arena::CreateMaybeMessage< ::Protocol::S_FPS_SCORED >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_FPS_SCORED >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
