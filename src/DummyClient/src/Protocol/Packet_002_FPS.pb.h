// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet_002_FPS.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_5f002_5fFPS_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_5f002_5fFPS_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Packet_001_GameObject.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_5f002_5fFPS_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_5f002_5fFPS_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_5f002_5fFPS_2eproto;
namespace Protocol {
class C_FPS_ANIMATION;
struct C_FPS_ANIMATIONDefaultTypeInternal;
extern C_FPS_ANIMATIONDefaultTypeInternal _C_FPS_ANIMATION_default_instance_;
class C_FPS_CHANGE_WEAPON;
struct C_FPS_CHANGE_WEAPONDefaultTypeInternal;
extern C_FPS_CHANGE_WEAPONDefaultTypeInternal _C_FPS_CHANGE_WEAPON_default_instance_;
class C_FPS_LOAD_COMPLETE;
struct C_FPS_LOAD_COMPLETEDefaultTypeInternal;
extern C_FPS_LOAD_COMPLETEDefaultTypeInternal _C_FPS_LOAD_COMPLETE_default_instance_;
class C_FPS_POSITION;
struct C_FPS_POSITIONDefaultTypeInternal;
extern C_FPS_POSITIONDefaultTypeInternal _C_FPS_POSITION_default_instance_;
class C_FPS_READY;
struct C_FPS_READYDefaultTypeInternal;
extern C_FPS_READYDefaultTypeInternal _C_FPS_READY_default_instance_;
class C_FPS_RELOAD;
struct C_FPS_RELOADDefaultTypeInternal;
extern C_FPS_RELOADDefaultTypeInternal _C_FPS_RELOAD_default_instance_;
class C_FPS_ROTATION;
struct C_FPS_ROTATIONDefaultTypeInternal;
extern C_FPS_ROTATIONDefaultTypeInternal _C_FPS_ROTATION_default_instance_;
class C_FPS_SHOOT;
struct C_FPS_SHOOTDefaultTypeInternal;
extern C_FPS_SHOOTDefaultTypeInternal _C_FPS_SHOOT_default_instance_;
class FPSAnimation;
struct FPSAnimationDefaultTypeInternal;
extern FPSAnimationDefaultTypeInternal _FPSAnimation_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class S_FPS_ANIMATION;
struct S_FPS_ANIMATIONDefaultTypeInternal;
extern S_FPS_ANIMATIONDefaultTypeInternal _S_FPS_ANIMATION_default_instance_;
class S_FPS_ANNOUNCE;
struct S_FPS_ANNOUNCEDefaultTypeInternal;
extern S_FPS_ANNOUNCEDefaultTypeInternal _S_FPS_ANNOUNCE_default_instance_;
class S_FPS_ATTACKED;
struct S_FPS_ATTACKEDDefaultTypeInternal;
extern S_FPS_ATTACKEDDefaultTypeInternal _S_FPS_ATTACKED_default_instance_;
class S_FPS_CHANGE_WEAPON;
struct S_FPS_CHANGE_WEAPONDefaultTypeInternal;
extern S_FPS_CHANGE_WEAPONDefaultTypeInternal _S_FPS_CHANGE_WEAPON_default_instance_;
class S_FPS_DESTROY_DESTINATION;
struct S_FPS_DESTROY_DESTINATIONDefaultTypeInternal;
extern S_FPS_DESTROY_DESTINATIONDefaultTypeInternal _S_FPS_DESTROY_DESTINATION_default_instance_;
class S_FPS_FINISH;
struct S_FPS_FINISHDefaultTypeInternal;
extern S_FPS_FINISHDefaultTypeInternal _S_FPS_FINISH_default_instance_;
class S_FPS_INSTANTIATE;
struct S_FPS_INSTANTIATEDefaultTypeInternal;
extern S_FPS_INSTANTIATEDefaultTypeInternal _S_FPS_INSTANTIATE_default_instance_;
class S_FPS_ITEM_OCCUPIED;
struct S_FPS_ITEM_OCCUPIEDDefaultTypeInternal;
extern S_FPS_ITEM_OCCUPIEDDefaultTypeInternal _S_FPS_ITEM_OCCUPIED_default_instance_;
class S_FPS_ITEM_OCCUPY_PROGRESS_STATE;
struct S_FPS_ITEM_OCCUPY_PROGRESS_STATEDefaultTypeInternal;
extern S_FPS_ITEM_OCCUPY_PROGRESS_STATEDefaultTypeInternal _S_FPS_ITEM_OCCUPY_PROGRESS_STATE_default_instance_;
class S_FPS_LOAD;
struct S_FPS_LOADDefaultTypeInternal;
extern S_FPS_LOADDefaultTypeInternal _S_FPS_LOAD_default_instance_;
class S_FPS_POSITION;
struct S_FPS_POSITIONDefaultTypeInternal;
extern S_FPS_POSITIONDefaultTypeInternal _S_FPS_POSITION_default_instance_;
class S_FPS_RELOAD;
struct S_FPS_RELOADDefaultTypeInternal;
extern S_FPS_RELOADDefaultTypeInternal _S_FPS_RELOAD_default_instance_;
class S_FPS_ROTATION;
struct S_FPS_ROTATIONDefaultTypeInternal;
extern S_FPS_ROTATIONDefaultTypeInternal _S_FPS_ROTATION_default_instance_;
class S_FPS_SCORED;
struct S_FPS_SCOREDDefaultTypeInternal;
extern S_FPS_SCOREDDefaultTypeInternal _S_FPS_SCORED_default_instance_;
class S_FPS_SHOOT;
struct S_FPS_SHOOTDefaultTypeInternal;
extern S_FPS_SHOOTDefaultTypeInternal _S_FPS_SHOOT_default_instance_;
class S_FPS_SPAWN_DESTINATION;
struct S_FPS_SPAWN_DESTINATIONDefaultTypeInternal;
extern S_FPS_SPAWN_DESTINATIONDefaultTypeInternal _S_FPS_SPAWN_DESTINATION_default_instance_;
class S_FPS_SPAWN_ITEM;
struct S_FPS_SPAWN_ITEMDefaultTypeInternal;
extern S_FPS_SPAWN_ITEMDefaultTypeInternal _S_FPS_SPAWN_ITEM_default_instance_;
class S_FPS_START;
struct S_FPS_STARTDefaultTypeInternal;
extern S_FPS_STARTDefaultTypeInternal _S_FPS_START_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_FPS_ANIMATION* Arena::CreateMaybeMessage<::Protocol::C_FPS_ANIMATION>(Arena*);
template<> ::Protocol::C_FPS_CHANGE_WEAPON* Arena::CreateMaybeMessage<::Protocol::C_FPS_CHANGE_WEAPON>(Arena*);
template<> ::Protocol::C_FPS_LOAD_COMPLETE* Arena::CreateMaybeMessage<::Protocol::C_FPS_LOAD_COMPLETE>(Arena*);
template<> ::Protocol::C_FPS_POSITION* Arena::CreateMaybeMessage<::Protocol::C_FPS_POSITION>(Arena*);
template<> ::Protocol::C_FPS_READY* Arena::CreateMaybeMessage<::Protocol::C_FPS_READY>(Arena*);
template<> ::Protocol::C_FPS_RELOAD* Arena::CreateMaybeMessage<::Protocol::C_FPS_RELOAD>(Arena*);
template<> ::Protocol::C_FPS_ROTATION* Arena::CreateMaybeMessage<::Protocol::C_FPS_ROTATION>(Arena*);
template<> ::Protocol::C_FPS_SHOOT* Arena::CreateMaybeMessage<::Protocol::C_FPS_SHOOT>(Arena*);
template<> ::Protocol::FPSAnimation* Arena::CreateMaybeMessage<::Protocol::FPSAnimation>(Arena*);
template<> ::Protocol::Quaternion* Arena::CreateMaybeMessage<::Protocol::Quaternion>(Arena*);
template<> ::Protocol::S_FPS_ANIMATION* Arena::CreateMaybeMessage<::Protocol::S_FPS_ANIMATION>(Arena*);
template<> ::Protocol::S_FPS_ANNOUNCE* Arena::CreateMaybeMessage<::Protocol::S_FPS_ANNOUNCE>(Arena*);
template<> ::Protocol::S_FPS_ATTACKED* Arena::CreateMaybeMessage<::Protocol::S_FPS_ATTACKED>(Arena*);
template<> ::Protocol::S_FPS_CHANGE_WEAPON* Arena::CreateMaybeMessage<::Protocol::S_FPS_CHANGE_WEAPON>(Arena*);
template<> ::Protocol::S_FPS_DESTROY_DESTINATION* Arena::CreateMaybeMessage<::Protocol::S_FPS_DESTROY_DESTINATION>(Arena*);
template<> ::Protocol::S_FPS_FINISH* Arena::CreateMaybeMessage<::Protocol::S_FPS_FINISH>(Arena*);
template<> ::Protocol::S_FPS_INSTANTIATE* Arena::CreateMaybeMessage<::Protocol::S_FPS_INSTANTIATE>(Arena*);
template<> ::Protocol::S_FPS_ITEM_OCCUPIED* Arena::CreateMaybeMessage<::Protocol::S_FPS_ITEM_OCCUPIED>(Arena*);
template<> ::Protocol::S_FPS_ITEM_OCCUPY_PROGRESS_STATE* Arena::CreateMaybeMessage<::Protocol::S_FPS_ITEM_OCCUPY_PROGRESS_STATE>(Arena*);
template<> ::Protocol::S_FPS_LOAD* Arena::CreateMaybeMessage<::Protocol::S_FPS_LOAD>(Arena*);
template<> ::Protocol::S_FPS_POSITION* Arena::CreateMaybeMessage<::Protocol::S_FPS_POSITION>(Arena*);
template<> ::Protocol::S_FPS_RELOAD* Arena::CreateMaybeMessage<::Protocol::S_FPS_RELOAD>(Arena*);
template<> ::Protocol::S_FPS_ROTATION* Arena::CreateMaybeMessage<::Protocol::S_FPS_ROTATION>(Arena*);
template<> ::Protocol::S_FPS_SCORED* Arena::CreateMaybeMessage<::Protocol::S_FPS_SCORED>(Arena*);
template<> ::Protocol::S_FPS_SHOOT* Arena::CreateMaybeMessage<::Protocol::S_FPS_SHOOT>(Arena*);
template<> ::Protocol::S_FPS_SPAWN_DESTINATION* Arena::CreateMaybeMessage<::Protocol::S_FPS_SPAWN_DESTINATION>(Arena*);
template<> ::Protocol::S_FPS_SPAWN_ITEM* Arena::CreateMaybeMessage<::Protocol::S_FPS_SPAWN_ITEM>(Arena*);
template<> ::Protocol::S_FPS_START* Arena::CreateMaybeMessage<::Protocol::S_FPS_START>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Quaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  explicit PROTOBUF_CONSTEXPR Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Quaternion& from) {
    Quaternion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float w_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_INSTANTIATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_INSTANTIATE) */ {
 public:
  inline S_FPS_INSTANTIATE() : S_FPS_INSTANTIATE(nullptr) {}
  ~S_FPS_INSTANTIATE() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_INSTANTIATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_INSTANTIATE(const S_FPS_INSTANTIATE& from);
  S_FPS_INSTANTIATE(S_FPS_INSTANTIATE&& from) noexcept
    : S_FPS_INSTANTIATE() {
    *this = ::std::move(from);
  }

  inline S_FPS_INSTANTIATE& operator=(const S_FPS_INSTANTIATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_INSTANTIATE& operator=(S_FPS_INSTANTIATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_INSTANTIATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_INSTANTIATE* internal_default_instance() {
    return reinterpret_cast<const S_FPS_INSTANTIATE*>(
               &_S_FPS_INSTANTIATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_FPS_INSTANTIATE& a, S_FPS_INSTANTIATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_INSTANTIATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_INSTANTIATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_INSTANTIATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_INSTANTIATE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_INSTANTIATE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_INSTANTIATE& from) {
    S_FPS_INSTANTIATE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_INSTANTIATE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_INSTANTIATE";
  }
  protected:
  explicit S_FPS_INSTANTIATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerIdFieldNumber = 1,
    kPositionFieldNumber = 3,
    kRotationFieldNumber = 4,
    kPlayerIdFieldNumber = 2,
    kHpFieldNumber = 5,
  };
  // string ownerId = 1;
  void clear_ownerid();
  const std::string& ownerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ownerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ownerid();
  PROTOBUF_NODISCARD std::string* release_ownerid();
  void set_allocated_ownerid(std::string* ownerid);
  private:
  const std::string& _internal_ownerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ownerid(const std::string& value);
  std::string* _internal_mutable_ownerid();
  public:

  // .Protocol.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Quaternion rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Quaternion& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Quaternion* release_rotation();
  ::Protocol::Quaternion* mutable_rotation();
  void set_allocated_rotation(::Protocol::Quaternion* rotation);
  private:
  const ::Protocol::Quaternion& _internal_rotation() const;
  ::Protocol::Quaternion* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Quaternion* rotation);
  ::Protocol::Quaternion* unsafe_arena_release_rotation();

  // int32 playerId = 2;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // int32 hp = 5;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_INSTANTIATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ownerid_;
    ::Protocol::Vector3* position_;
    ::Protocol::Quaternion* rotation_;
    int32_t playerid_;
    int32_t hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class C_FPS_POSITION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_FPS_POSITION) */ {
 public:
  inline C_FPS_POSITION() : C_FPS_POSITION(nullptr) {}
  ~C_FPS_POSITION() override;
  explicit PROTOBUF_CONSTEXPR C_FPS_POSITION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_FPS_POSITION(const C_FPS_POSITION& from);
  C_FPS_POSITION(C_FPS_POSITION&& from) noexcept
    : C_FPS_POSITION() {
    *this = ::std::move(from);
  }

  inline C_FPS_POSITION& operator=(const C_FPS_POSITION& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_FPS_POSITION& operator=(C_FPS_POSITION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_FPS_POSITION& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_FPS_POSITION* internal_default_instance() {
    return reinterpret_cast<const C_FPS_POSITION*>(
               &_C_FPS_POSITION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_FPS_POSITION& a, C_FPS_POSITION& b) {
    a.Swap(&b);
  }
  inline void Swap(C_FPS_POSITION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_FPS_POSITION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_FPS_POSITION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_FPS_POSITION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_FPS_POSITION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_FPS_POSITION& from) {
    C_FPS_POSITION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_FPS_POSITION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_FPS_POSITION";
  }
  protected:
  explicit C_FPS_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // .Protocol.Vector3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::Protocol::Vector3& velocity() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_velocity();
  ::Protocol::Vector3* mutable_velocity();
  void set_allocated_velocity(::Protocol::Vector3* velocity);
  private:
  const ::Protocol::Vector3& _internal_velocity() const;
  ::Protocol::Vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::Protocol::Vector3* velocity);
  ::Protocol::Vector3* unsafe_arena_release_velocity();

  // int64 timestamp = 1;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_FPS_POSITION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* velocity_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_POSITION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_POSITION) */ {
 public:
  inline S_FPS_POSITION() : S_FPS_POSITION(nullptr) {}
  ~S_FPS_POSITION() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_POSITION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_POSITION(const S_FPS_POSITION& from);
  S_FPS_POSITION(S_FPS_POSITION&& from) noexcept
    : S_FPS_POSITION() {
    *this = ::std::move(from);
  }

  inline S_FPS_POSITION& operator=(const S_FPS_POSITION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_POSITION& operator=(S_FPS_POSITION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_POSITION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_POSITION* internal_default_instance() {
    return reinterpret_cast<const S_FPS_POSITION*>(
               &_S_FPS_POSITION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_FPS_POSITION& a, S_FPS_POSITION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_POSITION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_POSITION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_POSITION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_POSITION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_POSITION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_POSITION& from) {
    S_FPS_POSITION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_POSITION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_POSITION";
  }
  protected:
  explicit S_FPS_POSITION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kTimestampFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .Protocol.Vector3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::Protocol::Vector3& velocity() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_velocity();
  ::Protocol::Vector3* mutable_velocity();
  void set_allocated_velocity(::Protocol::Vector3* velocity);
  private:
  const ::Protocol::Vector3& _internal_velocity() const;
  ::Protocol::Vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::Protocol::Vector3* velocity);
  ::Protocol::Vector3* unsafe_arena_release_velocity();

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 playerId = 1;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_POSITION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* velocity_;
    int64_t timestamp_;
    int32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class C_FPS_ROTATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_FPS_ROTATION) */ {
 public:
  inline C_FPS_ROTATION() : C_FPS_ROTATION(nullptr) {}
  ~C_FPS_ROTATION() override;
  explicit PROTOBUF_CONSTEXPR C_FPS_ROTATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_FPS_ROTATION(const C_FPS_ROTATION& from);
  C_FPS_ROTATION(C_FPS_ROTATION&& from) noexcept
    : C_FPS_ROTATION() {
    *this = ::std::move(from);
  }

  inline C_FPS_ROTATION& operator=(const C_FPS_ROTATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_FPS_ROTATION& operator=(C_FPS_ROTATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_FPS_ROTATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_FPS_ROTATION* internal_default_instance() {
    return reinterpret_cast<const C_FPS_ROTATION*>(
               &_C_FPS_ROTATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_FPS_ROTATION& a, C_FPS_ROTATION& b) {
    a.Swap(&b);
  }
  inline void Swap(C_FPS_ROTATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_FPS_ROTATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_FPS_ROTATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_FPS_ROTATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_FPS_ROTATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_FPS_ROTATION& from) {
    C_FPS_ROTATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_FPS_ROTATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_FPS_ROTATION";
  }
  protected:
  explicit C_FPS_ROTATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 1,
  };
  // .Protocol.Quaternion rotation = 1;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Quaternion& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Quaternion* release_rotation();
  ::Protocol::Quaternion* mutable_rotation();
  void set_allocated_rotation(::Protocol::Quaternion* rotation);
  private:
  const ::Protocol::Quaternion& _internal_rotation() const;
  ::Protocol::Quaternion* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Quaternion* rotation);
  ::Protocol::Quaternion* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:Protocol.C_FPS_ROTATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Quaternion* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_ROTATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_ROTATION) */ {
 public:
  inline S_FPS_ROTATION() : S_FPS_ROTATION(nullptr) {}
  ~S_FPS_ROTATION() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_ROTATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_ROTATION(const S_FPS_ROTATION& from);
  S_FPS_ROTATION(S_FPS_ROTATION&& from) noexcept
    : S_FPS_ROTATION() {
    *this = ::std::move(from);
  }

  inline S_FPS_ROTATION& operator=(const S_FPS_ROTATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_ROTATION& operator=(S_FPS_ROTATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_ROTATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_ROTATION* internal_default_instance() {
    return reinterpret_cast<const S_FPS_ROTATION*>(
               &_S_FPS_ROTATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_FPS_ROTATION& a, S_FPS_ROTATION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_ROTATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_ROTATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_ROTATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_ROTATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_ROTATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_ROTATION& from) {
    S_FPS_ROTATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_ROTATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_ROTATION";
  }
  protected:
  explicit S_FPS_ROTATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .Protocol.Quaternion rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Protocol::Quaternion& rotation() const;
  PROTOBUF_NODISCARD ::Protocol::Quaternion* release_rotation();
  ::Protocol::Quaternion* mutable_rotation();
  void set_allocated_rotation(::Protocol::Quaternion* rotation);
  private:
  const ::Protocol::Quaternion& _internal_rotation() const;
  ::Protocol::Quaternion* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Protocol::Quaternion* rotation);
  ::Protocol::Quaternion* unsafe_arena_release_rotation();

  // int32 playerId = 1;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_ROTATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Quaternion* rotation_;
    int32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class C_FPS_SHOOT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_FPS_SHOOT) */ {
 public:
  inline C_FPS_SHOOT() : C_FPS_SHOOT(nullptr) {}
  ~C_FPS_SHOOT() override;
  explicit PROTOBUF_CONSTEXPR C_FPS_SHOOT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_FPS_SHOOT(const C_FPS_SHOOT& from);
  C_FPS_SHOOT(C_FPS_SHOOT&& from) noexcept
    : C_FPS_SHOOT() {
    *this = ::std::move(from);
  }

  inline C_FPS_SHOOT& operator=(const C_FPS_SHOOT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_FPS_SHOOT& operator=(C_FPS_SHOOT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_FPS_SHOOT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_FPS_SHOOT* internal_default_instance() {
    return reinterpret_cast<const C_FPS_SHOOT*>(
               &_C_FPS_SHOOT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_FPS_SHOOT& a, C_FPS_SHOOT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_FPS_SHOOT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_FPS_SHOOT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_FPS_SHOOT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_FPS_SHOOT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_FPS_SHOOT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_FPS_SHOOT& from) {
    C_FPS_SHOOT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_FPS_SHOOT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_FPS_SHOOT";
  }
  protected:
  explicit C_FPS_SHOOT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kDirectionFieldNumber = 2,
  };
  // .Protocol.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // .Protocol.Vector3 direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::Protocol::Vector3& direction() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_direction();
  ::Protocol::Vector3* mutable_direction();
  void set_allocated_direction(::Protocol::Vector3* direction);
  private:
  const ::Protocol::Vector3& _internal_direction() const;
  ::Protocol::Vector3* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::Protocol::Vector3* direction);
  ::Protocol::Vector3* unsafe_arena_release_direction();

  // @@protoc_insertion_point(class_scope:Protocol.C_FPS_SHOOT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    ::Protocol::Vector3* direction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_SHOOT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_SHOOT) */ {
 public:
  inline S_FPS_SHOOT() : S_FPS_SHOOT(nullptr) {}
  ~S_FPS_SHOOT() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_SHOOT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_SHOOT(const S_FPS_SHOOT& from);
  S_FPS_SHOOT(S_FPS_SHOOT&& from) noexcept
    : S_FPS_SHOOT() {
    *this = ::std::move(from);
  }

  inline S_FPS_SHOOT& operator=(const S_FPS_SHOOT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_SHOOT& operator=(S_FPS_SHOOT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_SHOOT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_SHOOT* internal_default_instance() {
    return reinterpret_cast<const S_FPS_SHOOT*>(
               &_S_FPS_SHOOT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_FPS_SHOOT& a, S_FPS_SHOOT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_SHOOT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_SHOOT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_SHOOT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_SHOOT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_SHOOT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_SHOOT& from) {
    S_FPS_SHOOT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_SHOOT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_SHOOT";
  }
  protected:
  explicit S_FPS_SHOOT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 playerId = 1;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_SHOOT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_ATTACKED final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_ATTACKED) */ {
 public:
  inline S_FPS_ATTACKED() : S_FPS_ATTACKED(nullptr) {}
  ~S_FPS_ATTACKED() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_ATTACKED(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_ATTACKED(const S_FPS_ATTACKED& from);
  S_FPS_ATTACKED(S_FPS_ATTACKED&& from) noexcept
    : S_FPS_ATTACKED() {
    *this = ::std::move(from);
  }

  inline S_FPS_ATTACKED& operator=(const S_FPS_ATTACKED& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_ATTACKED& operator=(S_FPS_ATTACKED&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_ATTACKED& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_ATTACKED* internal_default_instance() {
    return reinterpret_cast<const S_FPS_ATTACKED*>(
               &_S_FPS_ATTACKED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_FPS_ATTACKED& a, S_FPS_ATTACKED& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_ATTACKED* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_ATTACKED* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_ATTACKED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_ATTACKED>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_ATTACKED& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_ATTACKED& from) {
    S_FPS_ATTACKED::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_ATTACKED* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_ATTACKED";
  }
  protected:
  explicit S_FPS_ATTACKED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayeridFieldNumber = 1,
    kDamageFieldNumber = 2,
    kHpFieldNumber = 3,
  };
  // int32 playerid = 1;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // int32 damage = 2;
  void clear_damage();
  int32_t damage() const;
  void set_damage(int32_t value);
  private:
  int32_t _internal_damage() const;
  void _internal_set_damage(int32_t value);
  public:

  // int32 hp = 3;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_ATTACKED)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playerid_;
    int32_t damage_;
    int32_t hp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class C_FPS_CHANGE_WEAPON final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_FPS_CHANGE_WEAPON) */ {
 public:
  inline C_FPS_CHANGE_WEAPON() : C_FPS_CHANGE_WEAPON(nullptr) {}
  ~C_FPS_CHANGE_WEAPON() override;
  explicit PROTOBUF_CONSTEXPR C_FPS_CHANGE_WEAPON(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_FPS_CHANGE_WEAPON(const C_FPS_CHANGE_WEAPON& from);
  C_FPS_CHANGE_WEAPON(C_FPS_CHANGE_WEAPON&& from) noexcept
    : C_FPS_CHANGE_WEAPON() {
    *this = ::std::move(from);
  }

  inline C_FPS_CHANGE_WEAPON& operator=(const C_FPS_CHANGE_WEAPON& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_FPS_CHANGE_WEAPON& operator=(C_FPS_CHANGE_WEAPON&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_FPS_CHANGE_WEAPON& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_FPS_CHANGE_WEAPON* internal_default_instance() {
    return reinterpret_cast<const C_FPS_CHANGE_WEAPON*>(
               &_C_FPS_CHANGE_WEAPON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_FPS_CHANGE_WEAPON& a, C_FPS_CHANGE_WEAPON& b) {
    a.Swap(&b);
  }
  inline void Swap(C_FPS_CHANGE_WEAPON* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_FPS_CHANGE_WEAPON* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_FPS_CHANGE_WEAPON* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_FPS_CHANGE_WEAPON>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_FPS_CHANGE_WEAPON& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_FPS_CHANGE_WEAPON& from) {
    C_FPS_CHANGE_WEAPON::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_FPS_CHANGE_WEAPON* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_FPS_CHANGE_WEAPON";
  }
  protected:
  explicit C_FPS_CHANGE_WEAPON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 2,
    kWeaponIdFieldNumber = 1,
  };
  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // int32 weaponId = 1;
  void clear_weaponid();
  int32_t weaponid() const;
  void set_weaponid(int32_t value);
  private:
  int32_t _internal_weaponid() const;
  void _internal_set_weaponid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_FPS_CHANGE_WEAPON)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_;
    int32_t weaponid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_CHANGE_WEAPON final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_CHANGE_WEAPON) */ {
 public:
  inline S_FPS_CHANGE_WEAPON() : S_FPS_CHANGE_WEAPON(nullptr) {}
  ~S_FPS_CHANGE_WEAPON() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_CHANGE_WEAPON(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_CHANGE_WEAPON(const S_FPS_CHANGE_WEAPON& from);
  S_FPS_CHANGE_WEAPON(S_FPS_CHANGE_WEAPON&& from) noexcept
    : S_FPS_CHANGE_WEAPON() {
    *this = ::std::move(from);
  }

  inline S_FPS_CHANGE_WEAPON& operator=(const S_FPS_CHANGE_WEAPON& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_CHANGE_WEAPON& operator=(S_FPS_CHANGE_WEAPON&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_CHANGE_WEAPON& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_CHANGE_WEAPON* internal_default_instance() {
    return reinterpret_cast<const S_FPS_CHANGE_WEAPON*>(
               &_S_FPS_CHANGE_WEAPON_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_FPS_CHANGE_WEAPON& a, S_FPS_CHANGE_WEAPON& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_CHANGE_WEAPON* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_CHANGE_WEAPON* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_CHANGE_WEAPON* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_CHANGE_WEAPON>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_CHANGE_WEAPON& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_CHANGE_WEAPON& from) {
    S_FPS_CHANGE_WEAPON::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_CHANGE_WEAPON* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_CHANGE_WEAPON";
  }
  protected:
  explicit S_FPS_CHANGE_WEAPON(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kWeaponIdFieldNumber = 2,
    kTimestampFieldNumber = 3,
  };
  // int32 playerId = 1;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // int32 weaponId = 2;
  void clear_weaponid();
  int32_t weaponid() const;
  void set_weaponid(int32_t value);
  private:
  int32_t _internal_weaponid() const;
  void _internal_set_weaponid(int32_t value);
  public:

  // int64 timestamp = 3;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_CHANGE_WEAPON)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playerid_;
    int32_t weaponid_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class C_FPS_RELOAD final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_FPS_RELOAD) */ {
 public:
  inline C_FPS_RELOAD() : C_FPS_RELOAD(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_FPS_RELOAD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_FPS_RELOAD(const C_FPS_RELOAD& from);
  C_FPS_RELOAD(C_FPS_RELOAD&& from) noexcept
    : C_FPS_RELOAD() {
    *this = ::std::move(from);
  }

  inline C_FPS_RELOAD& operator=(const C_FPS_RELOAD& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_FPS_RELOAD& operator=(C_FPS_RELOAD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_FPS_RELOAD& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_FPS_RELOAD* internal_default_instance() {
    return reinterpret_cast<const C_FPS_RELOAD*>(
               &_C_FPS_RELOAD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(C_FPS_RELOAD& a, C_FPS_RELOAD& b) {
    a.Swap(&b);
  }
  inline void Swap(C_FPS_RELOAD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_FPS_RELOAD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_FPS_RELOAD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_FPS_RELOAD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_FPS_RELOAD& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_FPS_RELOAD& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_FPS_RELOAD";
  }
  protected:
  explicit C_FPS_RELOAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_FPS_RELOAD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_RELOAD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_RELOAD) */ {
 public:
  inline S_FPS_RELOAD() : S_FPS_RELOAD(nullptr) {}
  ~S_FPS_RELOAD() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_RELOAD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_RELOAD(const S_FPS_RELOAD& from);
  S_FPS_RELOAD(S_FPS_RELOAD&& from) noexcept
    : S_FPS_RELOAD() {
    *this = ::std::move(from);
  }

  inline S_FPS_RELOAD& operator=(const S_FPS_RELOAD& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_RELOAD& operator=(S_FPS_RELOAD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_RELOAD& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_RELOAD* internal_default_instance() {
    return reinterpret_cast<const S_FPS_RELOAD*>(
               &_S_FPS_RELOAD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_FPS_RELOAD& a, S_FPS_RELOAD& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_RELOAD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_RELOAD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_RELOAD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_RELOAD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_RELOAD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_RELOAD& from) {
    S_FPS_RELOAD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_RELOAD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_RELOAD";
  }
  protected:
  explicit S_FPS_RELOAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 playerId = 1;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_RELOAD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class FPSAnimation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.FPSAnimation) */ {
 public:
  inline FPSAnimation() : FPSAnimation(nullptr) {}
  ~FPSAnimation() override;
  explicit PROTOBUF_CONSTEXPR FPSAnimation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FPSAnimation(const FPSAnimation& from);
  FPSAnimation(FPSAnimation&& from) noexcept
    : FPSAnimation() {
    *this = ::std::move(from);
  }

  inline FPSAnimation& operator=(const FPSAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FPSAnimation& operator=(FPSAnimation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FPSAnimation& default_instance() {
    return *internal_default_instance();
  }
  static inline const FPSAnimation* internal_default_instance() {
    return reinterpret_cast<const FPSAnimation*>(
               &_FPSAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FPSAnimation& a, FPSAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(FPSAnimation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FPSAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FPSAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FPSAnimation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FPSAnimation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FPSAnimation& from) {
    FPSAnimation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FPSAnimation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.FPSAnimation";
  }
  protected:
  explicit FPSAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveXFieldNumber = 1,
    kMoveYFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kSprintingFieldNumber = 6,
    kPoseStateFieldNumber = 7,
    kMovementStateFieldNumber = 8,
    kMovingFieldNumber = 4,
    kInAirFieldNumber = 5,
    kIsTurningFieldNumber = 11,
    kTurnRightFieldNumber = 12,
    kLookXFieldNumber = 9,
    kLookYFieldNumber = 10,
    kAimingFieldNumber = 13,
  };
  // float moveX = 1;
  void clear_movex();
  float movex() const;
  void set_movex(float value);
  private:
  float _internal_movex() const;
  void _internal_set_movex(float value);
  public:

  // float moveY = 2;
  void clear_movey();
  float movey() const;
  void set_movey(float value);
  private:
  float _internal_movey() const;
  void _internal_set_movey(float value);
  public:

  // float velocity = 3;
  void clear_velocity();
  float velocity() const;
  void set_velocity(float value);
  private:
  float _internal_velocity() const;
  void _internal_set_velocity(float value);
  public:

  // float sprinting = 6;
  void clear_sprinting();
  float sprinting() const;
  void set_sprinting(float value);
  private:
  float _internal_sprinting() const;
  void _internal_set_sprinting(float value);
  public:

  // int32 poseState = 7;
  void clear_posestate();
  int32_t posestate() const;
  void set_posestate(int32_t value);
  private:
  int32_t _internal_posestate() const;
  void _internal_set_posestate(int32_t value);
  public:

  // int32 movementState = 8;
  void clear_movementstate();
  int32_t movementstate() const;
  void set_movementstate(int32_t value);
  private:
  int32_t _internal_movementstate() const;
  void _internal_set_movementstate(int32_t value);
  public:

  // bool moving = 4;
  void clear_moving();
  bool moving() const;
  void set_moving(bool value);
  private:
  bool _internal_moving() const;
  void _internal_set_moving(bool value);
  public:

  // bool inAir = 5;
  void clear_inair();
  bool inair() const;
  void set_inair(bool value);
  private:
  bool _internal_inair() const;
  void _internal_set_inair(bool value);
  public:

  // bool isTurning = 11;
  void clear_isturning();
  bool isturning() const;
  void set_isturning(bool value);
  private:
  bool _internal_isturning() const;
  void _internal_set_isturning(bool value);
  public:

  // bool turnRight = 12;
  void clear_turnright();
  bool turnright() const;
  void set_turnright(bool value);
  private:
  bool _internal_turnright() const;
  void _internal_set_turnright(bool value);
  public:

  // float lookX = 9;
  void clear_lookx();
  float lookx() const;
  void set_lookx(float value);
  private:
  float _internal_lookx() const;
  void _internal_set_lookx(float value);
  public:

  // float lookY = 10;
  void clear_looky();
  float looky() const;
  void set_looky(float value);
  private:
  float _internal_looky() const;
  void _internal_set_looky(float value);
  public:

  // bool aiming = 13;
  void clear_aiming();
  bool aiming() const;
  void set_aiming(bool value);
  private:
  bool _internal_aiming() const;
  void _internal_set_aiming(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.FPSAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float movex_;
    float movey_;
    float velocity_;
    float sprinting_;
    int32_t posestate_;
    int32_t movementstate_;
    bool moving_;
    bool inair_;
    bool isturning_;
    bool turnright_;
    float lookx_;
    float looky_;
    bool aiming_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class C_FPS_ANIMATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_FPS_ANIMATION) */ {
 public:
  inline C_FPS_ANIMATION() : C_FPS_ANIMATION(nullptr) {}
  ~C_FPS_ANIMATION() override;
  explicit PROTOBUF_CONSTEXPR C_FPS_ANIMATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_FPS_ANIMATION(const C_FPS_ANIMATION& from);
  C_FPS_ANIMATION(C_FPS_ANIMATION&& from) noexcept
    : C_FPS_ANIMATION() {
    *this = ::std::move(from);
  }

  inline C_FPS_ANIMATION& operator=(const C_FPS_ANIMATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_FPS_ANIMATION& operator=(C_FPS_ANIMATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_FPS_ANIMATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_FPS_ANIMATION* internal_default_instance() {
    return reinterpret_cast<const C_FPS_ANIMATION*>(
               &_C_FPS_ANIMATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_FPS_ANIMATION& a, C_FPS_ANIMATION& b) {
    a.Swap(&b);
  }
  inline void Swap(C_FPS_ANIMATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_FPS_ANIMATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_FPS_ANIMATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_FPS_ANIMATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_FPS_ANIMATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_FPS_ANIMATION& from) {
    C_FPS_ANIMATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_FPS_ANIMATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_FPS_ANIMATION";
  }
  protected:
  explicit C_FPS_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFpsAnimationFieldNumber = 1,
  };
  // .Protocol.FPSAnimation fpsAnimation = 1;
  bool has_fpsanimation() const;
  private:
  bool _internal_has_fpsanimation() const;
  public:
  void clear_fpsanimation();
  const ::Protocol::FPSAnimation& fpsanimation() const;
  PROTOBUF_NODISCARD ::Protocol::FPSAnimation* release_fpsanimation();
  ::Protocol::FPSAnimation* mutable_fpsanimation();
  void set_allocated_fpsanimation(::Protocol::FPSAnimation* fpsanimation);
  private:
  const ::Protocol::FPSAnimation& _internal_fpsanimation() const;
  ::Protocol::FPSAnimation* _internal_mutable_fpsanimation();
  public:
  void unsafe_arena_set_allocated_fpsanimation(
      ::Protocol::FPSAnimation* fpsanimation);
  ::Protocol::FPSAnimation* unsafe_arena_release_fpsanimation();

  // @@protoc_insertion_point(class_scope:Protocol.C_FPS_ANIMATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::FPSAnimation* fpsanimation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_ANIMATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_ANIMATION) */ {
 public:
  inline S_FPS_ANIMATION() : S_FPS_ANIMATION(nullptr) {}
  ~S_FPS_ANIMATION() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_ANIMATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_ANIMATION(const S_FPS_ANIMATION& from);
  S_FPS_ANIMATION(S_FPS_ANIMATION&& from) noexcept
    : S_FPS_ANIMATION() {
    *this = ::std::move(from);
  }

  inline S_FPS_ANIMATION& operator=(const S_FPS_ANIMATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_ANIMATION& operator=(S_FPS_ANIMATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_ANIMATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_ANIMATION* internal_default_instance() {
    return reinterpret_cast<const S_FPS_ANIMATION*>(
               &_S_FPS_ANIMATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_FPS_ANIMATION& a, S_FPS_ANIMATION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_ANIMATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_ANIMATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_ANIMATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_ANIMATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_ANIMATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_ANIMATION& from) {
    S_FPS_ANIMATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_ANIMATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_ANIMATION";
  }
  protected:
  explicit S_FPS_ANIMATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFpsAnimationFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // .Protocol.FPSAnimation fpsAnimation = 2;
  bool has_fpsanimation() const;
  private:
  bool _internal_has_fpsanimation() const;
  public:
  void clear_fpsanimation();
  const ::Protocol::FPSAnimation& fpsanimation() const;
  PROTOBUF_NODISCARD ::Protocol::FPSAnimation* release_fpsanimation();
  ::Protocol::FPSAnimation* mutable_fpsanimation();
  void set_allocated_fpsanimation(::Protocol::FPSAnimation* fpsanimation);
  private:
  const ::Protocol::FPSAnimation& _internal_fpsanimation() const;
  ::Protocol::FPSAnimation* _internal_mutable_fpsanimation();
  public:
  void unsafe_arena_set_allocated_fpsanimation(
      ::Protocol::FPSAnimation* fpsanimation);
  ::Protocol::FPSAnimation* unsafe_arena_release_fpsanimation();

  // int32 playerId = 1;
  void clear_playerid();
  int32_t playerid() const;
  void set_playerid(int32_t value);
  private:
  int32_t _internal_playerid() const;
  void _internal_set_playerid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_ANIMATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::FPSAnimation* fpsanimation_;
    int32_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class C_FPS_READY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_FPS_READY) */ {
 public:
  inline C_FPS_READY() : C_FPS_READY(nullptr) {}
  ~C_FPS_READY() override;
  explicit PROTOBUF_CONSTEXPR C_FPS_READY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_FPS_READY(const C_FPS_READY& from);
  C_FPS_READY(C_FPS_READY&& from) noexcept
    : C_FPS_READY() {
    *this = ::std::move(from);
  }

  inline C_FPS_READY& operator=(const C_FPS_READY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_FPS_READY& operator=(C_FPS_READY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_FPS_READY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_FPS_READY* internal_default_instance() {
    return reinterpret_cast<const C_FPS_READY*>(
               &_C_FPS_READY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(C_FPS_READY& a, C_FPS_READY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_FPS_READY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_FPS_READY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_FPS_READY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_FPS_READY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_FPS_READY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_FPS_READY& from) {
    C_FPS_READY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_FPS_READY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_FPS_READY";
  }
  protected:
  explicit C_FPS_READY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsReadyFieldNumber = 1,
  };
  // bool isReady = 1;
  void clear_isready();
  bool isready() const;
  void set_isready(bool value);
  private:
  bool _internal_isready() const;
  void _internal_set_isready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_FPS_READY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool isready_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_LOAD final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_LOAD) */ {
 public:
  inline S_FPS_LOAD() : S_FPS_LOAD(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_FPS_LOAD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_LOAD(const S_FPS_LOAD& from);
  S_FPS_LOAD(S_FPS_LOAD&& from) noexcept
    : S_FPS_LOAD() {
    *this = ::std::move(from);
  }

  inline S_FPS_LOAD& operator=(const S_FPS_LOAD& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_LOAD& operator=(S_FPS_LOAD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_LOAD& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_LOAD* internal_default_instance() {
    return reinterpret_cast<const S_FPS_LOAD*>(
               &_S_FPS_LOAD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_FPS_LOAD& a, S_FPS_LOAD& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_LOAD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_LOAD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_LOAD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_LOAD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_FPS_LOAD& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_FPS_LOAD& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_LOAD";
  }
  protected:
  explicit S_FPS_LOAD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_LOAD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class C_FPS_LOAD_COMPLETE final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_FPS_LOAD_COMPLETE) */ {
 public:
  inline C_FPS_LOAD_COMPLETE() : C_FPS_LOAD_COMPLETE(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_FPS_LOAD_COMPLETE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_FPS_LOAD_COMPLETE(const C_FPS_LOAD_COMPLETE& from);
  C_FPS_LOAD_COMPLETE(C_FPS_LOAD_COMPLETE&& from) noexcept
    : C_FPS_LOAD_COMPLETE() {
    *this = ::std::move(from);
  }

  inline C_FPS_LOAD_COMPLETE& operator=(const C_FPS_LOAD_COMPLETE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_FPS_LOAD_COMPLETE& operator=(C_FPS_LOAD_COMPLETE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_FPS_LOAD_COMPLETE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_FPS_LOAD_COMPLETE* internal_default_instance() {
    return reinterpret_cast<const C_FPS_LOAD_COMPLETE*>(
               &_C_FPS_LOAD_COMPLETE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C_FPS_LOAD_COMPLETE& a, C_FPS_LOAD_COMPLETE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_FPS_LOAD_COMPLETE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_FPS_LOAD_COMPLETE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_FPS_LOAD_COMPLETE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_FPS_LOAD_COMPLETE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_FPS_LOAD_COMPLETE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_FPS_LOAD_COMPLETE& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_FPS_LOAD_COMPLETE";
  }
  protected:
  explicit C_FPS_LOAD_COMPLETE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_FPS_LOAD_COMPLETE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_START final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_START) */ {
 public:
  inline S_FPS_START() : S_FPS_START(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_FPS_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_START(const S_FPS_START& from);
  S_FPS_START(S_FPS_START&& from) noexcept
    : S_FPS_START() {
    *this = ::std::move(from);
  }

  inline S_FPS_START& operator=(const S_FPS_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_START& operator=(S_FPS_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_START* internal_default_instance() {
    return reinterpret_cast<const S_FPS_START*>(
               &_S_FPS_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_FPS_START& a, S_FPS_START& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_START* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_START>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_FPS_START& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_FPS_START& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_START";
  }
  protected:
  explicit S_FPS_START(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_FINISH final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_FINISH) */ {
 public:
  inline S_FPS_FINISH() : S_FPS_FINISH(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_FPS_FINISH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_FINISH(const S_FPS_FINISH& from);
  S_FPS_FINISH(S_FPS_FINISH&& from) noexcept
    : S_FPS_FINISH() {
    *this = ::std::move(from);
  }

  inline S_FPS_FINISH& operator=(const S_FPS_FINISH& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_FINISH& operator=(S_FPS_FINISH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_FINISH& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_FINISH* internal_default_instance() {
    return reinterpret_cast<const S_FPS_FINISH*>(
               &_S_FPS_FINISH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(S_FPS_FINISH& a, S_FPS_FINISH& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_FINISH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_FINISH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_FINISH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_FINISH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_FPS_FINISH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_FPS_FINISH& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_FINISH";
  }
  protected:
  explicit S_FPS_FINISH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_FINISH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_ANNOUNCE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_ANNOUNCE) */ {
 public:
  inline S_FPS_ANNOUNCE() : S_FPS_ANNOUNCE(nullptr) {}
  ~S_FPS_ANNOUNCE() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_ANNOUNCE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_ANNOUNCE(const S_FPS_ANNOUNCE& from);
  S_FPS_ANNOUNCE(S_FPS_ANNOUNCE&& from) noexcept
    : S_FPS_ANNOUNCE() {
    *this = ::std::move(from);
  }

  inline S_FPS_ANNOUNCE& operator=(const S_FPS_ANNOUNCE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_ANNOUNCE& operator=(S_FPS_ANNOUNCE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_ANNOUNCE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_ANNOUNCE* internal_default_instance() {
    return reinterpret_cast<const S_FPS_ANNOUNCE*>(
               &_S_FPS_ANNOUNCE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S_FPS_ANNOUNCE& a, S_FPS_ANNOUNCE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_ANNOUNCE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_ANNOUNCE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_ANNOUNCE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_ANNOUNCE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_ANNOUNCE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_ANNOUNCE& from) {
    S_FPS_ANNOUNCE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_ANNOUNCE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_ANNOUNCE";
  }
  protected:
  explicit S_FPS_ANNOUNCE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_ANNOUNCE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_SPAWN_ITEM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_SPAWN_ITEM) */ {
 public:
  inline S_FPS_SPAWN_ITEM() : S_FPS_SPAWN_ITEM(nullptr) {}
  ~S_FPS_SPAWN_ITEM() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_SPAWN_ITEM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_SPAWN_ITEM(const S_FPS_SPAWN_ITEM& from);
  S_FPS_SPAWN_ITEM(S_FPS_SPAWN_ITEM&& from) noexcept
    : S_FPS_SPAWN_ITEM() {
    *this = ::std::move(from);
  }

  inline S_FPS_SPAWN_ITEM& operator=(const S_FPS_SPAWN_ITEM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_SPAWN_ITEM& operator=(S_FPS_SPAWN_ITEM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_SPAWN_ITEM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_SPAWN_ITEM* internal_default_instance() {
    return reinterpret_cast<const S_FPS_SPAWN_ITEM*>(
               &_S_FPS_SPAWN_ITEM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(S_FPS_SPAWN_ITEM& a, S_FPS_SPAWN_ITEM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_SPAWN_ITEM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_SPAWN_ITEM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_SPAWN_ITEM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_SPAWN_ITEM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_SPAWN_ITEM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_SPAWN_ITEM& from) {
    S_FPS_SPAWN_ITEM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_SPAWN_ITEM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_SPAWN_ITEM";
  }
  protected:
  explicit S_FPS_SPAWN_ITEM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // .Protocol.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_SPAWN_ITEM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_SPAWN_DESTINATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_SPAWN_DESTINATION) */ {
 public:
  inline S_FPS_SPAWN_DESTINATION() : S_FPS_SPAWN_DESTINATION(nullptr) {}
  ~S_FPS_SPAWN_DESTINATION() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_SPAWN_DESTINATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_SPAWN_DESTINATION(const S_FPS_SPAWN_DESTINATION& from);
  S_FPS_SPAWN_DESTINATION(S_FPS_SPAWN_DESTINATION&& from) noexcept
    : S_FPS_SPAWN_DESTINATION() {
    *this = ::std::move(from);
  }

  inline S_FPS_SPAWN_DESTINATION& operator=(const S_FPS_SPAWN_DESTINATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_SPAWN_DESTINATION& operator=(S_FPS_SPAWN_DESTINATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_SPAWN_DESTINATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_SPAWN_DESTINATION* internal_default_instance() {
    return reinterpret_cast<const S_FPS_SPAWN_DESTINATION*>(
               &_S_FPS_SPAWN_DESTINATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S_FPS_SPAWN_DESTINATION& a, S_FPS_SPAWN_DESTINATION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_SPAWN_DESTINATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_SPAWN_DESTINATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_SPAWN_DESTINATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_SPAWN_DESTINATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_SPAWN_DESTINATION& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_SPAWN_DESTINATION& from) {
    S_FPS_SPAWN_DESTINATION::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_SPAWN_DESTINATION* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_SPAWN_DESTINATION";
  }
  protected:
  explicit S_FPS_SPAWN_DESTINATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
  };
  // .Protocol.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::Vector3& position() const;
  PROTOBUF_NODISCARD ::Protocol::Vector3* release_position();
  ::Protocol::Vector3* mutable_position();
  void set_allocated_position(::Protocol::Vector3* position);
  private:
  const ::Protocol::Vector3& _internal_position() const;
  ::Protocol::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::Vector3* position);
  ::Protocol::Vector3* unsafe_arena_release_position();

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_SPAWN_DESTINATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Vector3* position_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_DESTROY_DESTINATION final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_DESTROY_DESTINATION) */ {
 public:
  inline S_FPS_DESTROY_DESTINATION() : S_FPS_DESTROY_DESTINATION(nullptr) {}
  explicit PROTOBUF_CONSTEXPR S_FPS_DESTROY_DESTINATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_DESTROY_DESTINATION(const S_FPS_DESTROY_DESTINATION& from);
  S_FPS_DESTROY_DESTINATION(S_FPS_DESTROY_DESTINATION&& from) noexcept
    : S_FPS_DESTROY_DESTINATION() {
    *this = ::std::move(from);
  }

  inline S_FPS_DESTROY_DESTINATION& operator=(const S_FPS_DESTROY_DESTINATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_DESTROY_DESTINATION& operator=(S_FPS_DESTROY_DESTINATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_DESTROY_DESTINATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_DESTROY_DESTINATION* internal_default_instance() {
    return reinterpret_cast<const S_FPS_DESTROY_DESTINATION*>(
               &_S_FPS_DESTROY_DESTINATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(S_FPS_DESTROY_DESTINATION& a, S_FPS_DESTROY_DESTINATION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_DESTROY_DESTINATION* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_DESTROY_DESTINATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_DESTROY_DESTINATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_DESTROY_DESTINATION>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const S_FPS_DESTROY_DESTINATION& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const S_FPS_DESTROY_DESTINATION& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_DESTROY_DESTINATION";
  }
  protected:
  explicit S_FPS_DESTROY_DESTINATION(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_DESTROY_DESTINATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_ITEM_OCCUPY_PROGRESS_STATE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE) */ {
 public:
  inline S_FPS_ITEM_OCCUPY_PROGRESS_STATE() : S_FPS_ITEM_OCCUPY_PROGRESS_STATE(nullptr) {}
  ~S_FPS_ITEM_OCCUPY_PROGRESS_STATE() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_ITEM_OCCUPY_PROGRESS_STATE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_ITEM_OCCUPY_PROGRESS_STATE(const S_FPS_ITEM_OCCUPY_PROGRESS_STATE& from);
  S_FPS_ITEM_OCCUPY_PROGRESS_STATE(S_FPS_ITEM_OCCUPY_PROGRESS_STATE&& from) noexcept
    : S_FPS_ITEM_OCCUPY_PROGRESS_STATE() {
    *this = ::std::move(from);
  }

  inline S_FPS_ITEM_OCCUPY_PROGRESS_STATE& operator=(const S_FPS_ITEM_OCCUPY_PROGRESS_STATE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_ITEM_OCCUPY_PROGRESS_STATE& operator=(S_FPS_ITEM_OCCUPY_PROGRESS_STATE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_ITEM_OCCUPY_PROGRESS_STATE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_ITEM_OCCUPY_PROGRESS_STATE* internal_default_instance() {
    return reinterpret_cast<const S_FPS_ITEM_OCCUPY_PROGRESS_STATE*>(
               &_S_FPS_ITEM_OCCUPY_PROGRESS_STATE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(S_FPS_ITEM_OCCUPY_PROGRESS_STATE& a, S_FPS_ITEM_OCCUPY_PROGRESS_STATE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_ITEM_OCCUPY_PROGRESS_STATE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_ITEM_OCCUPY_PROGRESS_STATE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_ITEM_OCCUPY_PROGRESS_STATE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_ITEM_OCCUPY_PROGRESS_STATE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_ITEM_OCCUPY_PROGRESS_STATE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_ITEM_OCCUPY_PROGRESS_STATE& from) {
    S_FPS_ITEM_OCCUPY_PROGRESS_STATE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_ITEM_OCCUPY_PROGRESS_STATE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE";
  }
  protected:
  explicit S_FPS_ITEM_OCCUPY_PROGRESS_STATE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOccupyProgressStateFieldNumber = 1,
  };
  // int32 occupyProgressState = 1;
  void clear_occupyprogressstate();
  int32_t occupyprogressstate() const;
  void set_occupyprogressstate(int32_t value);
  private:
  int32_t _internal_occupyprogressstate() const;
  void _internal_set_occupyprogressstate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t occupyprogressstate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_ITEM_OCCUPIED final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_ITEM_OCCUPIED) */ {
 public:
  inline S_FPS_ITEM_OCCUPIED() : S_FPS_ITEM_OCCUPIED(nullptr) {}
  ~S_FPS_ITEM_OCCUPIED() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_ITEM_OCCUPIED(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_ITEM_OCCUPIED(const S_FPS_ITEM_OCCUPIED& from);
  S_FPS_ITEM_OCCUPIED(S_FPS_ITEM_OCCUPIED&& from) noexcept
    : S_FPS_ITEM_OCCUPIED() {
    *this = ::std::move(from);
  }

  inline S_FPS_ITEM_OCCUPIED& operator=(const S_FPS_ITEM_OCCUPIED& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_ITEM_OCCUPIED& operator=(S_FPS_ITEM_OCCUPIED&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_ITEM_OCCUPIED& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_ITEM_OCCUPIED* internal_default_instance() {
    return reinterpret_cast<const S_FPS_ITEM_OCCUPIED*>(
               &_S_FPS_ITEM_OCCUPIED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(S_FPS_ITEM_OCCUPIED& a, S_FPS_ITEM_OCCUPIED& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_ITEM_OCCUPIED* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_ITEM_OCCUPIED* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_ITEM_OCCUPIED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_ITEM_OCCUPIED>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_ITEM_OCCUPIED& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_ITEM_OCCUPIED& from) {
    S_FPS_ITEM_OCCUPIED::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_ITEM_OCCUPIED* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_ITEM_OCCUPIED";
  }
  protected:
  explicit S_FPS_ITEM_OCCUPIED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOccupierFieldNumber = 1,
  };
  // int32 occupier = 1;
  void clear_occupier();
  int32_t occupier() const;
  void set_occupier(int32_t value);
  private:
  int32_t _internal_occupier() const;
  void _internal_set_occupier(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_ITEM_OCCUPIED)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t occupier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// -------------------------------------------------------------------

class S_FPS_SCORED final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_FPS_SCORED) */ {
 public:
  inline S_FPS_SCORED() : S_FPS_SCORED(nullptr) {}
  ~S_FPS_SCORED() override;
  explicit PROTOBUF_CONSTEXPR S_FPS_SCORED(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_FPS_SCORED(const S_FPS_SCORED& from);
  S_FPS_SCORED(S_FPS_SCORED&& from) noexcept
    : S_FPS_SCORED() {
    *this = ::std::move(from);
  }

  inline S_FPS_SCORED& operator=(const S_FPS_SCORED& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_FPS_SCORED& operator=(S_FPS_SCORED&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_FPS_SCORED& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_FPS_SCORED* internal_default_instance() {
    return reinterpret_cast<const S_FPS_SCORED*>(
               &_S_FPS_SCORED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(S_FPS_SCORED& a, S_FPS_SCORED& b) {
    a.Swap(&b);
  }
  inline void Swap(S_FPS_SCORED* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_FPS_SCORED* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_FPS_SCORED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_FPS_SCORED>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_FPS_SCORED& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_FPS_SCORED& from) {
    S_FPS_SCORED::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_FPS_SCORED* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_FPS_SCORED";
  }
  protected:
  explicit S_FPS_SCORED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScorerFieldNumber = 1,
  };
  // string scorer = 1;
  void clear_scorer();
  const std::string& scorer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scorer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scorer();
  PROTOBUF_NODISCARD std::string* release_scorer();
  void set_allocated_scorer(std::string* scorer);
  private:
  const std::string& _internal_scorer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scorer(const std::string& value);
  std::string* _internal_mutable_scorer();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_FPS_SCORED)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scorer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_5f002_5fFPS_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Quaternion

// float x = 1;
inline void Quaternion::clear_x() {
  _impl_.x_ = 0;
}
inline float Quaternion::_internal_x() const {
  return _impl_.x_;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:Protocol.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.Quaternion.x)
}

// float y = 2;
inline void Quaternion::clear_y() {
  _impl_.y_ = 0;
}
inline float Quaternion::_internal_y() const {
  return _impl_.y_;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:Protocol.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.Quaternion.y)
}

// float z = 3;
inline void Quaternion::clear_z() {
  _impl_.z_ = 0;
}
inline float Quaternion::_internal_z() const {
  return _impl_.z_;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:Protocol.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.Quaternion.z)
}

// float w = 4;
inline void Quaternion::clear_w() {
  _impl_.w_ = 0;
}
inline float Quaternion::_internal_w() const {
  return _impl_.w_;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:Protocol.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(float value) {
  
  _impl_.w_ = value;
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:Protocol.Quaternion.w)
}

// -------------------------------------------------------------------

// S_FPS_INSTANTIATE

// string ownerId = 1;
inline void S_FPS_INSTANTIATE::clear_ownerid() {
  _impl_.ownerid_.ClearToEmpty();
}
inline const std::string& S_FPS_INSTANTIATE::ownerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_INSTANTIATE.ownerId)
  return _internal_ownerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_FPS_INSTANTIATE::set_ownerid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ownerid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_INSTANTIATE.ownerId)
}
inline std::string* S_FPS_INSTANTIATE::mutable_ownerid() {
  std::string* _s = _internal_mutable_ownerid();
  // @@protoc_insertion_point(field_mutable:Protocol.S_FPS_INSTANTIATE.ownerId)
  return _s;
}
inline const std::string& S_FPS_INSTANTIATE::_internal_ownerid() const {
  return _impl_.ownerid_.Get();
}
inline void S_FPS_INSTANTIATE::_internal_set_ownerid(const std::string& value) {
  
  _impl_.ownerid_.Set(value, GetArenaForAllocation());
}
inline std::string* S_FPS_INSTANTIATE::_internal_mutable_ownerid() {
  
  return _impl_.ownerid_.Mutable(GetArenaForAllocation());
}
inline std::string* S_FPS_INSTANTIATE::release_ownerid() {
  // @@protoc_insertion_point(field_release:Protocol.S_FPS_INSTANTIATE.ownerId)
  return _impl_.ownerid_.Release();
}
inline void S_FPS_INSTANTIATE::set_allocated_ownerid(std::string* ownerid) {
  if (ownerid != nullptr) {
    
  } else {
    
  }
  _impl_.ownerid_.SetAllocated(ownerid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ownerid_.IsDefault()) {
    _impl_.ownerid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FPS_INSTANTIATE.ownerId)
}

// int32 playerId = 2;
inline void S_FPS_INSTANTIATE::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t S_FPS_INSTANTIATE::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t S_FPS_INSTANTIATE::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_INSTANTIATE.playerId)
  return _internal_playerid();
}
inline void S_FPS_INSTANTIATE::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_FPS_INSTANTIATE::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_INSTANTIATE.playerId)
}

// .Protocol.Vector3 position = 3;
inline bool S_FPS_INSTANTIATE::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_FPS_INSTANTIATE::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& S_FPS_INSTANTIATE::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_FPS_INSTANTIATE::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_INSTANTIATE.position)
  return _internal_position();
}
inline void S_FPS_INSTANTIATE::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_FPS_INSTANTIATE.position)
}
inline ::Protocol::Vector3* S_FPS_INSTANTIATE::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_FPS_INSTANTIATE::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_FPS_INSTANTIATE.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_FPS_INSTANTIATE::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* S_FPS_INSTANTIATE::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_FPS_INSTANTIATE.position)
  return _msg;
}
inline void S_FPS_INSTANTIATE::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FPS_INSTANTIATE.position)
}

// .Protocol.Quaternion rotation = 4;
inline bool S_FPS_INSTANTIATE::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S_FPS_INSTANTIATE::has_rotation() const {
  return _internal_has_rotation();
}
inline void S_FPS_INSTANTIATE::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Quaternion& S_FPS_INSTANTIATE::_internal_rotation() const {
  const ::Protocol::Quaternion* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Quaternion&>(
      ::Protocol::_Quaternion_default_instance_);
}
inline const ::Protocol::Quaternion& S_FPS_INSTANTIATE::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_INSTANTIATE.rotation)
  return _internal_rotation();
}
inline void S_FPS_INSTANTIATE::unsafe_arena_set_allocated_rotation(
    ::Protocol::Quaternion* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_FPS_INSTANTIATE.rotation)
}
inline ::Protocol::Quaternion* S_FPS_INSTANTIATE::release_rotation() {
  
  ::Protocol::Quaternion* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Quaternion* S_FPS_INSTANTIATE::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S_FPS_INSTANTIATE.rotation)
  
  ::Protocol::Quaternion* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Quaternion* S_FPS_INSTANTIATE::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Quaternion>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Quaternion* S_FPS_INSTANTIATE::mutable_rotation() {
  ::Protocol::Quaternion* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S_FPS_INSTANTIATE.rotation)
  return _msg;
}
inline void S_FPS_INSTANTIATE::set_allocated_rotation(::Protocol::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FPS_INSTANTIATE.rotation)
}

// int32 hp = 5;
inline void S_FPS_INSTANTIATE::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t S_FPS_INSTANTIATE::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t S_FPS_INSTANTIATE::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_INSTANTIATE.hp)
  return _internal_hp();
}
inline void S_FPS_INSTANTIATE::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void S_FPS_INSTANTIATE::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_INSTANTIATE.hp)
}

// -------------------------------------------------------------------

// C_FPS_POSITION

// int64 timestamp = 1;
inline void C_FPS_POSITION::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C_FPS_POSITION::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C_FPS_POSITION::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C_FPS_POSITION.timestamp)
  return _internal_timestamp();
}
inline void C_FPS_POSITION::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C_FPS_POSITION::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C_FPS_POSITION.timestamp)
}

// .Protocol.Vector3 position = 2;
inline bool C_FPS_POSITION::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_FPS_POSITION::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& C_FPS_POSITION::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_FPS_POSITION::position() const {
  // @@protoc_insertion_point(field_get:Protocol.C_FPS_POSITION.position)
  return _internal_position();
}
inline void C_FPS_POSITION::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_FPS_POSITION.position)
}
inline ::Protocol::Vector3* C_FPS_POSITION::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_FPS_POSITION::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.C_FPS_POSITION.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_FPS_POSITION::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* C_FPS_POSITION::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.C_FPS_POSITION.position)
  return _msg;
}
inline void C_FPS_POSITION::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_FPS_POSITION.position)
}

// .Protocol.Vector3 velocity = 3;
inline bool C_FPS_POSITION::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool C_FPS_POSITION::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::Protocol::Vector3& C_FPS_POSITION::_internal_velocity() const {
  const ::Protocol::Vector3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_FPS_POSITION::velocity() const {
  // @@protoc_insertion_point(field_get:Protocol.C_FPS_POSITION.velocity)
  return _internal_velocity();
}
inline void C_FPS_POSITION::unsafe_arena_set_allocated_velocity(
    ::Protocol::Vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_FPS_POSITION.velocity)
}
inline ::Protocol::Vector3* C_FPS_POSITION::release_velocity() {
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_FPS_POSITION::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:Protocol.C_FPS_POSITION.velocity)
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_FPS_POSITION::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::Protocol::Vector3* C_FPS_POSITION::mutable_velocity() {
  ::Protocol::Vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:Protocol.C_FPS_POSITION.velocity)
  return _msg;
}
inline void C_FPS_POSITION::set_allocated_velocity(::Protocol::Vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_FPS_POSITION.velocity)
}

// -------------------------------------------------------------------

// S_FPS_POSITION

// int32 playerId = 1;
inline void S_FPS_POSITION::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t S_FPS_POSITION::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t S_FPS_POSITION::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_POSITION.playerId)
  return _internal_playerid();
}
inline void S_FPS_POSITION::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_FPS_POSITION::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_POSITION.playerId)
}

// int64 timestamp = 2;
inline void S_FPS_POSITION::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S_FPS_POSITION::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S_FPS_POSITION::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_POSITION.timestamp)
  return _internal_timestamp();
}
inline void S_FPS_POSITION::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S_FPS_POSITION::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_POSITION.timestamp)
}

// .Protocol.Vector3 position = 3;
inline bool S_FPS_POSITION::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_FPS_POSITION::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& S_FPS_POSITION::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_FPS_POSITION::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_POSITION.position)
  return _internal_position();
}
inline void S_FPS_POSITION::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_FPS_POSITION.position)
}
inline ::Protocol::Vector3* S_FPS_POSITION::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_FPS_POSITION::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_FPS_POSITION.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_FPS_POSITION::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* S_FPS_POSITION::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_FPS_POSITION.position)
  return _msg;
}
inline void S_FPS_POSITION::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FPS_POSITION.position)
}

// .Protocol.Vector3 velocity = 4;
inline bool S_FPS_POSITION::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool S_FPS_POSITION::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::Protocol::Vector3& S_FPS_POSITION::_internal_velocity() const {
  const ::Protocol::Vector3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_FPS_POSITION::velocity() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_POSITION.velocity)
  return _internal_velocity();
}
inline void S_FPS_POSITION::unsafe_arena_set_allocated_velocity(
    ::Protocol::Vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_FPS_POSITION.velocity)
}
inline ::Protocol::Vector3* S_FPS_POSITION::release_velocity() {
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_FPS_POSITION::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:Protocol.S_FPS_POSITION.velocity)
  
  ::Protocol::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_FPS_POSITION::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::Protocol::Vector3* S_FPS_POSITION::mutable_velocity() {
  ::Protocol::Vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:Protocol.S_FPS_POSITION.velocity)
  return _msg;
}
inline void S_FPS_POSITION::set_allocated_velocity(::Protocol::Vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FPS_POSITION.velocity)
}

// -------------------------------------------------------------------

// C_FPS_ROTATION

// .Protocol.Quaternion rotation = 1;
inline bool C_FPS_ROTATION::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool C_FPS_ROTATION::has_rotation() const {
  return _internal_has_rotation();
}
inline void C_FPS_ROTATION::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Quaternion& C_FPS_ROTATION::_internal_rotation() const {
  const ::Protocol::Quaternion* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Quaternion&>(
      ::Protocol::_Quaternion_default_instance_);
}
inline const ::Protocol::Quaternion& C_FPS_ROTATION::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.C_FPS_ROTATION.rotation)
  return _internal_rotation();
}
inline void C_FPS_ROTATION::unsafe_arena_set_allocated_rotation(
    ::Protocol::Quaternion* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_FPS_ROTATION.rotation)
}
inline ::Protocol::Quaternion* C_FPS_ROTATION::release_rotation() {
  
  ::Protocol::Quaternion* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Quaternion* C_FPS_ROTATION::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.C_FPS_ROTATION.rotation)
  
  ::Protocol::Quaternion* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Quaternion* C_FPS_ROTATION::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Quaternion>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Quaternion* C_FPS_ROTATION::mutable_rotation() {
  ::Protocol::Quaternion* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.C_FPS_ROTATION.rotation)
  return _msg;
}
inline void C_FPS_ROTATION::set_allocated_rotation(::Protocol::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_FPS_ROTATION.rotation)
}

// -------------------------------------------------------------------

// S_FPS_ROTATION

// int32 playerId = 1;
inline void S_FPS_ROTATION::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t S_FPS_ROTATION::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t S_FPS_ROTATION::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_ROTATION.playerId)
  return _internal_playerid();
}
inline void S_FPS_ROTATION::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_FPS_ROTATION::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_ROTATION.playerId)
}

// .Protocol.Quaternion rotation = 2;
inline bool S_FPS_ROTATION::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool S_FPS_ROTATION::has_rotation() const {
  return _internal_has_rotation();
}
inline void S_FPS_ROTATION::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::Protocol::Quaternion& S_FPS_ROTATION::_internal_rotation() const {
  const ::Protocol::Quaternion* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Quaternion&>(
      ::Protocol::_Quaternion_default_instance_);
}
inline const ::Protocol::Quaternion& S_FPS_ROTATION::rotation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_ROTATION.rotation)
  return _internal_rotation();
}
inline void S_FPS_ROTATION::unsafe_arena_set_allocated_rotation(
    ::Protocol::Quaternion* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_FPS_ROTATION.rotation)
}
inline ::Protocol::Quaternion* S_FPS_ROTATION::release_rotation() {
  
  ::Protocol::Quaternion* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Quaternion* S_FPS_ROTATION::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Protocol.S_FPS_ROTATION.rotation)
  
  ::Protocol::Quaternion* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::Protocol::Quaternion* S_FPS_ROTATION::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Quaternion>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::Protocol::Quaternion* S_FPS_ROTATION::mutable_rotation() {
  ::Protocol::Quaternion* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:Protocol.S_FPS_ROTATION.rotation)
  return _msg;
}
inline void S_FPS_ROTATION::set_allocated_rotation(::Protocol::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FPS_ROTATION.rotation)
}

// -------------------------------------------------------------------

// C_FPS_SHOOT

// .Protocol.Vector3 position = 1;
inline bool C_FPS_SHOOT::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_FPS_SHOOT::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& C_FPS_SHOOT::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_FPS_SHOOT::position() const {
  // @@protoc_insertion_point(field_get:Protocol.C_FPS_SHOOT.position)
  return _internal_position();
}
inline void C_FPS_SHOOT::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_FPS_SHOOT.position)
}
inline ::Protocol::Vector3* C_FPS_SHOOT::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_FPS_SHOOT::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.C_FPS_SHOOT.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_FPS_SHOOT::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* C_FPS_SHOOT::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.C_FPS_SHOOT.position)
  return _msg;
}
inline void C_FPS_SHOOT::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_FPS_SHOOT.position)
}

// .Protocol.Vector3 direction = 2;
inline bool C_FPS_SHOOT::_internal_has_direction() const {
  return this != internal_default_instance() && _impl_.direction_ != nullptr;
}
inline bool C_FPS_SHOOT::has_direction() const {
  return _internal_has_direction();
}
inline const ::Protocol::Vector3& C_FPS_SHOOT::_internal_direction() const {
  const ::Protocol::Vector3* p = _impl_.direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& C_FPS_SHOOT::direction() const {
  // @@protoc_insertion_point(field_get:Protocol.C_FPS_SHOOT.direction)
  return _internal_direction();
}
inline void C_FPS_SHOOT::unsafe_arena_set_allocated_direction(
    ::Protocol::Vector3* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.direction_);
  }
  _impl_.direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_FPS_SHOOT.direction)
}
inline ::Protocol::Vector3* C_FPS_SHOOT::release_direction() {
  
  ::Protocol::Vector3* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* C_FPS_SHOOT::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:Protocol.C_FPS_SHOOT.direction)
  
  ::Protocol::Vector3* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* C_FPS_SHOOT::_internal_mutable_direction() {
  
  if (_impl_.direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.direction_ = p;
  }
  return _impl_.direction_;
}
inline ::Protocol::Vector3* C_FPS_SHOOT::mutable_direction() {
  ::Protocol::Vector3* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:Protocol.C_FPS_SHOOT.direction)
  return _msg;
}
inline void C_FPS_SHOOT::set_allocated_direction(::Protocol::Vector3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.direction_);
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction));
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_FPS_SHOOT.direction)
}

// -------------------------------------------------------------------

// S_FPS_SHOOT

// int32 playerId = 1;
inline void S_FPS_SHOOT::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t S_FPS_SHOOT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t S_FPS_SHOOT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_SHOOT.playerId)
  return _internal_playerid();
}
inline void S_FPS_SHOOT::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_FPS_SHOOT::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_SHOOT.playerId)
}

// -------------------------------------------------------------------

// S_FPS_ATTACKED

// int32 playerid = 1;
inline void S_FPS_ATTACKED::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t S_FPS_ATTACKED::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t S_FPS_ATTACKED::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_ATTACKED.playerid)
  return _internal_playerid();
}
inline void S_FPS_ATTACKED::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_FPS_ATTACKED::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_ATTACKED.playerid)
}

// int32 damage = 2;
inline void S_FPS_ATTACKED::clear_damage() {
  _impl_.damage_ = 0;
}
inline int32_t S_FPS_ATTACKED::_internal_damage() const {
  return _impl_.damage_;
}
inline int32_t S_FPS_ATTACKED::damage() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_ATTACKED.damage)
  return _internal_damage();
}
inline void S_FPS_ATTACKED::_internal_set_damage(int32_t value) {
  
  _impl_.damage_ = value;
}
inline void S_FPS_ATTACKED::set_damage(int32_t value) {
  _internal_set_damage(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_ATTACKED.damage)
}

// int32 hp = 3;
inline void S_FPS_ATTACKED::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t S_FPS_ATTACKED::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t S_FPS_ATTACKED::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_ATTACKED.hp)
  return _internal_hp();
}
inline void S_FPS_ATTACKED::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void S_FPS_ATTACKED::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_ATTACKED.hp)
}

// -------------------------------------------------------------------

// C_FPS_CHANGE_WEAPON

// int32 weaponId = 1;
inline void C_FPS_CHANGE_WEAPON::clear_weaponid() {
  _impl_.weaponid_ = 0;
}
inline int32_t C_FPS_CHANGE_WEAPON::_internal_weaponid() const {
  return _impl_.weaponid_;
}
inline int32_t C_FPS_CHANGE_WEAPON::weaponid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_FPS_CHANGE_WEAPON.weaponId)
  return _internal_weaponid();
}
inline void C_FPS_CHANGE_WEAPON::_internal_set_weaponid(int32_t value) {
  
  _impl_.weaponid_ = value;
}
inline void C_FPS_CHANGE_WEAPON::set_weaponid(int32_t value) {
  _internal_set_weaponid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_FPS_CHANGE_WEAPON.weaponId)
}

// int64 timestamp = 2;
inline void C_FPS_CHANGE_WEAPON::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t C_FPS_CHANGE_WEAPON::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t C_FPS_CHANGE_WEAPON::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.C_FPS_CHANGE_WEAPON.timestamp)
  return _internal_timestamp();
}
inline void C_FPS_CHANGE_WEAPON::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void C_FPS_CHANGE_WEAPON::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.C_FPS_CHANGE_WEAPON.timestamp)
}

// -------------------------------------------------------------------

// S_FPS_CHANGE_WEAPON

// int32 playerId = 1;
inline void S_FPS_CHANGE_WEAPON::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t S_FPS_CHANGE_WEAPON::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t S_FPS_CHANGE_WEAPON::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_CHANGE_WEAPON.playerId)
  return _internal_playerid();
}
inline void S_FPS_CHANGE_WEAPON::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_FPS_CHANGE_WEAPON::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_CHANGE_WEAPON.playerId)
}

// int32 weaponId = 2;
inline void S_FPS_CHANGE_WEAPON::clear_weaponid() {
  _impl_.weaponid_ = 0;
}
inline int32_t S_FPS_CHANGE_WEAPON::_internal_weaponid() const {
  return _impl_.weaponid_;
}
inline int32_t S_FPS_CHANGE_WEAPON::weaponid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_CHANGE_WEAPON.weaponId)
  return _internal_weaponid();
}
inline void S_FPS_CHANGE_WEAPON::_internal_set_weaponid(int32_t value) {
  
  _impl_.weaponid_ = value;
}
inline void S_FPS_CHANGE_WEAPON::set_weaponid(int32_t value) {
  _internal_set_weaponid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_CHANGE_WEAPON.weaponId)
}

// int64 timestamp = 3;
inline void S_FPS_CHANGE_WEAPON::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t S_FPS_CHANGE_WEAPON::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t S_FPS_CHANGE_WEAPON::timestamp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_CHANGE_WEAPON.timestamp)
  return _internal_timestamp();
}
inline void S_FPS_CHANGE_WEAPON::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void S_FPS_CHANGE_WEAPON::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_CHANGE_WEAPON.timestamp)
}

// -------------------------------------------------------------------

// C_FPS_RELOAD

// -------------------------------------------------------------------

// S_FPS_RELOAD

// int32 playerId = 1;
inline void S_FPS_RELOAD::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t S_FPS_RELOAD::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t S_FPS_RELOAD::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_RELOAD.playerId)
  return _internal_playerid();
}
inline void S_FPS_RELOAD::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_FPS_RELOAD::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_RELOAD.playerId)
}

// -------------------------------------------------------------------

// FPSAnimation

// float moveX = 1;
inline void FPSAnimation::clear_movex() {
  _impl_.movex_ = 0;
}
inline float FPSAnimation::_internal_movex() const {
  return _impl_.movex_;
}
inline float FPSAnimation::movex() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.moveX)
  return _internal_movex();
}
inline void FPSAnimation::_internal_set_movex(float value) {
  
  _impl_.movex_ = value;
}
inline void FPSAnimation::set_movex(float value) {
  _internal_set_movex(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.moveX)
}

// float moveY = 2;
inline void FPSAnimation::clear_movey() {
  _impl_.movey_ = 0;
}
inline float FPSAnimation::_internal_movey() const {
  return _impl_.movey_;
}
inline float FPSAnimation::movey() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.moveY)
  return _internal_movey();
}
inline void FPSAnimation::_internal_set_movey(float value) {
  
  _impl_.movey_ = value;
}
inline void FPSAnimation::set_movey(float value) {
  _internal_set_movey(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.moveY)
}

// float velocity = 3;
inline void FPSAnimation::clear_velocity() {
  _impl_.velocity_ = 0;
}
inline float FPSAnimation::_internal_velocity() const {
  return _impl_.velocity_;
}
inline float FPSAnimation::velocity() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.velocity)
  return _internal_velocity();
}
inline void FPSAnimation::_internal_set_velocity(float value) {
  
  _impl_.velocity_ = value;
}
inline void FPSAnimation::set_velocity(float value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.velocity)
}

// bool moving = 4;
inline void FPSAnimation::clear_moving() {
  _impl_.moving_ = false;
}
inline bool FPSAnimation::_internal_moving() const {
  return _impl_.moving_;
}
inline bool FPSAnimation::moving() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.moving)
  return _internal_moving();
}
inline void FPSAnimation::_internal_set_moving(bool value) {
  
  _impl_.moving_ = value;
}
inline void FPSAnimation::set_moving(bool value) {
  _internal_set_moving(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.moving)
}

// bool inAir = 5;
inline void FPSAnimation::clear_inair() {
  _impl_.inair_ = false;
}
inline bool FPSAnimation::_internal_inair() const {
  return _impl_.inair_;
}
inline bool FPSAnimation::inair() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.inAir)
  return _internal_inair();
}
inline void FPSAnimation::_internal_set_inair(bool value) {
  
  _impl_.inair_ = value;
}
inline void FPSAnimation::set_inair(bool value) {
  _internal_set_inair(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.inAir)
}

// float sprinting = 6;
inline void FPSAnimation::clear_sprinting() {
  _impl_.sprinting_ = 0;
}
inline float FPSAnimation::_internal_sprinting() const {
  return _impl_.sprinting_;
}
inline float FPSAnimation::sprinting() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.sprinting)
  return _internal_sprinting();
}
inline void FPSAnimation::_internal_set_sprinting(float value) {
  
  _impl_.sprinting_ = value;
}
inline void FPSAnimation::set_sprinting(float value) {
  _internal_set_sprinting(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.sprinting)
}

// int32 poseState = 7;
inline void FPSAnimation::clear_posestate() {
  _impl_.posestate_ = 0;
}
inline int32_t FPSAnimation::_internal_posestate() const {
  return _impl_.posestate_;
}
inline int32_t FPSAnimation::posestate() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.poseState)
  return _internal_posestate();
}
inline void FPSAnimation::_internal_set_posestate(int32_t value) {
  
  _impl_.posestate_ = value;
}
inline void FPSAnimation::set_posestate(int32_t value) {
  _internal_set_posestate(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.poseState)
}

// int32 movementState = 8;
inline void FPSAnimation::clear_movementstate() {
  _impl_.movementstate_ = 0;
}
inline int32_t FPSAnimation::_internal_movementstate() const {
  return _impl_.movementstate_;
}
inline int32_t FPSAnimation::movementstate() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.movementState)
  return _internal_movementstate();
}
inline void FPSAnimation::_internal_set_movementstate(int32_t value) {
  
  _impl_.movementstate_ = value;
}
inline void FPSAnimation::set_movementstate(int32_t value) {
  _internal_set_movementstate(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.movementState)
}

// float lookX = 9;
inline void FPSAnimation::clear_lookx() {
  _impl_.lookx_ = 0;
}
inline float FPSAnimation::_internal_lookx() const {
  return _impl_.lookx_;
}
inline float FPSAnimation::lookx() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.lookX)
  return _internal_lookx();
}
inline void FPSAnimation::_internal_set_lookx(float value) {
  
  _impl_.lookx_ = value;
}
inline void FPSAnimation::set_lookx(float value) {
  _internal_set_lookx(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.lookX)
}

// float lookY = 10;
inline void FPSAnimation::clear_looky() {
  _impl_.looky_ = 0;
}
inline float FPSAnimation::_internal_looky() const {
  return _impl_.looky_;
}
inline float FPSAnimation::looky() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.lookY)
  return _internal_looky();
}
inline void FPSAnimation::_internal_set_looky(float value) {
  
  _impl_.looky_ = value;
}
inline void FPSAnimation::set_looky(float value) {
  _internal_set_looky(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.lookY)
}

// bool isTurning = 11;
inline void FPSAnimation::clear_isturning() {
  _impl_.isturning_ = false;
}
inline bool FPSAnimation::_internal_isturning() const {
  return _impl_.isturning_;
}
inline bool FPSAnimation::isturning() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.isTurning)
  return _internal_isturning();
}
inline void FPSAnimation::_internal_set_isturning(bool value) {
  
  _impl_.isturning_ = value;
}
inline void FPSAnimation::set_isturning(bool value) {
  _internal_set_isturning(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.isTurning)
}

// bool turnRight = 12;
inline void FPSAnimation::clear_turnright() {
  _impl_.turnright_ = false;
}
inline bool FPSAnimation::_internal_turnright() const {
  return _impl_.turnright_;
}
inline bool FPSAnimation::turnright() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.turnRight)
  return _internal_turnright();
}
inline void FPSAnimation::_internal_set_turnright(bool value) {
  
  _impl_.turnright_ = value;
}
inline void FPSAnimation::set_turnright(bool value) {
  _internal_set_turnright(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.turnRight)
}

// bool aiming = 13;
inline void FPSAnimation::clear_aiming() {
  _impl_.aiming_ = false;
}
inline bool FPSAnimation::_internal_aiming() const {
  return _impl_.aiming_;
}
inline bool FPSAnimation::aiming() const {
  // @@protoc_insertion_point(field_get:Protocol.FPSAnimation.aiming)
  return _internal_aiming();
}
inline void FPSAnimation::_internal_set_aiming(bool value) {
  
  _impl_.aiming_ = value;
}
inline void FPSAnimation::set_aiming(bool value) {
  _internal_set_aiming(value);
  // @@protoc_insertion_point(field_set:Protocol.FPSAnimation.aiming)
}

// -------------------------------------------------------------------

// C_FPS_ANIMATION

// .Protocol.FPSAnimation fpsAnimation = 1;
inline bool C_FPS_ANIMATION::_internal_has_fpsanimation() const {
  return this != internal_default_instance() && _impl_.fpsanimation_ != nullptr;
}
inline bool C_FPS_ANIMATION::has_fpsanimation() const {
  return _internal_has_fpsanimation();
}
inline void C_FPS_ANIMATION::clear_fpsanimation() {
  if (GetArenaForAllocation() == nullptr && _impl_.fpsanimation_ != nullptr) {
    delete _impl_.fpsanimation_;
  }
  _impl_.fpsanimation_ = nullptr;
}
inline const ::Protocol::FPSAnimation& C_FPS_ANIMATION::_internal_fpsanimation() const {
  const ::Protocol::FPSAnimation* p = _impl_.fpsanimation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::FPSAnimation&>(
      ::Protocol::_FPSAnimation_default_instance_);
}
inline const ::Protocol::FPSAnimation& C_FPS_ANIMATION::fpsanimation() const {
  // @@protoc_insertion_point(field_get:Protocol.C_FPS_ANIMATION.fpsAnimation)
  return _internal_fpsanimation();
}
inline void C_FPS_ANIMATION::unsafe_arena_set_allocated_fpsanimation(
    ::Protocol::FPSAnimation* fpsanimation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fpsanimation_);
  }
  _impl_.fpsanimation_ = fpsanimation;
  if (fpsanimation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_FPS_ANIMATION.fpsAnimation)
}
inline ::Protocol::FPSAnimation* C_FPS_ANIMATION::release_fpsanimation() {
  
  ::Protocol::FPSAnimation* temp = _impl_.fpsanimation_;
  _impl_.fpsanimation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::FPSAnimation* C_FPS_ANIMATION::unsafe_arena_release_fpsanimation() {
  // @@protoc_insertion_point(field_release:Protocol.C_FPS_ANIMATION.fpsAnimation)
  
  ::Protocol::FPSAnimation* temp = _impl_.fpsanimation_;
  _impl_.fpsanimation_ = nullptr;
  return temp;
}
inline ::Protocol::FPSAnimation* C_FPS_ANIMATION::_internal_mutable_fpsanimation() {
  
  if (_impl_.fpsanimation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::FPSAnimation>(GetArenaForAllocation());
    _impl_.fpsanimation_ = p;
  }
  return _impl_.fpsanimation_;
}
inline ::Protocol::FPSAnimation* C_FPS_ANIMATION::mutable_fpsanimation() {
  ::Protocol::FPSAnimation* _msg = _internal_mutable_fpsanimation();
  // @@protoc_insertion_point(field_mutable:Protocol.C_FPS_ANIMATION.fpsAnimation)
  return _msg;
}
inline void C_FPS_ANIMATION::set_allocated_fpsanimation(::Protocol::FPSAnimation* fpsanimation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fpsanimation_;
  }
  if (fpsanimation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fpsanimation);
    if (message_arena != submessage_arena) {
      fpsanimation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fpsanimation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fpsanimation_ = fpsanimation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_FPS_ANIMATION.fpsAnimation)
}

// -------------------------------------------------------------------

// S_FPS_ANIMATION

// int32 playerId = 1;
inline void S_FPS_ANIMATION::clear_playerid() {
  _impl_.playerid_ = 0;
}
inline int32_t S_FPS_ANIMATION::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int32_t S_FPS_ANIMATION::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_ANIMATION.playerId)
  return _internal_playerid();
}
inline void S_FPS_ANIMATION::_internal_set_playerid(int32_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_FPS_ANIMATION::set_playerid(int32_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_ANIMATION.playerId)
}

// .Protocol.FPSAnimation fpsAnimation = 2;
inline bool S_FPS_ANIMATION::_internal_has_fpsanimation() const {
  return this != internal_default_instance() && _impl_.fpsanimation_ != nullptr;
}
inline bool S_FPS_ANIMATION::has_fpsanimation() const {
  return _internal_has_fpsanimation();
}
inline void S_FPS_ANIMATION::clear_fpsanimation() {
  if (GetArenaForAllocation() == nullptr && _impl_.fpsanimation_ != nullptr) {
    delete _impl_.fpsanimation_;
  }
  _impl_.fpsanimation_ = nullptr;
}
inline const ::Protocol::FPSAnimation& S_FPS_ANIMATION::_internal_fpsanimation() const {
  const ::Protocol::FPSAnimation* p = _impl_.fpsanimation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::FPSAnimation&>(
      ::Protocol::_FPSAnimation_default_instance_);
}
inline const ::Protocol::FPSAnimation& S_FPS_ANIMATION::fpsanimation() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_ANIMATION.fpsAnimation)
  return _internal_fpsanimation();
}
inline void S_FPS_ANIMATION::unsafe_arena_set_allocated_fpsanimation(
    ::Protocol::FPSAnimation* fpsanimation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fpsanimation_);
  }
  _impl_.fpsanimation_ = fpsanimation;
  if (fpsanimation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_FPS_ANIMATION.fpsAnimation)
}
inline ::Protocol::FPSAnimation* S_FPS_ANIMATION::release_fpsanimation() {
  
  ::Protocol::FPSAnimation* temp = _impl_.fpsanimation_;
  _impl_.fpsanimation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::FPSAnimation* S_FPS_ANIMATION::unsafe_arena_release_fpsanimation() {
  // @@protoc_insertion_point(field_release:Protocol.S_FPS_ANIMATION.fpsAnimation)
  
  ::Protocol::FPSAnimation* temp = _impl_.fpsanimation_;
  _impl_.fpsanimation_ = nullptr;
  return temp;
}
inline ::Protocol::FPSAnimation* S_FPS_ANIMATION::_internal_mutable_fpsanimation() {
  
  if (_impl_.fpsanimation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::FPSAnimation>(GetArenaForAllocation());
    _impl_.fpsanimation_ = p;
  }
  return _impl_.fpsanimation_;
}
inline ::Protocol::FPSAnimation* S_FPS_ANIMATION::mutable_fpsanimation() {
  ::Protocol::FPSAnimation* _msg = _internal_mutable_fpsanimation();
  // @@protoc_insertion_point(field_mutable:Protocol.S_FPS_ANIMATION.fpsAnimation)
  return _msg;
}
inline void S_FPS_ANIMATION::set_allocated_fpsanimation(::Protocol::FPSAnimation* fpsanimation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fpsanimation_;
  }
  if (fpsanimation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fpsanimation);
    if (message_arena != submessage_arena) {
      fpsanimation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fpsanimation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fpsanimation_ = fpsanimation;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FPS_ANIMATION.fpsAnimation)
}

// -------------------------------------------------------------------

// C_FPS_READY

// bool isReady = 1;
inline void C_FPS_READY::clear_isready() {
  _impl_.isready_ = false;
}
inline bool C_FPS_READY::_internal_isready() const {
  return _impl_.isready_;
}
inline bool C_FPS_READY::isready() const {
  // @@protoc_insertion_point(field_get:Protocol.C_FPS_READY.isReady)
  return _internal_isready();
}
inline void C_FPS_READY::_internal_set_isready(bool value) {
  
  _impl_.isready_ = value;
}
inline void C_FPS_READY::set_isready(bool value) {
  _internal_set_isready(value);
  // @@protoc_insertion_point(field_set:Protocol.C_FPS_READY.isReady)
}

// -------------------------------------------------------------------

// S_FPS_LOAD

// -------------------------------------------------------------------

// C_FPS_LOAD_COMPLETE

// -------------------------------------------------------------------

// S_FPS_START

// -------------------------------------------------------------------

// S_FPS_FINISH

// -------------------------------------------------------------------

// S_FPS_ANNOUNCE

// string message = 1;
inline void S_FPS_ANNOUNCE::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& S_FPS_ANNOUNCE::message() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_ANNOUNCE.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_FPS_ANNOUNCE::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_ANNOUNCE.message)
}
inline std::string* S_FPS_ANNOUNCE::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Protocol.S_FPS_ANNOUNCE.message)
  return _s;
}
inline const std::string& S_FPS_ANNOUNCE::_internal_message() const {
  return _impl_.message_.Get();
}
inline void S_FPS_ANNOUNCE::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* S_FPS_ANNOUNCE::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* S_FPS_ANNOUNCE::release_message() {
  // @@protoc_insertion_point(field_release:Protocol.S_FPS_ANNOUNCE.message)
  return _impl_.message_.Release();
}
inline void S_FPS_ANNOUNCE::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FPS_ANNOUNCE.message)
}

// -------------------------------------------------------------------

// S_FPS_SPAWN_ITEM

// .Protocol.Vector3 position = 1;
inline bool S_FPS_SPAWN_ITEM::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_FPS_SPAWN_ITEM::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& S_FPS_SPAWN_ITEM::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_FPS_SPAWN_ITEM::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_SPAWN_ITEM.position)
  return _internal_position();
}
inline void S_FPS_SPAWN_ITEM::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_FPS_SPAWN_ITEM.position)
}
inline ::Protocol::Vector3* S_FPS_SPAWN_ITEM::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_FPS_SPAWN_ITEM::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_FPS_SPAWN_ITEM.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_FPS_SPAWN_ITEM::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* S_FPS_SPAWN_ITEM::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_FPS_SPAWN_ITEM.position)
  return _msg;
}
inline void S_FPS_SPAWN_ITEM::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FPS_SPAWN_ITEM.position)
}

// -------------------------------------------------------------------

// S_FPS_SPAWN_DESTINATION

// .Protocol.Vector3 position = 1;
inline bool S_FPS_SPAWN_DESTINATION::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool S_FPS_SPAWN_DESTINATION::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::Vector3& S_FPS_SPAWN_DESTINATION::_internal_position() const {
  const ::Protocol::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Vector3&>(
      ::Protocol::_Vector3_default_instance_);
}
inline const ::Protocol::Vector3& S_FPS_SPAWN_DESTINATION::position() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_SPAWN_DESTINATION.position)
  return _internal_position();
}
inline void S_FPS_SPAWN_DESTINATION::unsafe_arena_set_allocated_position(
    ::Protocol::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_FPS_SPAWN_DESTINATION.position)
}
inline ::Protocol::Vector3* S_FPS_SPAWN_DESTINATION::release_position() {
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Vector3* S_FPS_SPAWN_DESTINATION::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.S_FPS_SPAWN_DESTINATION.position)
  
  ::Protocol::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::Protocol::Vector3* S_FPS_SPAWN_DESTINATION::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::Protocol::Vector3* S_FPS_SPAWN_DESTINATION::mutable_position() {
  ::Protocol::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:Protocol.S_FPS_SPAWN_DESTINATION.position)
  return _msg;
}
inline void S_FPS_SPAWN_DESTINATION::set_allocated_position(::Protocol::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FPS_SPAWN_DESTINATION.position)
}

// -------------------------------------------------------------------

// S_FPS_DESTROY_DESTINATION

// -------------------------------------------------------------------

// S_FPS_ITEM_OCCUPY_PROGRESS_STATE

// int32 occupyProgressState = 1;
inline void S_FPS_ITEM_OCCUPY_PROGRESS_STATE::clear_occupyprogressstate() {
  _impl_.occupyprogressstate_ = 0;
}
inline int32_t S_FPS_ITEM_OCCUPY_PROGRESS_STATE::_internal_occupyprogressstate() const {
  return _impl_.occupyprogressstate_;
}
inline int32_t S_FPS_ITEM_OCCUPY_PROGRESS_STATE::occupyprogressstate() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE.occupyProgressState)
  return _internal_occupyprogressstate();
}
inline void S_FPS_ITEM_OCCUPY_PROGRESS_STATE::_internal_set_occupyprogressstate(int32_t value) {
  
  _impl_.occupyprogressstate_ = value;
}
inline void S_FPS_ITEM_OCCUPY_PROGRESS_STATE::set_occupyprogressstate(int32_t value) {
  _internal_set_occupyprogressstate(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_ITEM_OCCUPY_PROGRESS_STATE.occupyProgressState)
}

// -------------------------------------------------------------------

// S_FPS_ITEM_OCCUPIED

// int32 occupier = 1;
inline void S_FPS_ITEM_OCCUPIED::clear_occupier() {
  _impl_.occupier_ = 0;
}
inline int32_t S_FPS_ITEM_OCCUPIED::_internal_occupier() const {
  return _impl_.occupier_;
}
inline int32_t S_FPS_ITEM_OCCUPIED::occupier() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_ITEM_OCCUPIED.occupier)
  return _internal_occupier();
}
inline void S_FPS_ITEM_OCCUPIED::_internal_set_occupier(int32_t value) {
  
  _impl_.occupier_ = value;
}
inline void S_FPS_ITEM_OCCUPIED::set_occupier(int32_t value) {
  _internal_set_occupier(value);
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_ITEM_OCCUPIED.occupier)
}

// -------------------------------------------------------------------

// S_FPS_SCORED

// string scorer = 1;
inline void S_FPS_SCORED::clear_scorer() {
  _impl_.scorer_.ClearToEmpty();
}
inline const std::string& S_FPS_SCORED::scorer() const {
  // @@protoc_insertion_point(field_get:Protocol.S_FPS_SCORED.scorer)
  return _internal_scorer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_FPS_SCORED::set_scorer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.scorer_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_FPS_SCORED.scorer)
}
inline std::string* S_FPS_SCORED::mutable_scorer() {
  std::string* _s = _internal_mutable_scorer();
  // @@protoc_insertion_point(field_mutable:Protocol.S_FPS_SCORED.scorer)
  return _s;
}
inline const std::string& S_FPS_SCORED::_internal_scorer() const {
  return _impl_.scorer_.Get();
}
inline void S_FPS_SCORED::_internal_set_scorer(const std::string& value) {
  
  _impl_.scorer_.Set(value, GetArenaForAllocation());
}
inline std::string* S_FPS_SCORED::_internal_mutable_scorer() {
  
  return _impl_.scorer_.Mutable(GetArenaForAllocation());
}
inline std::string* S_FPS_SCORED::release_scorer() {
  // @@protoc_insertion_point(field_release:Protocol.S_FPS_SCORED.scorer)
  return _impl_.scorer_.Release();
}
inline void S_FPS_SCORED::set_allocated_scorer(std::string* scorer) {
  if (scorer != nullptr) {
    
  } else {
    
  }
  _impl_.scorer_.SetAllocated(scorer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scorer_.IsDefault()) {
    _impl_.scorer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_FPS_SCORED.scorer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_5f002_5fFPS_2eproto
